#include <stdbool.h>
#include <stdlib.h>

typedef char GLchar;
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;

typedef void(*gl13PAccum)(GLenum, GLfloat);
typedef void(*gl13PAlphaFunc)(GLenum, GLclampf);
typedef void(*gl13PBegin)(GLenum);
typedef void(*gl13PEnd)();
typedef void(*gl13PBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, GLubyte*);
typedef void(*gl13PBlendFunc)(GLenum, GLenum);
typedef void(*gl13PCallList)(GLuint);
typedef void(*gl13PCallLists)(GLsizei, GLenum, GLvoid*);
typedef void(*gl13PClear)(GLbitfield);
typedef void(*gl13PClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PClearColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl13PClearDepth)(GLclampd);
typedef void(*gl13PClearIndex)(GLfloat);
typedef void(*gl13PClearStencil)(GLint);
typedef void(*gl13PClipPlane)(GLenum, GLdouble*);
typedef void(*gl13PColor3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl13PColor3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PColor3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PColor3i)(GLint, GLint, GLint);
typedef void(*gl13PColor3s)(GLshort, GLshort, GLshort);
typedef void(*gl13PColor3ub)(GLubyte, GLubyte, GLubyte);
typedef void(*gl13PColor3ui)(GLuint, GLuint, GLuint);
typedef void(*gl13PColor3us)(GLushort, GLushort, GLushort);
typedef void(*gl13PColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
typedef void(*gl13PColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PColor4i)(GLint, GLint, GLint, GLint);
typedef void(*gl13PColor4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
typedef void(*gl13PColor4ui)(GLuint, GLuint, GLuint, GLuint);
typedef void(*gl13PColor4us)(GLushort, GLushort, GLushort, GLushort);
typedef void(*gl13PColor3bv)(GLbyte*);
typedef void(*gl13PColor3dv)(GLdouble*);
typedef void(*gl13PColor3fv)(GLfloat*);
typedef void(*gl13PColor3iv)(GLint*);
typedef void(*gl13PColor3sv)(GLshort*);
typedef void(*gl13PColor3ubv)(GLubyte*);
typedef void(*gl13PColor3uiv)(GLuint*);
typedef void(*gl13PColor3usv)(GLushort*);
typedef void(*gl13PColor4bv)(GLbyte*);
typedef void(*gl13PColor4dv)(GLdouble*);
typedef void(*gl13PColor4fv)(GLfloat*);
typedef void(*gl13PColor4iv)(GLint*);
typedef void(*gl13PColor4sv)(GLshort*);
typedef void(*gl13PColor4ubv)(GLubyte*);
typedef void(*gl13PColor4uiv)(GLuint*);
typedef void(*gl13PColor4usv)(GLushort*);
typedef void(*gl13PColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
typedef void(*gl13PColorMaterial)(GLenum, GLenum);
typedef void(*gl13PColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
typedef void(*gl13PCullFace)(GLenum);
typedef void(*gl13PConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PConvolutionParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PConvolutionParameteri)(GLenum, GLenum, GLint);
typedef void(*gl13PCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl13PCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
typedef void(*gl13PCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl13PCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl13PDeleteLists)(GLuint, GLsizei);
typedef void(*gl13PDepthFunc)(GLenum);
typedef void(*gl13PDepthMask)(GLboolean);
typedef void(*gl13PDepthRange)(GLclampd, GLclampd);
typedef void(*gl13PEnable)(GLenum);
typedef void(*gl13PDisable)(GLenum);
typedef void(*gl13PDrawBuffer)(GLenum);
typedef void(*gl13PDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PEdgeFlag)(GLboolean);
typedef void(*gl13PEdgeFlagv)(GLboolean*);
typedef void(*gl13PEdgeFlagPointer)(GLsizei, GLvoid*);
typedef void(*gl13PEvalCoord1d)(GLdouble);
typedef void(*gl13PEvalCoord1f)(GLfloat);
typedef void(*gl13PEvalCoord2d)(GLdouble, GLdouble);
typedef void(*gl13PEvalCoord2f)(GLfloat, GLfloat);
typedef void(*gl13PEvalCoord1dv)(GLdouble*);
typedef void(*gl13PEvalCoord1fv)(GLfloat*);
typedef void(*gl13PEvalCoord2dv)(GLdouble*);
typedef void(*gl13PEvalCoord2fv)(GLfloat*);
typedef void(*gl13PEvalMesh1)(GLenum, GLint, GLint);
typedef void(*gl13PEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl13PEvalPoint1)(GLint);
typedef void(*gl13PEvalPoint2)(GLint, GLint);
typedef void(*gl13PFeedbackBuffer)(GLsizei, GLenum, GLfloat*);
typedef void(*gl13PFinish)();
typedef void(*gl13PFlush)();
typedef void(*gl13PFogf)(GLenum, GLfloat);
typedef void(*gl13PFogi)(GLenum, GLint);
typedef void(*gl13PFogfv)(GLenum, GLfloat*);
typedef void(*gl13PFogiv)(GLenum, GLint*);
typedef void(*gl13PFrontFace)(GLenum);
typedef void(*gl13PFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef GLuint(*gl13PGenLists)(GLsizei);
typedef void(*gl13PGetBooleanv)(GLenum, GLboolean*);
typedef void(*gl13PGetDoublev)(GLenum, GLdouble*);
typedef void(*gl13PGetFloatv)(GLenum, GLfloat*);
typedef void(*gl13PGetIntegerv)(GLenum, GLint*);
typedef void(*gl13PGetClipPlane)(GLenum, GLdouble*);
typedef GLenum(*gl13PGetError)();
typedef void(*gl13PGetLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetMapdv)(GLenum, GLenum, GLdouble*);
typedef void(*gl13PGetMapfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetMapiv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetPixelMapfv)(GLenum, GLfloat*);
typedef void(*gl13PGetPixelMapuiv)(GLenum, GLuint*);
typedef void(*gl13PGetPixelMapusv)(GLenum, GLushort*);
typedef void(*gl13PGetPolygonStipple)(GLubyte*);
typedef GLubyte*(*gl13PGetString)(GLenum);
typedef void(*gl13PGetTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl13PGetTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetTexImage)(GLenum, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl13PGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat*);
typedef void(*gl13PGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint*);
typedef void(*gl13PGetTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PHint)(GLenum, GLenum);
typedef void(*gl13PIndexd)(GLdouble);
typedef void(*gl13PIndexf)(GLfloat);
typedef void(*gl13PIndexi)(GLint);
typedef void(*gl13PIndexs)(GLshort);
typedef void(*gl13PIndexdv)(GLdouble*);
typedef void(*gl13PIndexfv)(GLfloat*);
typedef void(*gl13PIndexiv)(GLint*);
typedef void(*gl13PIndexsv)(GLshort*);
typedef void(*gl13PIndexMask)(GLuint);
typedef void(*gl13PIndexPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl13PInitNames)();
typedef void(*gl13PIsEnabled)(GLenum);
typedef GLboolean(*gl13PIsList)(GLuint);
typedef void(*gl13PLightf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PLighti)(GLenum, GLenum, GLint);
typedef void(*gl13PLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl13PLightModelf)(GLenum, GLfloat);
typedef void(*gl13PLightModeli)(GLenum, GLint);
typedef void(*gl13PLightModelfv)(GLenum, GLfloat*);
typedef void(*gl13PLightModeliv)(GLenum, GLint*);
typedef void(*gl13PLineStipple)(GLint, GLushort);
typedef void(*gl13PLineWidth)(GLfloat);
typedef void(*gl13PListBase)(GLuint);
typedef void(*gl13PLoadIdentity)();
typedef void(*gl13PLoadMatrixd)(GLdouble*);
typedef void(*gl13PLoadMatrixf)(GLfloat*);
typedef void(*gl13PLoadName)(GLuint);
typedef void(*gl13PLogicOp)(GLenum);
typedef void(*gl13PMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl13PMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl13PMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl13PMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl13PMapGrid1d)(GLint, GLdouble, GLdouble);
typedef void(*gl13PMapGrid1f)(GLint, GLfloat, GLfloat);
typedef void(*gl13PMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
typedef void(*gl13PMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
typedef void(*gl13PMaterialf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PMateriali)(GLenum, GLenum, GLint);
typedef void(*gl13PMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl13PMatrixMode)(GLenum);
typedef void(*gl13PMultMatrixd)(GLdouble*);
typedef void(*gl13PMultMatrixf)(GLfloat*);
typedef void(*gl13PNewList)(GLuint, GLenum);
typedef void(*gl13PEndList)();
typedef void(*gl13PNormal3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl13PNormal3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PNormal3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PNormal3i)(GLint, GLint, GLint);
typedef void(*gl13PNormal3s)(GLshort, GLshort, GLshort);
typedef void(*gl13PNormal3bv)(GLbyte*);
typedef void(*gl13PNormal3dv)(GLdouble*);
typedef void(*gl13PNormal3fv)(GLfloat*);
typedef void(*gl13PNormal3iv)(GLint*);
typedef void(*gl13PNormal3sv)(GLshort*);
typedef void(*gl13POrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PPassThrough)(GLfloat);
typedef void(*gl13PPixelMapfv)(GLenum, GLsizei, GLfloat*);
typedef void(*gl13PPixelMapuiv)(GLenum, GLsizei, GLuint*);
typedef void(*gl13PPixelMapusv)(GLenum, GLsizei, GLushort*);
typedef void(*gl13PPixelStoref)(GLenum, GLfloat);
typedef void(*gl13PPixelStorei)(GLenum, GLint);
typedef void(*gl13PPixelTransferf)(GLenum, GLfloat);
typedef void(*gl13PPixelTransferi)(GLenum, GLint);
typedef void(*gl13PPixelZoom)(GLfloat, GLfloat);
typedef void(*gl13PPointSize)(GLfloat);
typedef void(*gl13PPolygonMode)(GLenum, GLenum);
typedef void(*gl13PPolygonStipple)(GLubyte*);
typedef void(*gl13PPushAttrib)(GLbitfield);
typedef void(*gl13PPopAttrib)();
typedef void(*gl13PPushMatrix)();
typedef void(*gl13PPopMatrix)();
typedef void(*gl13PPushName)(GLuint);
typedef void(*gl13PPopName)();
typedef void(*gl13PRasterPos2d)(GLdouble, GLdouble);
typedef void(*gl13PRasterPos2f)(GLfloat, GLfloat);
typedef void(*gl13PRasterPos2i)(GLint, GLint);
typedef void(*gl13PRasterPos2s)(GLshort, GLshort);
typedef void(*gl13PRasterPos3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PRasterPos3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PRasterPos3i)(GLint, GLint, GLint);
typedef void(*gl13PRasterPos3s)(GLshort, GLshort, GLshort);
typedef void(*gl13PRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PRasterPos4i)(GLint, GLint, GLint, GLint);
typedef void(*gl13PRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PRasterPos2dv)(GLdouble*);
typedef void(*gl13PRasterPos2fv)(GLfloat*);
typedef void(*gl13PRasterPos2iv)(GLint*);
typedef void(*gl13PRasterPos2sv)(GLshort*);
typedef void(*gl13PRasterPos3dv)(GLdouble*);
typedef void(*gl13PRasterPos3fv)(GLfloat*);
typedef void(*gl13PRasterPos3iv)(GLint*);
typedef void(*gl13PRasterPos3sv)(GLshort*);
typedef void(*gl13PRasterPos4dv)(GLdouble*);
typedef void(*gl13PRasterPos4fv)(GLfloat*);
typedef void(*gl13PRasterPos4iv)(GLint*);
typedef void(*gl13PRasterPos4sv)(GLshort*);
typedef void(*gl13PReadBuffer)(GLenum);
typedef void(*gl13PReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PRecti)(GLint, GLint, GLint, GLint);
typedef void(*gl13PRects)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PRectdv)(GLdouble*, GLdouble*);
typedef void(*gl13PRectfv)(GLfloat*, GLfloat*);
typedef void(*gl13PRectiv)(GLint*, GLint*);
typedef void(*gl13PRectsv)(GLshort*, GLshort*);
typedef GLint(*gl13PRenderMode)(GLenum);
typedef void(*gl13PRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PScaled)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PScalef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PScissor)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl13PSelectBuffer)(GLsizei, GLuint*);
typedef void(*gl13PShadeModel)(GLenum);
typedef void(*gl13PStencilFunc)(GLenum, GLint, GLuint);
typedef void(*gl13PStencilMask)(GLuint);
typedef void(*gl13PStencilOp)(GLenum, GLenum, GLenum);
typedef void(*gl13PTexCoord1d)(GLdouble);
typedef void(*gl13PTexCoord1f)(GLfloat);
typedef void(*gl13PTexCoord1i)(GLint);
typedef void(*gl13PTexCoord1s)(GLshort);
typedef void(*gl13PTexCoord2d)(GLdouble, GLdouble);
typedef void(*gl13PTexCoord2f)(GLfloat, GLfloat);
typedef void(*gl13PTexCoord2i)(GLint, GLint);
typedef void(*gl13PTexCoord2s)(GLshort, GLshort);
typedef void(*gl13PTexCoord3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PTexCoord3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PTexCoord3i)(GLint, GLint, GLint);
typedef void(*gl13PTexCoord3s)(GLshort, GLshort, GLshort);
typedef void(*gl13PTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PTexCoord4i)(GLint, GLint, GLint, GLint);
typedef void(*gl13PTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PTexCoord1dv)(GLdouble*);
typedef void(*gl13PTexCoord1fv)(GLfloat*);
typedef void(*gl13PTexCoord1iv)(GLint*);
typedef void(*gl13PTexCoord1sv)(GLshort*);
typedef void(*gl13PTexCoord2dv)(GLdouble*);
typedef void(*gl13PTexCoord2fv)(GLfloat*);
typedef void(*gl13PTexCoord2iv)(GLint*);
typedef void(*gl13PTexCoord2sv)(GLshort*);
typedef void(*gl13PTexCoord3dv)(GLdouble*);
typedef void(*gl13PTexCoord3fv)(GLfloat*);
typedef void(*gl13PTexCoord3iv)(GLint*);
typedef void(*gl13PTexCoord3sv)(GLshort*);
typedef void(*gl13PTexCoord4dv)(GLdouble*);
typedef void(*gl13PTexCoord4fv)(GLfloat*);
typedef void(*gl13PTexCoord4iv)(GLint*);
typedef void(*gl13PTexCoord4sv)(GLshort*);
typedef void(*gl13PTexEnvf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PTexEnvi)(GLenum, GLenum, GLint);
typedef void(*gl13PTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl13PTexGend)(GLenum, GLenum, GLdouble);
typedef void(*gl13PTexGenf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PTexGeni)(GLenum, GLenum, GLint);
typedef void(*gl13PTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl13PTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl13PTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl13PTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl13PTexParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl13PTexParameteri)(GLenum, GLenum, GLint);
typedef void(*gl13PTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PTranslated)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PTranslatef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PVertex2s)(GLshort, GLshort);
typedef void(*gl13PVertex2i)(GLint, GLint);
typedef void(*gl13PVertex2f)(GLfloat, GLfloat);
typedef void(*gl13PVertex2d)(GLdouble, GLdouble);
typedef void(*gl13PVertex3s)(GLshort, GLshort, GLshort);
typedef void(*gl13PVertex3i)(GLint, GLint, GLint);
typedef void(*gl13PVertex3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl13PVertex3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl13PVertex4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PVertex4i)(GLint, GLint, GLint, GLint);
typedef void(*gl13PVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PViewport)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl13PGetColorTable)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl13PGetColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetConvolutionFilter)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl13PGetConvolutionParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetConvolutionParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetHistogram)(GLenum, GLboolean, GLenum, GLenum, GLvoid*);
typedef void(*gl13PGetHistogramParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl13PGetHistogramParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl13PGetSeparableFilter)(GLenum, GLenum, GLenum, GLvoid*, GLvoid*, GLvoid*);
typedef void(*gl13PHistogram)(GLenum, GLsizei, GLenum, GLboolean);
typedef void(*gl13PMinmax)(GLenum, GLenum, GLboolean);
typedef void(*gl13PMultiTexCoord1s)(GLenum, GLshort);
typedef void(*gl13PMultiTexCoord1i)(GLenum, GLint);
typedef void(*gl13PMultiTexCoord1f)(GLenum, GLfloat);
typedef void(*gl13PMultiTexCoord1d)(GLenum, GLdouble);
typedef void(*gl13PMultiTexCoord2s)(GLenum, GLshort, GLshort);
typedef void(*gl13PMultiTexCoord2i)(GLenum, GLint, GLint);
typedef void(*gl13PMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
typedef void(*gl13PMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
typedef void(*gl13PMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
typedef void(*gl13PMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
typedef void(*gl13PMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
typedef void(*gl13PMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl13PMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl13PMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl13PMultiTexCoord1sv)(GLenum, GLshort*);
typedef void(*gl13PMultiTexCoord1iv)(GLenum, GLint*);
typedef void(*gl13PMultiTexCoord1fv)(GLenum, GLfloat*);
typedef void(*gl13PMultiTexCoord1dv)(GLenum, GLdouble*);
typedef void(*gl13PMultiTexCoord2sv)(GLenum, GLshort*);
typedef void(*gl13PMultiTexCoord2iv)(GLenum, GLint*);
typedef void(*gl13PMultiTexCoord2fv)(GLenum, GLfloat*);
typedef void(*gl13PMultiTexCoord2dv)(GLenum, GLdouble*);
typedef void(*gl13PMultiTexCoord3sv)(GLenum, GLshort*);
typedef void(*gl13PMultiTexCoord3iv)(GLenum, GLint*);
typedef void(*gl13PMultiTexCoord3fv)(GLenum, GLfloat*);
typedef void(*gl13PMultiTexCoord3dv)(GLenum, GLdouble*);
typedef void(*gl13PMultiTexCoord4sv)(GLenum, GLshort*);
typedef void(*gl13PMultiTexCoord4iv)(GLenum, GLint*);
typedef void(*gl13PMultiTexCoord4fv)(GLenum, GLfloat*);
typedef void(*gl13PMultiTexCoord4dv)(GLenum, GLdouble*);
typedef void(*gl13PResetHistogram)(GLenum);
typedef void(*gl13PResetMinmax)(GLenum);
typedef void(*gl13PSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*, GLvoid*);
typedef GLboolean(*gl13PAreTexturesResident)(GLsizei, GLuint*, GLboolean*);
typedef void(*gl13PArrayElement)(GLint);
typedef void(*gl13PDrawArrays)(GLenum, GLint, GLsizei);
typedef void(*gl13PDrawElements)(GLenum, GLsizei, GLenum, GLvoid*);
typedef void(*gl13PGetPointerv)(GLenum, GLvoid*);
typedef void(*gl13PPolygonOffset)(GLfloat, GLfloat);
typedef void(*gl13PCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
typedef void(*gl13PCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
typedef void(*gl13PCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
typedef void(*gl13PCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl13PBindTexture)(GLenum, GLuint);
typedef void(*gl13PDeleteTextures)(GLsizei, GLuint*);
typedef void(*gl13PGenTextures)(GLsizei, GLuint*);
typedef GLboolean(*gl13PIsTexture)(GLuint);
typedef void(*gl13PColorPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PEnableClientState)(GLenum);
typedef void(*gl13PDisableClientState)(GLenum);
typedef void(*gl13PIndexub)(GLubyte);
typedef void(*gl13PIndexubv)(GLubyte*);
typedef void(*gl13PInterleavedArrays)(GLenum, GLsizei, GLvoid*);
typedef void(*gl13PNormalPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl13PPushClientAttrib)(GLbitfield);
typedef void(*gl13PPrioritizeTextures)(GLsizei, GLuint*, GLclampf*);
typedef void(*gl13PPopClientAttrib)();
typedef void(*gl13PTexCoordPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PVertexPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PBlendColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl13PBlendEquation)(GLenum);
typedef void(*gl13PCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl13PDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, GLvoid*);
typedef void(*gl13PTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl13PTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl13PActiveTexture)(GLenum);
typedef void(*gl13PClientActiveTexture)(GLenum);
typedef void(*gl13PCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl13PCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl13PCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl13PCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl13PGetCompressedTexImage)(GLenum, GLint, GLvoid*);
typedef void(*gl13PLoadTransposeMatrixd)(GLdouble*);
typedef void(*gl13PLoadTransposeMatrixf)(GLdouble*);
typedef void(*gl13PMultTransposeMatrixd)(GLdouble*);
typedef void(*gl13PMultTransposeMatrixf)(GLfloat*);
typedef void(*gl13PSampleCoverage)(GLclampf, GLboolean);

typedef struct {
    gl13PAccum fnAccum;
    gl13PAlphaFunc fnAlphaFunc;
    gl13PBegin fnBegin;
    gl13PEnd fnEnd;
    gl13PBitmap fnBitmap;
    gl13PBlendFunc fnBlendFunc;
    gl13PCallList fnCallList;
    gl13PCallLists fnCallLists;
    gl13PClear fnClear;
    gl13PClearAccum fnClearAccum;
    gl13PClearColor fnClearColor;
    gl13PClearDepth fnClearDepth;
    gl13PClearIndex fnClearIndex;
    gl13PClearStencil fnClearStencil;
    gl13PClipPlane fnClipPlane;
    gl13PColor3b fnColor3b;
    gl13PColor3d fnColor3d;
    gl13PColor3f fnColor3f;
    gl13PColor3i fnColor3i;
    gl13PColor3s fnColor3s;
    gl13PColor3ub fnColor3ub;
    gl13PColor3ui fnColor3ui;
    gl13PColor3us fnColor3us;
    gl13PColor4b fnColor4b;
    gl13PColor4d fnColor4d;
    gl13PColor4f fnColor4f;
    gl13PColor4i fnColor4i;
    gl13PColor4s fnColor4s;
    gl13PColor4ub fnColor4ub;
    gl13PColor4ui fnColor4ui;
    gl13PColor4us fnColor4us;
    gl13PColor3bv fnColor3bv;
    gl13PColor3dv fnColor3dv;
    gl13PColor3fv fnColor3fv;
    gl13PColor3iv fnColor3iv;
    gl13PColor3sv fnColor3sv;
    gl13PColor3ubv fnColor3ubv;
    gl13PColor3uiv fnColor3uiv;
    gl13PColor3usv fnColor3usv;
    gl13PColor4bv fnColor4bv;
    gl13PColor4dv fnColor4dv;
    gl13PColor4fv fnColor4fv;
    gl13PColor4iv fnColor4iv;
    gl13PColor4sv fnColor4sv;
    gl13PColor4ubv fnColor4ubv;
    gl13PColor4uiv fnColor4uiv;
    gl13PColor4usv fnColor4usv;
    gl13PColorMask fnColorMask;
    gl13PColorMaterial fnColorMaterial;
    gl13PColorTable fnColorTable;
    gl13PColorTableParameterfv fnColorTableParameterfv;
    gl13PColorTableParameteriv fnColorTableParameteriv;
    gl13PColorSubTable fnColorSubTable;
    gl13PCopyPixels fnCopyPixels;
    gl13PCullFace fnCullFace;
    gl13PConvolutionFilter1D fnConvolutionFilter1D;
    gl13PConvolutionFilter2D fnConvolutionFilter2D;
    gl13PConvolutionParameterf fnConvolutionParameterf;
    gl13PConvolutionParameteri fnConvolutionParameteri;
    gl13PCopyColorTable fnCopyColorTable;
    gl13PCopyColorSubTable fnCopyColorSubTable;
    gl13PCopyConvolutionFilter1D fnCopyConvolutionFilter1D;
    gl13PCopyConvolutionFilter2D fnCopyConvolutionFilter2D;
    gl13PDeleteLists fnDeleteLists;
    gl13PDepthFunc fnDepthFunc;
    gl13PDepthMask fnDepthMask;
    gl13PDepthRange fnDepthRange;
    gl13PEnable fnEnable;
    gl13PDisable fnDisable;
    gl13PDrawBuffer fnDrawBuffer;
    gl13PDrawPixels fnDrawPixels;
    gl13PEdgeFlag fnEdgeFlag;
    gl13PEdgeFlagv fnEdgeFlagv;
    gl13PEdgeFlagPointer fnEdgeFlagPointer;
    gl13PEvalCoord1d fnEvalCoord1d;
    gl13PEvalCoord1f fnEvalCoord1f;
    gl13PEvalCoord2d fnEvalCoord2d;
    gl13PEvalCoord2f fnEvalCoord2f;
    gl13PEvalCoord1dv fnEvalCoord1dv;
    gl13PEvalCoord1fv fnEvalCoord1fv;
    gl13PEvalCoord2dv fnEvalCoord2dv;
    gl13PEvalCoord2fv fnEvalCoord2fv;
    gl13PEvalMesh1 fnEvalMesh1;
    gl13PEvalMesh2 fnEvalMesh2;
    gl13PEvalPoint1 fnEvalPoint1;
    gl13PEvalPoint2 fnEvalPoint2;
    gl13PFeedbackBuffer fnFeedbackBuffer;
    gl13PFinish fnFinish;
    gl13PFlush fnFlush;
    gl13PFogf fnFogf;
    gl13PFogi fnFogi;
    gl13PFogfv fnFogfv;
    gl13PFogiv fnFogiv;
    gl13PFrontFace fnFrontFace;
    gl13PFrustum fnFrustum;
    gl13PGenLists fnGenLists;
    gl13PGetBooleanv fnGetBooleanv;
    gl13PGetDoublev fnGetDoublev;
    gl13PGetFloatv fnGetFloatv;
    gl13PGetIntegerv fnGetIntegerv;
    gl13PGetClipPlane fnGetClipPlane;
    gl13PGetError fnGetError;
    gl13PGetLightfv fnGetLightfv;
    gl13PGetLightiv fnGetLightiv;
    gl13PGetMapdv fnGetMapdv;
    gl13PGetMapfv fnGetMapfv;
    gl13PGetMapiv fnGetMapiv;
    gl13PGetMaterialfv fnGetMaterialfv;
    gl13PGetMaterialiv fnGetMaterialiv;
    gl13PGetPixelMapfv fnGetPixelMapfv;
    gl13PGetPixelMapuiv fnGetPixelMapuiv;
    gl13PGetPixelMapusv fnGetPixelMapusv;
    gl13PGetPolygonStipple fnGetPolygonStipple;
    gl13PGetString fnGetString;
    gl13PGetTexEnvfv fnGetTexEnvfv;
    gl13PGetTexEnviv fnGetTexEnviv;
    gl13PGetTexGendv fnGetTexGendv;
    gl13PGetTexGenfv fnGetTexGenfv;
    gl13PGetTexGeniv fnGetTexGeniv;
    gl13PGetTexImage fnGetTexImage;
    gl13PGetTexLevelParameterfv fnGetTexLevelParameterfv;
    gl13PGetTexLevelParameteriv fnGetTexLevelParameteriv;
    gl13PGetTexParameterfv fnGetTexParameterfv;
    gl13PGetTexParameteriv fnGetTexParameteriv;
    gl13PHint fnHint;
    gl13PIndexd fnIndexd;
    gl13PIndexf fnIndexf;
    gl13PIndexi fnIndexi;
    gl13PIndexs fnIndexs;
    gl13PIndexdv fnIndexdv;
    gl13PIndexfv fnIndexfv;
    gl13PIndexiv fnIndexiv;
    gl13PIndexsv fnIndexsv;
    gl13PIndexMask fnIndexMask;
    gl13PIndexPointer fnIndexPointer;
    gl13PInitNames fnInitNames;
    gl13PIsEnabled fnIsEnabled;
    gl13PIsList fnIsList;
    gl13PLightf fnLightf;
    gl13PLighti fnLighti;
    gl13PLightfv fnLightfv;
    gl13PLightiv fnLightiv;
    gl13PLightModelf fnLightModelf;
    gl13PLightModeli fnLightModeli;
    gl13PLightModelfv fnLightModelfv;
    gl13PLightModeliv fnLightModeliv;
    gl13PLineStipple fnLineStipple;
    gl13PLineWidth fnLineWidth;
    gl13PListBase fnListBase;
    gl13PLoadIdentity fnLoadIdentity;
    gl13PLoadMatrixd fnLoadMatrixd;
    gl13PLoadMatrixf fnLoadMatrixf;
    gl13PLoadName fnLoadName;
    gl13PLogicOp fnLogicOp;
    gl13PMap1d fnMap1d;
    gl13PMap1f fnMap1f;
    gl13PMap2d fnMap2d;
    gl13PMap2f fnMap2f;
    gl13PMapGrid1d fnMapGrid1d;
    gl13PMapGrid1f fnMapGrid1f;
    gl13PMapGrid2d fnMapGrid2d;
    gl13PMapGrid2f fnMapGrid2f;
    gl13PMaterialf fnMaterialf;
    gl13PMateriali fnMateriali;
    gl13PMaterialfv fnMaterialfv;
    gl13PMaterialiv fnMaterialiv;
    gl13PMatrixMode fnMatrixMode;
    gl13PMultMatrixd fnMultMatrixd;
    gl13PMultMatrixf fnMultMatrixf;
    gl13PNewList fnNewList;
    gl13PEndList fnEndList;
    gl13PNormal3b fnNormal3b;
    gl13PNormal3d fnNormal3d;
    gl13PNormal3f fnNormal3f;
    gl13PNormal3i fnNormal3i;
    gl13PNormal3s fnNormal3s;
    gl13PNormal3bv fnNormal3bv;
    gl13PNormal3dv fnNormal3dv;
    gl13PNormal3fv fnNormal3fv;
    gl13PNormal3iv fnNormal3iv;
    gl13PNormal3sv fnNormal3sv;
    gl13POrtho fnOrtho;
    gl13PPassThrough fnPassThrough;
    gl13PPixelMapfv fnPixelMapfv;
    gl13PPixelMapuiv fnPixelMapuiv;
    gl13PPixelMapusv fnPixelMapusv;
    gl13PPixelStoref fnPixelStoref;
    gl13PPixelStorei fnPixelStorei;
    gl13PPixelTransferf fnPixelTransferf;
    gl13PPixelTransferi fnPixelTransferi;
    gl13PPixelZoom fnPixelZoom;
    gl13PPointSize fnPointSize;
    gl13PPolygonMode fnPolygonMode;
    gl13PPolygonStipple fnPolygonStipple;
    gl13PPushAttrib fnPushAttrib;
    gl13PPopAttrib fnPopAttrib;
    gl13PPushMatrix fnPushMatrix;
    gl13PPopMatrix fnPopMatrix;
    gl13PPushName fnPushName;
    gl13PPopName fnPopName;
    gl13PRasterPos2d fnRasterPos2d;
    gl13PRasterPos2f fnRasterPos2f;
    gl13PRasterPos2i fnRasterPos2i;
    gl13PRasterPos2s fnRasterPos2s;
    gl13PRasterPos3d fnRasterPos3d;
    gl13PRasterPos3f fnRasterPos3f;
    gl13PRasterPos3i fnRasterPos3i;
    gl13PRasterPos3s fnRasterPos3s;
    gl13PRasterPos4d fnRasterPos4d;
    gl13PRasterPos4f fnRasterPos4f;
    gl13PRasterPos4i fnRasterPos4i;
    gl13PRasterPos4s fnRasterPos4s;
    gl13PRasterPos2dv fnRasterPos2dv;
    gl13PRasterPos2fv fnRasterPos2fv;
    gl13PRasterPos2iv fnRasterPos2iv;
    gl13PRasterPos2sv fnRasterPos2sv;
    gl13PRasterPos3dv fnRasterPos3dv;
    gl13PRasterPos3fv fnRasterPos3fv;
    gl13PRasterPos3iv fnRasterPos3iv;
    gl13PRasterPos3sv fnRasterPos3sv;
    gl13PRasterPos4dv fnRasterPos4dv;
    gl13PRasterPos4fv fnRasterPos4fv;
    gl13PRasterPos4iv fnRasterPos4iv;
    gl13PRasterPos4sv fnRasterPos4sv;
    gl13PReadBuffer fnReadBuffer;
    gl13PReadPixels fnReadPixels;
    gl13PRectd fnRectd;
    gl13PRectf fnRectf;
    gl13PRecti fnRecti;
    gl13PRects fnRects;
    gl13PRectdv fnRectdv;
    gl13PRectfv fnRectfv;
    gl13PRectiv fnRectiv;
    gl13PRectsv fnRectsv;
    gl13PRenderMode fnRenderMode;
    gl13PRotated fnRotated;
    gl13PRotatef fnRotatef;
    gl13PScaled fnScaled;
    gl13PScalef fnScalef;
    gl13PScissor fnScissor;
    gl13PSelectBuffer fnSelectBuffer;
    gl13PShadeModel fnShadeModel;
    gl13PStencilFunc fnStencilFunc;
    gl13PStencilMask fnStencilMask;
    gl13PStencilOp fnStencilOp;
    gl13PTexCoord1d fnTexCoord1d;
    gl13PTexCoord1f fnTexCoord1f;
    gl13PTexCoord1i fnTexCoord1i;
    gl13PTexCoord1s fnTexCoord1s;
    gl13PTexCoord2d fnTexCoord2d;
    gl13PTexCoord2f fnTexCoord2f;
    gl13PTexCoord2i fnTexCoord2i;
    gl13PTexCoord2s fnTexCoord2s;
    gl13PTexCoord3d fnTexCoord3d;
    gl13PTexCoord3f fnTexCoord3f;
    gl13PTexCoord3i fnTexCoord3i;
    gl13PTexCoord3s fnTexCoord3s;
    gl13PTexCoord4d fnTexCoord4d;
    gl13PTexCoord4f fnTexCoord4f;
    gl13PTexCoord4i fnTexCoord4i;
    gl13PTexCoord4s fnTexCoord4s;
    gl13PTexCoord1dv fnTexCoord1dv;
    gl13PTexCoord1fv fnTexCoord1fv;
    gl13PTexCoord1iv fnTexCoord1iv;
    gl13PTexCoord1sv fnTexCoord1sv;
    gl13PTexCoord2dv fnTexCoord2dv;
    gl13PTexCoord2fv fnTexCoord2fv;
    gl13PTexCoord2iv fnTexCoord2iv;
    gl13PTexCoord2sv fnTexCoord2sv;
    gl13PTexCoord3dv fnTexCoord3dv;
    gl13PTexCoord3fv fnTexCoord3fv;
    gl13PTexCoord3iv fnTexCoord3iv;
    gl13PTexCoord3sv fnTexCoord3sv;
    gl13PTexCoord4dv fnTexCoord4dv;
    gl13PTexCoord4fv fnTexCoord4fv;
    gl13PTexCoord4iv fnTexCoord4iv;
    gl13PTexCoord4sv fnTexCoord4sv;
    gl13PTexEnvf fnTexEnvf;
    gl13PTexEnvi fnTexEnvi;
    gl13PTexEnvfv fnTexEnvfv;
    gl13PTexEnviv fnTexEnviv;
    gl13PTexGend fnTexGend;
    gl13PTexGenf fnTexGenf;
    gl13PTexGeni fnTexGeni;
    gl13PTexGendv fnTexGendv;
    gl13PTexGenfv fnTexGenfv;
    gl13PTexGeniv fnTexGeniv;
    gl13PTexImage1D fnTexImage1D;
    gl13PTexImage2D fnTexImage2D;
    gl13PTexParameterf fnTexParameterf;
    gl13PTexParameteri fnTexParameteri;
    gl13PTexParameterfv fnTexParameterfv;
    gl13PTexParameteriv fnTexParameteriv;
    gl13PTranslated fnTranslated;
    gl13PTranslatef fnTranslatef;
    gl13PVertex2s fnVertex2s;
    gl13PVertex2i fnVertex2i;
    gl13PVertex2f fnVertex2f;
    gl13PVertex2d fnVertex2d;
    gl13PVertex3s fnVertex3s;
    gl13PVertex3i fnVertex3i;
    gl13PVertex3f fnVertex3f;
    gl13PVertex3d fnVertex3d;
    gl13PVertex4s fnVertex4s;
    gl13PVertex4i fnVertex4i;
    gl13PVertex4f fnVertex4f;
    gl13PVertex4d fnVertex4d;
    gl13PViewport fnViewport;
    gl13PGetColorTable fnGetColorTable;
    gl13PGetColorTableParameterfv fnGetColorTableParameterfv;
    gl13PGetColorTableParameteriv fnGetColorTableParameteriv;
    gl13PGetConvolutionFilter fnGetConvolutionFilter;
    gl13PGetConvolutionParameterfv fnGetConvolutionParameterfv;
    gl13PGetConvolutionParameteriv fnGetConvolutionParameteriv;
    gl13PGetHistogram fnGetHistogram;
    gl13PGetHistogramParameterfv fnGetHistogramParameterfv;
    gl13PGetHistogramParameteriv fnGetHistogramParameteriv;
    gl13PGetSeparableFilter fnGetSeparableFilter;
    gl13PHistogram fnHistogram;
    gl13PMinmax fnMinmax;
    gl13PMultiTexCoord1s fnMultiTexCoord1s;
    gl13PMultiTexCoord1i fnMultiTexCoord1i;
    gl13PMultiTexCoord1f fnMultiTexCoord1f;
    gl13PMultiTexCoord1d fnMultiTexCoord1d;
    gl13PMultiTexCoord2s fnMultiTexCoord2s;
    gl13PMultiTexCoord2i fnMultiTexCoord2i;
    gl13PMultiTexCoord2f fnMultiTexCoord2f;
    gl13PMultiTexCoord2d fnMultiTexCoord2d;
    gl13PMultiTexCoord3s fnMultiTexCoord3s;
    gl13PMultiTexCoord3i fnMultiTexCoord3i;
    gl13PMultiTexCoord3f fnMultiTexCoord3f;
    gl13PMultiTexCoord3d fnMultiTexCoord3d;
    gl13PMultiTexCoord4s fnMultiTexCoord4s;
    gl13PMultiTexCoord4i fnMultiTexCoord4i;
    gl13PMultiTexCoord4f fnMultiTexCoord4f;
    gl13PMultiTexCoord4d fnMultiTexCoord4d;
    gl13PMultiTexCoord1sv fnMultiTexCoord1sv;
    gl13PMultiTexCoord1iv fnMultiTexCoord1iv;
    gl13PMultiTexCoord1fv fnMultiTexCoord1fv;
    gl13PMultiTexCoord1dv fnMultiTexCoord1dv;
    gl13PMultiTexCoord2sv fnMultiTexCoord2sv;
    gl13PMultiTexCoord2iv fnMultiTexCoord2iv;
    gl13PMultiTexCoord2fv fnMultiTexCoord2fv;
    gl13PMultiTexCoord2dv fnMultiTexCoord2dv;
    gl13PMultiTexCoord3sv fnMultiTexCoord3sv;
    gl13PMultiTexCoord3iv fnMultiTexCoord3iv;
    gl13PMultiTexCoord3fv fnMultiTexCoord3fv;
    gl13PMultiTexCoord3dv fnMultiTexCoord3dv;
    gl13PMultiTexCoord4sv fnMultiTexCoord4sv;
    gl13PMultiTexCoord4iv fnMultiTexCoord4iv;
    gl13PMultiTexCoord4fv fnMultiTexCoord4fv;
    gl13PMultiTexCoord4dv fnMultiTexCoord4dv;
    gl13PResetHistogram fnResetHistogram;
    gl13PResetMinmax fnResetMinmax;
    gl13PSeparableFilter2D fnSeparableFilter2D;
    gl13PAreTexturesResident fnAreTexturesResident;
    gl13PArrayElement fnArrayElement;
    gl13PDrawArrays fnDrawArrays;
    gl13PDrawElements fnDrawElements;
    gl13PGetPointerv fnGetPointerv;
    gl13PPolygonOffset fnPolygonOffset;
    gl13PCopyTexImage1D fnCopyTexImage1D;
    gl13PCopyTexImage2D fnCopyTexImage2D;
    gl13PCopyTexSubImage1D fnCopyTexSubImage1D;
    gl13PCopyTexSubImage2D fnCopyTexSubImage2D;
    gl13PBindTexture fnBindTexture;
    gl13PDeleteTextures fnDeleteTextures;
    gl13PGenTextures fnGenTextures;
    gl13PIsTexture fnIsTexture;
    gl13PColorPointer fnColorPointer;
    gl13PEnableClientState fnEnableClientState;
    gl13PDisableClientState fnDisableClientState;
    gl13PIndexub fnIndexub;
    gl13PIndexubv fnIndexubv;
    gl13PInterleavedArrays fnInterleavedArrays;
    gl13PNormalPointer fnNormalPointer;
    gl13PPushClientAttrib fnPushClientAttrib;
    gl13PPrioritizeTextures fnPrioritizeTextures;
    gl13PPopClientAttrib fnPopClientAttrib;
    gl13PTexCoordPointer fnTexCoordPointer;
    gl13PTexSubImage1D fnTexSubImage1D;
    gl13PTexSubImage2D fnTexSubImage2D;
    gl13PVertexPointer fnVertexPointer;
    gl13PBlendColor fnBlendColor;
    gl13PBlendEquation fnBlendEquation;
    gl13PCopyTexSubImage3D fnCopyTexSubImage3D;
    gl13PDrawRangeElements fnDrawRangeElements;
    gl13PTexImage3D fnTexImage3D;
    gl13PTexSubImage3D fnTexSubImage3D;
    gl13PActiveTexture fnActiveTexture;
    gl13PClientActiveTexture fnClientActiveTexture;
    gl13PCompressedTexImage1D fnCompressedTexImage1D;
    gl13PCompressedTexImage2D fnCompressedTexImage2D;
    gl13PCompressedTexImage3D fnCompressedTexImage3D;
    gl13PCompressedTexSubImage1D fnCompressedTexSubImage1D;
    gl13PCompressedTexSubImage2D fnCompressedTexSubImage2D;
    gl13PCompressedTexSubImage3D fnCompressedTexSubImage3D;
    gl13PGetCompressedTexImage fnGetCompressedTexImage;
    gl13PLoadTransposeMatrixd fnLoadTransposeMatrixd;
    gl13PLoadTransposeMatrixf fnLoadTransposeMatrixf;
    gl13PMultTransposeMatrixd fnMultTransposeMatrixd;
    gl13PMultTransposeMatrixf fnMultTransposeMatrixf;
    gl13PSampleCoverage fnSampleCoverage;
} gl13Context;

extern gl13Context* gl13NewContext();
void gl13Accum(gl13Context* glc, GLenum op, GLfloat value);
void gl13AlphaFunc(gl13Context* glc, GLenum func, GLclampf ref);
void gl13Begin(gl13Context* glc, GLenum mode);
void gl13End(gl13Context* glc);
void gl13Bitmap(gl13Context* glc, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
void gl13BlendFunc(gl13Context* glc, GLenum sfactor, GLenum dfactor);
void gl13CallList(gl13Context* glc, GLuint list);
void gl13CallLists(gl13Context* glc, GLsizei n, GLenum type, GLvoid* lists);
void gl13Clear(gl13Context* glc, GLbitfield mask);
void gl13ClearAccum(gl13Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl13ClearColor(gl13Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl13ClearDepth(gl13Context* glc, GLclampd depth);
void gl13ClearIndex(gl13Context* glc, GLfloat c);
void gl13ClearStencil(gl13Context* glc, GLint s);
void gl13ClipPlane(gl13Context* glc, GLenum plane, GLdouble* equation);
void gl13Color3b(gl13Context* glc, GLbyte red, GLbyte green, GLbyte blue);
void gl13Color3d(gl13Context* glc, GLdouble red, GLdouble green, GLdouble blue);
void gl13Color3f(gl13Context* glc, GLfloat red, GLfloat green, GLfloat blue);
void gl13Color3i(gl13Context* glc, GLint red, GLint green, GLint blue);
void gl13Color3s(gl13Context* glc, GLshort red, GLshort green, GLshort blue);
void gl13Color3ub(gl13Context* glc, GLubyte red, GLubyte green, GLubyte blue);
void gl13Color3ui(gl13Context* glc, GLuint red, GLuint green, GLuint blue);
void gl13Color3us(gl13Context* glc, GLushort red, GLushort green, GLushort blue);
void gl13Color4b(gl13Context* glc, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void gl13Color4d(gl13Context* glc, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void gl13Color4f(gl13Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl13Color4i(gl13Context* glc, GLint red, GLint green, GLint blue, GLint alpha);
void gl13Color4s(gl13Context* glc, GLshort red, GLshort green, GLshort blue, GLshort alpha);
void gl13Color4ub(gl13Context* glc, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void gl13Color4ui(gl13Context* glc, GLuint red, GLuint green, GLuint blue, GLuint alpha);
void gl13Color4us(gl13Context* glc, GLushort red, GLushort green, GLushort blue, GLushort alpha);
void gl13Color3bv(gl13Context* glc, GLbyte* v);
void gl13Color3dv(gl13Context* glc, GLdouble* v);
void gl13Color3fv(gl13Context* glc, GLfloat* v);
void gl13Color3iv(gl13Context* glc, GLint* v);
void gl13Color3sv(gl13Context* glc, GLshort* v);
void gl13Color3ubv(gl13Context* glc, GLubyte* v);
void gl13Color3uiv(gl13Context* glc, GLuint* v);
void gl13Color3usv(gl13Context* glc, GLushort* v);
void gl13Color4bv(gl13Context* glc, GLbyte* v);
void gl13Color4dv(gl13Context* glc, GLdouble* v);
void gl13Color4fv(gl13Context* glc, GLfloat* v);
void gl13Color4iv(gl13Context* glc, GLint* v);
void gl13Color4sv(gl13Context* glc, GLshort* v);
void gl13Color4ubv(gl13Context* glc, GLubyte* v);
void gl13Color4uiv(gl13Context* glc, GLuint* v);
void gl13Color4usv(gl13Context* glc, GLushort* v);
void gl13ColorMask(gl13Context* glc, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void gl13ColorMaterial(gl13Context* glc, GLenum face, GLenum mode);
void gl13ColorTable(gl13Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl13ColorTableParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13ColorTableParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13ColorSubTable(gl13Context* glc, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid* data);
void gl13CopyPixels(gl13Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void gl13CullFace(gl13Context* glc, GLenum mode);
void gl13ConvolutionFilter1D(gl13Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl13ConvolutionFilter2D(gl13Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl13ConvolutionParameterf(gl13Context* glc, GLenum target, GLenum pname, GLfloat params);
void gl13ConvolutionParameteri(gl13Context* glc, GLenum target, GLenum pname, GLint params);
void gl13CopyColorTable(gl13Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl13CopyColorSubTable(gl13Context* glc, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void gl13CopyConvolutionFilter1D(gl13Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl13CopyConvolutionFilter2D(gl13Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void gl13DeleteLists(gl13Context* glc, GLuint list, GLsizei range);
void gl13DepthFunc(gl13Context* glc, GLenum func);
void gl13DepthMask(gl13Context* glc, GLboolean flag);
void gl13DepthRange(gl13Context* glc, GLclampd zNear, GLclampd zFar);
void gl13Enable(gl13Context* glc, GLenum cap);
void gl13Disable(gl13Context* glc, GLenum cap);
void gl13DrawBuffer(gl13Context* glc, GLenum mode);
void gl13DrawPixels(gl13Context* glc, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl13EdgeFlag(gl13Context* glc, GLboolean flag);
void gl13EdgeFlagv(gl13Context* glc, GLboolean* flag);
void gl13EdgeFlagPointer(gl13Context* glc, GLsizei stride, GLvoid* pointer);
void gl13EvalCoord1d(gl13Context* glc, GLdouble u);
void gl13EvalCoord1f(gl13Context* glc, GLfloat u);
void gl13EvalCoord2d(gl13Context* glc, GLdouble u, GLdouble v);
void gl13EvalCoord2f(gl13Context* glc, GLfloat u, GLfloat v);
void gl13EvalCoord1dv(gl13Context* glc, GLdouble* u);
void gl13EvalCoord1fv(gl13Context* glc, GLfloat* u);
void gl13EvalCoord2dv(gl13Context* glc, GLdouble* u);
void gl13EvalCoord2fv(gl13Context* glc, GLfloat* u);
void gl13EvalMesh1(gl13Context* glc, GLenum mode, GLint i1, GLint i2);
void gl13EvalMesh2(gl13Context* glc, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void gl13EvalPoint1(gl13Context* glc, GLint i);
void gl13EvalPoint2(gl13Context* glc, GLint i, GLint j);
void gl13FeedbackBuffer(gl13Context* glc, GLsizei size, GLenum type, GLfloat* buffer);
void gl13Finish(gl13Context* glc);
void gl13Flush(gl13Context* glc);
void gl13Fogf(gl13Context* glc, GLenum pname, GLfloat param);
void gl13Fogi(gl13Context* glc, GLenum pname, GLint param);
void gl13Fogfv(gl13Context* glc, GLenum pname, GLfloat* params);
void gl13Fogiv(gl13Context* glc, GLenum pname, GLint* params);
void gl13FrontFace(gl13Context* glc, GLenum mode);
void gl13Frustum(gl13Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLuint gl13GenLists(gl13Context* glc, GLsizei range);
void gl13GetBooleanv(gl13Context* glc, GLenum pname, GLboolean* params);
void gl13GetDoublev(gl13Context* glc, GLenum pname, GLdouble* params);
void gl13GetFloatv(gl13Context* glc, GLenum pname, GLfloat* params);
void gl13GetIntegerv(gl13Context* glc, GLenum pname, GLint* params);
void gl13GetClipPlane(gl13Context* glc, GLenum plane, GLdouble* equation);
GLenum gl13GetError(gl13Context* glc);
void gl13GetLightfv(gl13Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl13GetLightiv(gl13Context* glc, GLenum light, GLenum pname, GLint* params);
void gl13GetMapdv(gl13Context* glc, GLenum target, GLenum query, GLdouble* v);
void gl13GetMapfv(gl13Context* glc, GLenum target, GLenum query, GLfloat* v);
void gl13GetMapiv(gl13Context* glc, GLenum target, GLenum query, GLint* v);
void gl13GetMaterialfv(gl13Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl13GetMaterialiv(gl13Context* glc, GLenum face, GLenum pname, GLint* params);
void gl13GetPixelMapfv(gl13Context* glc, GLenum map, GLfloat* values);
void gl13GetPixelMapuiv(gl13Context* glc, GLenum map, GLuint* values);
void gl13GetPixelMapusv(gl13Context* glc, GLenum map, GLushort* values);
void gl13GetPolygonStipple(gl13Context* glc, GLubyte* pattern);
GLubyte* gl13GetString(gl13Context* glc, GLenum name);
void gl13GetTexEnvfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13GetTexEnviv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13GetTexGendv(gl13Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl13GetTexGenfv(gl13Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl13GetTexGeniv(gl13Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl13GetTexImage(gl13Context* glc, GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
void gl13GetTexLevelParameterfv(gl13Context* glc, GLenum target, GLint level, GLenum pname, GLfloat* params);
void gl13GetTexLevelParameteriv(gl13Context* glc, GLenum target, GLint level, GLenum pname, GLint* params);
void gl13GetTexParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13GetTexParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13Hint(gl13Context* glc, GLenum target, GLenum mode);
void gl13Indexd(gl13Context* glc, GLdouble c);
void gl13Indexf(gl13Context* glc, GLfloat c);
void gl13Indexi(gl13Context* glc, GLint c);
void gl13Indexs(gl13Context* glc, GLshort c);
void gl13Indexdv(gl13Context* glc, GLdouble* c);
void gl13Indexfv(gl13Context* glc, GLfloat* c);
void gl13Indexiv(gl13Context* glc, GLint* c);
void gl13Indexsv(gl13Context* glc, GLshort* c);
void gl13IndexMask(gl13Context* glc, GLuint mask);
void gl13IndexPointer(gl13Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl13InitNames(gl13Context* glc);
void gl13IsEnabled(gl13Context* glc, GLenum cap);
GLboolean gl13IsList(gl13Context* glc, GLuint list);
void gl13Lightf(gl13Context* glc, GLenum light, GLenum pname, GLfloat param);
void gl13Lighti(gl13Context* glc, GLenum light, GLenum pname, GLint param);
void gl13Lightfv(gl13Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl13Lightiv(gl13Context* glc, GLenum light, GLenum pname, GLint* params);
void gl13LightModelf(gl13Context* glc, GLenum pname, GLfloat param);
void gl13LightModeli(gl13Context* glc, GLenum pname, GLint param);
void gl13LightModelfv(gl13Context* glc, GLenum pname, GLfloat* params);
void gl13LightModeliv(gl13Context* glc, GLenum pname, GLint* params);
void gl13LineStipple(gl13Context* glc, GLint factor, GLushort pattern);
void gl13LineWidth(gl13Context* glc, GLfloat width);
void gl13ListBase(gl13Context* glc, GLuint base);
void gl13LoadIdentity(gl13Context* glc);
void gl13LoadMatrixd(gl13Context* glc, GLdouble* m);
void gl13LoadMatrixf(gl13Context* glc, GLfloat* m);
void gl13LoadName(gl13Context* glc, GLuint name);
void gl13LogicOp(gl13Context* glc, GLenum opcode);
void gl13Map1d(gl13Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
void gl13Map1f(gl13Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
void gl13Map2d(gl13Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
void gl13Map2f(gl13Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
void gl13MapGrid1d(gl13Context* glc, GLint un, GLdouble u1, GLdouble u2);
void gl13MapGrid1f(gl13Context* glc, GLint un, GLfloat u1, GLfloat u2);
void gl13MapGrid2d(gl13Context* glc, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void gl13MapGrid2f(gl13Context* glc, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void gl13Materialf(gl13Context* glc, GLenum face, GLenum pname, GLfloat param);
void gl13Materiali(gl13Context* glc, GLenum face, GLenum pname, GLint param);
void gl13Materialfv(gl13Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl13Materialiv(gl13Context* glc, GLenum face, GLenum pname, GLint* params);
void gl13MatrixMode(gl13Context* glc, GLenum mode);
void gl13MultMatrixd(gl13Context* glc, GLdouble* m);
void gl13MultMatrixf(gl13Context* glc, GLfloat* m);
void gl13NewList(gl13Context* glc, GLuint list, GLenum mode);
void gl13EndList(gl13Context* glc);
void gl13Normal3b(gl13Context* glc, GLbyte nx, GLbyte ny, GLbyte nz);
void gl13Normal3d(gl13Context* glc, GLdouble nx, GLdouble ny, GLdouble nz);
void gl13Normal3f(gl13Context* glc, GLfloat nx, GLfloat ny, GLfloat nz);
void gl13Normal3i(gl13Context* glc, GLint nx, GLint ny, GLint nz);
void gl13Normal3s(gl13Context* glc, GLshort nx, GLshort ny, GLshort nz);
void gl13Normal3bv(gl13Context* glc, GLbyte* v);
void gl13Normal3dv(gl13Context* glc, GLdouble* v);
void gl13Normal3fv(gl13Context* glc, GLfloat* v);
void gl13Normal3iv(gl13Context* glc, GLint* v);
void gl13Normal3sv(gl13Context* glc, GLshort* v);
void gl13Ortho(gl13Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zfar);
void gl13PassThrough(gl13Context* glc, GLfloat token);
void gl13PixelMapfv(gl13Context* glc, GLenum map, GLsizei mapsize, GLfloat* values);
void gl13PixelMapuiv(gl13Context* glc, GLenum map, GLsizei mapsize, GLuint* values);
void gl13PixelMapusv(gl13Context* glc, GLenum map, GLsizei mapsize, GLushort* values);
void gl13PixelStoref(gl13Context* glc, GLenum pname, GLfloat param);
void gl13PixelStorei(gl13Context* glc, GLenum pname, GLint param);
void gl13PixelTransferf(gl13Context* glc, GLenum pname, GLfloat param);
void gl13PixelTransferi(gl13Context* glc, GLenum pname, GLint param);
void gl13PixelZoom(gl13Context* glc, GLfloat xfactor, GLfloat yfactor);
void gl13PointSize(gl13Context* glc, GLfloat size);
void gl13PolygonMode(gl13Context* glc, GLenum face, GLenum mode);
void gl13PolygonStipple(gl13Context* glc, GLubyte* mask);
void gl13PushAttrib(gl13Context* glc, GLbitfield mask);
void gl13PopAttrib(gl13Context* glc);
void gl13PushMatrix(gl13Context* glc);
void gl13PopMatrix(gl13Context* glc);
void gl13PushName(gl13Context* glc, GLuint name);
void gl13PopName(gl13Context* glc);
void gl13RasterPos2d(gl13Context* glc, GLdouble x, GLdouble y);
void gl13RasterPos2f(gl13Context* glc, GLfloat x, GLfloat y);
void gl13RasterPos2i(gl13Context* glc, GLint x, GLint y);
void gl13RasterPos2s(gl13Context* glc, GLshort x, GLshort y);
void gl13RasterPos3d(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl13RasterPos3f(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl13RasterPos3i(gl13Context* glc, GLint x, GLint y, GLint z);
void gl13RasterPos3s(gl13Context* glc, GLshort x, GLshort y, GLshort z);
void gl13RasterPos4d(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl13RasterPos4f(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl13RasterPos4i(gl13Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl13RasterPos4s(gl13Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl13RasterPos2dv(gl13Context* glc, GLdouble* v);
void gl13RasterPos2fv(gl13Context* glc, GLfloat* v);
void gl13RasterPos2iv(gl13Context* glc, GLint* v);
void gl13RasterPos2sv(gl13Context* glc, GLshort* v);
void gl13RasterPos3dv(gl13Context* glc, GLdouble* v);
void gl13RasterPos3fv(gl13Context* glc, GLfloat* v);
void gl13RasterPos3iv(gl13Context* glc, GLint* v);
void gl13RasterPos3sv(gl13Context* glc, GLshort* v);
void gl13RasterPos4dv(gl13Context* glc, GLdouble* v);
void gl13RasterPos4fv(gl13Context* glc, GLfloat* v);
void gl13RasterPos4iv(gl13Context* glc, GLint* v);
void gl13RasterPos4sv(gl13Context* glc, GLshort* v);
void gl13ReadBuffer(gl13Context* glc, GLenum mode);
void gl13ReadPixels(gl13Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl13Rectd(gl13Context* glc, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void gl13Rectf(gl13Context* glc, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void gl13Recti(gl13Context* glc, GLint x1, GLint y1, GLint x2, GLint y2);
void gl13Rects(gl13Context* glc, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void gl13Rectdv(gl13Context* glc, GLdouble* v1, GLdouble* v2);
void gl13Rectfv(gl13Context* glc, GLfloat* v1, GLfloat* v2);
void gl13Rectiv(gl13Context* glc, GLint* v1, GLint* v2);
void gl13Rectsv(gl13Context* glc, GLshort* v1, GLshort* v2);
GLint gl13RenderMode(gl13Context* glc, GLenum mode);
void gl13Rotated(gl13Context* glc, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void gl13Rotatef(gl13Context* glc, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void gl13Scaled(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl13Scalef(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl13Scissor(gl13Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl13SelectBuffer(gl13Context* glc, GLsizei size, GLuint* buffer);
void gl13ShadeModel(gl13Context* glc, GLenum mode);
void gl13StencilFunc(gl13Context* glc, GLenum func, GLint ref, GLuint mask);
void gl13StencilMask(gl13Context* glc, GLuint mask);
void gl13StencilOp(gl13Context* glc, GLenum fail, GLenum zfail, GLenum zpass);
void gl13TexCoord1d(gl13Context* glc, GLdouble s);
void gl13TexCoord1f(gl13Context* glc, GLfloat s);
void gl13TexCoord1i(gl13Context* glc, GLint s);
void gl13TexCoord1s(gl13Context* glc, GLshort s);
void gl13TexCoord2d(gl13Context* glc, GLdouble s, GLdouble t);
void gl13TexCoord2f(gl13Context* glc, GLfloat s, GLfloat t);
void gl13TexCoord2i(gl13Context* glc, GLint s, GLint t);
void gl13TexCoord2s(gl13Context* glc, GLshort s, GLshort t);
void gl13TexCoord3d(gl13Context* glc, GLdouble s, GLdouble t, GLdouble r);
void gl13TexCoord3f(gl13Context* glc, GLfloat s, GLfloat t, GLfloat r);
void gl13TexCoord3i(gl13Context* glc, GLint s, GLint t, GLint r);
void gl13TexCoord3s(gl13Context* glc, GLshort s, GLshort t, GLshort r);
void gl13TexCoord4d(gl13Context* glc, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl13TexCoord4f(gl13Context* glc, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl13TexCoord4i(gl13Context* glc, GLint s, GLint t, GLint r, GLint q);
void gl13TexCoord4s(gl13Context* glc, GLshort s, GLshort t, GLshort r, GLshort q);
void gl13TexCoord1dv(gl13Context* glc, GLdouble* v);
void gl13TexCoord1fv(gl13Context* glc, GLfloat* v);
void gl13TexCoord1iv(gl13Context* glc, GLint* v);
void gl13TexCoord1sv(gl13Context* glc, GLshort* v);
void gl13TexCoord2dv(gl13Context* glc, GLdouble* v);
void gl13TexCoord2fv(gl13Context* glc, GLfloat* v);
void gl13TexCoord2iv(gl13Context* glc, GLint* v);
void gl13TexCoord2sv(gl13Context* glc, GLshort* v);
void gl13TexCoord3dv(gl13Context* glc, GLdouble* v);
void gl13TexCoord3fv(gl13Context* glc, GLfloat* v);
void gl13TexCoord3iv(gl13Context* glc, GLint* v);
void gl13TexCoord3sv(gl13Context* glc, GLshort* v);
void gl13TexCoord4dv(gl13Context* glc, GLdouble* v);
void gl13TexCoord4fv(gl13Context* glc, GLfloat* v);
void gl13TexCoord4iv(gl13Context* glc, GLint* v);
void gl13TexCoord4sv(gl13Context* glc, GLshort* v);
void gl13TexEnvf(gl13Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl13TexEnvi(gl13Context* glc, GLenum target, GLenum pname, GLint param);
void gl13TexEnvfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13TexEnviv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13TexGend(gl13Context* glc, GLenum coord, GLenum pname, GLdouble param);
void gl13TexGenf(gl13Context* glc, GLenum coord, GLenum pname, GLfloat param);
void gl13TexGeni(gl13Context* glc, GLenum coord, GLenum pname, GLint param);
void gl13TexGendv(gl13Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl13TexGenfv(gl13Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl13TexGeniv(gl13Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl13TexImage1D(gl13Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl13TexImage2D(gl13Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl13TexParameterf(gl13Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl13TexParameteri(gl13Context* glc, GLenum target, GLenum pname, GLint param);
void gl13TexParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13TexParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13Translated(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl13Translatef(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl13Vertex2s(gl13Context* glc, GLshort x, GLshort y);
void gl13Vertex2i(gl13Context* glc, GLint x, GLint y);
void gl13Vertex2f(gl13Context* glc, GLfloat x, GLfloat y);
void gl13Vertex2d(gl13Context* glc, GLdouble x, GLdouble y);
void gl13Vertex3s(gl13Context* glc, GLshort x, GLshort y, GLshort z);
void gl13Vertex3i(gl13Context* glc, GLint x, GLint y, GLint z);
void gl13Vertex3f(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl13Vertex3d(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl13Vertex4s(gl13Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl13Vertex4i(gl13Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl13Vertex4f(gl13Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl13Vertex4d(gl13Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl13Viewport(gl13Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl13GetColorTable(gl13Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* table);
void gl13GetColorTableParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13GetColorTableParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13GetConvolutionFilter(gl13Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* image);
void gl13GetConvolutionParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13GetConvolutionParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13GetHistogram(gl13Context* glc, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
void gl13GetHistogramParameterfv(gl13Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl13GetHistogramParameteriv(gl13Context* glc, GLenum target, GLenum pname, GLint* params);
void gl13GetSeparableFilter(gl13Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span);
void gl13Histogram(gl13Context* glc, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void gl13Minmax(gl13Context* glc, GLenum target, GLenum internalformat, GLboolean sink);
void gl13MultiTexCoord1s(gl13Context* glc, GLenum target, GLshort s);
void gl13MultiTexCoord1i(gl13Context* glc, GLenum target, GLint s);
void gl13MultiTexCoord1f(gl13Context* glc, GLenum target, GLfloat s);
void gl13MultiTexCoord1d(gl13Context* glc, GLenum target, GLdouble s);
void gl13MultiTexCoord2s(gl13Context* glc, GLenum target, GLshort s, GLshort t);
void gl13MultiTexCoord2i(gl13Context* glc, GLenum target, GLint s, GLint t);
void gl13MultiTexCoord2f(gl13Context* glc, GLenum target, GLfloat s, GLfloat t);
void gl13MultiTexCoord2d(gl13Context* glc, GLenum target, GLdouble s, GLdouble t);
void gl13MultiTexCoord3s(gl13Context* glc, GLenum target, GLshort s, GLshort t, GLshort r);
void gl13MultiTexCoord3i(gl13Context* glc, GLenum target, GLint s, GLint t, GLint r);
void gl13MultiTexCoord3f(gl13Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r);
void gl13MultiTexCoord3d(gl13Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r);
void gl13MultiTexCoord4s(gl13Context* glc, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void gl13MultiTexCoord4i(gl13Context* glc, GLenum target, GLint s, GLint t, GLint r, GLint q);
void gl13MultiTexCoord4f(gl13Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl13MultiTexCoord4d(gl13Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl13MultiTexCoord1sv(gl13Context* glc, GLenum target, GLshort* v);
void gl13MultiTexCoord1iv(gl13Context* glc, GLenum target, GLint* v);
void gl13MultiTexCoord1fv(gl13Context* glc, GLenum target, GLfloat* v);
void gl13MultiTexCoord1dv(gl13Context* glc, GLenum target, GLdouble* v);
void gl13MultiTexCoord2sv(gl13Context* glc, GLenum target, GLshort* v);
void gl13MultiTexCoord2iv(gl13Context* glc, GLenum target, GLint* v);
void gl13MultiTexCoord2fv(gl13Context* glc, GLenum target, GLfloat* v);
void gl13MultiTexCoord2dv(gl13Context* glc, GLenum target, GLdouble* v);
void gl13MultiTexCoord3sv(gl13Context* glc, GLenum target, GLshort* v);
void gl13MultiTexCoord3iv(gl13Context* glc, GLenum target, GLint* v);
void gl13MultiTexCoord3fv(gl13Context* glc, GLenum target, GLfloat* v);
void gl13MultiTexCoord3dv(gl13Context* glc, GLenum target, GLdouble* v);
void gl13MultiTexCoord4sv(gl13Context* glc, GLenum target, GLshort* v);
void gl13MultiTexCoord4iv(gl13Context* glc, GLenum target, GLint* v);
void gl13MultiTexCoord4fv(gl13Context* glc, GLenum target, GLfloat* v);
void gl13MultiTexCoord4dv(gl13Context* glc, GLenum target, GLdouble* v);
void gl13ResetHistogram(gl13Context* glc, GLenum target);
void gl13ResetMinmax(gl13Context* glc, GLenum target);
void gl13SeparableFilter2D(gl13Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* row, GLvoid* column);
GLboolean gl13AreTexturesResident(gl13Context* glc, GLsizei n, GLuint* textures, GLboolean* residences);
void gl13ArrayElement(gl13Context* glc, GLint i);
void gl13DrawArrays(gl13Context* glc, GLenum mode, GLint first, GLsizei count);
void gl13DrawElements(gl13Context* glc, GLenum mode, GLsizei count, GLenum type, GLvoid* indices);
void gl13GetPointerv(gl13Context* glc, GLenum pname, GLvoid* params);
void gl13PolygonOffset(gl13Context* glc, GLfloat factor, GLfloat units);
void gl13CopyTexImage1D(gl13Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void gl13CopyTexImage2D(gl13Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void gl13CopyTexSubImage1D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void gl13CopyTexSubImage2D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl13BindTexture(gl13Context* glc, GLenum target, GLuint texture);
void gl13DeleteTextures(gl13Context* glc, GLsizei n, GLuint* textures);
void gl13GenTextures(gl13Context* glc, GLsizei n, GLuint* textures);
GLboolean gl13IsTexture(gl13Context* glc, GLuint texture);
void gl13ColorPointer(gl13Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl13EnableClientState(gl13Context* glc, GLenum cap);
void gl13DisableClientState(gl13Context* glc, GLenum cap);
void gl13Indexub(gl13Context* glc, GLubyte c);
void gl13Indexubv(gl13Context* glc, GLubyte* c);
void gl13InterleavedArrays(gl13Context* glc, GLenum format, GLsizei stride, GLvoid* pointer);
void gl13NormalPointer(gl13Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl13PushClientAttrib(gl13Context* glc, GLbitfield mask);
void gl13PrioritizeTextures(gl13Context* glc, GLsizei n, GLuint* textures, GLclampf* priorities);
void gl13PopClientAttrib(gl13Context* glc);
void gl13TexCoordPointer(gl13Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl13TexSubImage1D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid* pixels);
void gl13TexSubImage2D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl13VertexPointer(gl13Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl13BlendColor(gl13Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl13BlendEquation(gl13Context* glc, GLenum mode);
void gl13CopyTexSubImage3D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl13DrawRangeElements(gl13Context* glc, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid* indices);
void gl13TexImage3D(gl13Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl13TexSubImage3D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* pixels);
void gl13ActiveTexture(gl13Context* glc, GLenum texture);
void gl13ClientActiveTexture(gl13Context* glc, GLenum texture);
void gl13CompressedTexImage1D(gl13Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid* data);
void gl13CompressedTexImage2D(gl13Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid* data);
void gl13CompressedTexImage3D(gl13Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid* data);
void gl13CompressedTexSubImage1D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid* data);
void gl13CompressedTexSubImage2D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid* data);
void gl13CompressedTexSubImage3D(gl13Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid* data);
void gl13GetCompressedTexImage(gl13Context* glc, GLenum target, GLint lod, GLvoid* img);
void gl13LoadTransposeMatrixd(gl13Context* glc, GLdouble* m);
void gl13LoadTransposeMatrixf(gl13Context* glc, GLdouble* m);
void gl13MultTransposeMatrixd(gl13Context* glc, GLdouble* m);
void gl13MultTransposeMatrixf(gl13Context* glc, GLfloat* m);
void gl13SampleCoverage(gl13Context* glc, GLclampf value, GLboolean invert);
