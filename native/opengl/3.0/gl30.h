// Copyright 2012 Lightpoke. All rights reserved.
// This source code is subject to the terms and
// conditions defined in the "License.txt" file.

#include <stdbool.h>
#include <stdlib.h>

typedef char GLchar;
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;

typedef void(*gl30PAccum)(GLenum, GLfloat);
typedef void(*gl30PAlphaFunc)(GLenum, GLclampf);
typedef void(*gl30PBegin)(GLenum);
typedef void(*gl30PEnd)();
typedef void(*gl30PBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, GLubyte*);
typedef void(*gl30PBlendFunc)(GLenum, GLenum);
typedef void(*gl30PCallList)(GLuint);
typedef void(*gl30PCallLists)(GLsizei, GLenum, GLvoid*);
typedef void(*gl30PClear)(GLbitfield);
typedef void(*gl30PClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PClearColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl30PClearDepth)(GLclampd);
typedef void(*gl30PClearIndex)(GLfloat);
typedef void(*gl30PClearStencil)(GLint);
typedef void(*gl30PClipPlane)(GLenum, GLdouble*);
typedef void(*gl30PColor3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl30PColor3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PColor3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PColor3i)(GLint, GLint, GLint);
typedef void(*gl30PColor3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PColor3ub)(GLubyte, GLubyte, GLubyte);
typedef void(*gl30PColor3ui)(GLuint, GLuint, GLuint);
typedef void(*gl30PColor3us)(GLushort, GLushort, GLushort);
typedef void(*gl30PColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
typedef void(*gl30PColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PColor4i)(GLint, GLint, GLint, GLint);
typedef void(*gl30PColor4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
typedef void(*gl30PColor4ui)(GLuint, GLuint, GLuint, GLuint);
typedef void(*gl30PColor4us)(GLushort, GLushort, GLushort, GLushort);
typedef void(*gl30PColor3bv)(GLbyte*);
typedef void(*gl30PColor3dv)(GLdouble*);
typedef void(*gl30PColor3fv)(GLfloat*);
typedef void(*gl30PColor3iv)(GLint*);
typedef void(*gl30PColor3sv)(GLshort*);
typedef void(*gl30PColor3ubv)(GLubyte*);
typedef void(*gl30PColor3uiv)(GLuint*);
typedef void(*gl30PColor3usv)(GLushort*);
typedef void(*gl30PColor4bv)(GLbyte*);
typedef void(*gl30PColor4dv)(GLdouble*);
typedef void(*gl30PColor4fv)(GLfloat*);
typedef void(*gl30PColor4iv)(GLint*);
typedef void(*gl30PColor4sv)(GLshort*);
typedef void(*gl30PColor4ubv)(GLubyte*);
typedef void(*gl30PColor4uiv)(GLuint*);
typedef void(*gl30PColor4usv)(GLushort*);
typedef void(*gl30PColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
typedef void(*gl30PColorMaterial)(GLenum, GLenum);
typedef void(*gl30PCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
typedef void(*gl30PCullFace)(GLenum);
typedef void(*gl30PDeleteLists)(GLuint, GLsizei);
typedef void(*gl30PDepthFunc)(GLenum);
typedef void(*gl30PDepthMask)(GLboolean);
typedef void(*gl30PDepthRange)(GLclampd, GLclampd);
typedef void(*gl30PEnable)(GLenum);
typedef void(*gl30PDisable)(GLenum);
typedef void(*gl30PDrawBuffer)(GLenum);
typedef void(*gl30PDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PEdgeFlag)(GLboolean);
typedef void(*gl30PEdgeFlagv)(GLboolean*);
typedef void(*gl30PEdgeFlagPointer)(GLsizei, GLvoid*);
typedef void(*gl30PEvalCoord1d)(GLdouble);
typedef void(*gl30PEvalCoord1f)(GLfloat);
typedef void(*gl30PEvalCoord2d)(GLdouble, GLdouble);
typedef void(*gl30PEvalCoord2f)(GLfloat, GLfloat);
typedef void(*gl30PEvalCoord1dv)(GLdouble*);
typedef void(*gl30PEvalCoord1fv)(GLfloat*);
typedef void(*gl30PEvalCoord2dv)(GLdouble*);
typedef void(*gl30PEvalCoord2fv)(GLfloat*);
typedef void(*gl30PEvalMesh1)(GLenum, GLint, GLint);
typedef void(*gl30PEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl30PEvalPoint1)(GLint);
typedef void(*gl30PEvalPoint2)(GLint, GLint);
typedef void(*gl30PFeedbackBuffer)(GLsizei, GLenum, GLfloat*);
typedef void(*gl30PFinish)();
typedef void(*gl30PFlush)();
typedef void(*gl30PFogf)(GLenum, GLfloat);
typedef void(*gl30PFogi)(GLenum, GLint);
typedef void(*gl30PFogfv)(GLenum, GLfloat*);
typedef void(*gl30PFogiv)(GLenum, GLint*);
typedef void(*gl30PFrontFace)(GLenum);
typedef void(*gl30PFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef GLuint(*gl30PGenLists)(GLsizei);
typedef void(*gl30PGetBooleanv)(GLenum, GLboolean*);
typedef void(*gl30PGetDoublev)(GLenum, GLdouble*);
typedef void(*gl30PGetFloatv)(GLenum, GLfloat*);
typedef void(*gl30PGetIntegerv)(GLenum, GLint*);
typedef void(*gl30PGetClipPlane)(GLenum, GLdouble*);
typedef GLenum(*gl30PGetError)();
typedef void(*gl30PGetLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetMapdv)(GLenum, GLenum, GLdouble*);
typedef void(*gl30PGetMapfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetMapiv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetPixelMapfv)(GLenum, GLfloat*);
typedef void(*gl30PGetPixelMapuiv)(GLenum, GLuint*);
typedef void(*gl30PGetPixelMapusv)(GLenum, GLushort*);
typedef void(*gl30PGetPolygonStipple)(GLubyte*);
typedef GLubyte*(*gl30PGetString)(GLenum);
typedef void(*gl30PGetTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl30PGetTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetTexImage)(GLenum, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl30PGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat*);
typedef void(*gl30PGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint*);
typedef void(*gl30PGetTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PHint)(GLenum, GLenum);
typedef void(*gl30PIndexd)(GLdouble);
typedef void(*gl30PIndexf)(GLfloat);
typedef void(*gl30PIndexi)(GLint);
typedef void(*gl30PIndexs)(GLshort);
typedef void(*gl30PIndexdv)(GLdouble*);
typedef void(*gl30PIndexfv)(GLfloat*);
typedef void(*gl30PIndexiv)(GLint*);
typedef void(*gl30PIndexsv)(GLshort*);
typedef void(*gl30PIndexMask)(GLuint);
typedef void(*gl30PIndexPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl30PInitNames)();
typedef void(*gl30PIsEnabled)(GLenum);
typedef GLboolean(*gl30PIsList)(GLuint);
typedef void(*gl30PLightf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PLighti)(GLenum, GLenum, GLint);
typedef void(*gl30PLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl30PLightModelf)(GLenum, GLfloat);
typedef void(*gl30PLightModeli)(GLenum, GLint);
typedef void(*gl30PLightModelfv)(GLenum, GLfloat*);
typedef void(*gl30PLightModeliv)(GLenum, GLint*);
typedef void(*gl30PLineStipple)(GLint, GLushort);
typedef void(*gl30PLineWidth)(GLfloat);
typedef void(*gl30PListBase)(GLuint);
typedef void(*gl30PLoadIdentity)();
typedef void(*gl30PLoadMatrixd)(GLdouble*);
typedef void(*gl30PLoadMatrixf)(GLfloat*);
typedef void(*gl30PLoadName)(GLuint);
typedef void(*gl30PLogicOp)(GLenum);
typedef void(*gl30PMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl30PMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl30PMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl30PMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl30PMapGrid1d)(GLint, GLdouble, GLdouble);
typedef void(*gl30PMapGrid1f)(GLint, GLfloat, GLfloat);
typedef void(*gl30PMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
typedef void(*gl30PMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
typedef void(*gl30PMaterialf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PMateriali)(GLenum, GLenum, GLint);
typedef void(*gl30PMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl30PMatrixMode)(GLenum);
typedef void(*gl30PMultMatrixd)(GLdouble*);
typedef void(*gl30PMultMatrixf)(GLfloat*);
typedef void(*gl30PNewList)(GLuint, GLenum);
typedef void(*gl30PEndList)();
typedef void(*gl30PNormal3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl30PNormal3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PNormal3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PNormal3i)(GLint, GLint, GLint);
typedef void(*gl30PNormal3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PNormal3bv)(GLbyte*);
typedef void(*gl30PNormal3dv)(GLdouble*);
typedef void(*gl30PNormal3fv)(GLfloat*);
typedef void(*gl30PNormal3iv)(GLint*);
typedef void(*gl30PNormal3sv)(GLshort*);
typedef void(*gl30POrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PPassThrough)(GLfloat);
typedef void(*gl30PPixelMapfv)(GLenum, GLsizei, GLfloat*);
typedef void(*gl30PPixelMapuiv)(GLenum, GLsizei, GLuint*);
typedef void(*gl30PPixelMapusv)(GLenum, GLsizei, GLushort*);
typedef void(*gl30PPixelStoref)(GLenum, GLfloat);
typedef void(*gl30PPixelStorei)(GLenum, GLint);
typedef void(*gl30PPixelTransferf)(GLenum, GLfloat);
typedef void(*gl30PPixelTransferi)(GLenum, GLint);
typedef void(*gl30PPixelZoom)(GLfloat, GLfloat);
typedef void(*gl30PPointSize)(GLfloat);
typedef void(*gl30PPolygonMode)(GLenum, GLenum);
typedef void(*gl30PPolygonStipple)(GLubyte*);
typedef void(*gl30PPushAttrib)(GLbitfield);
typedef void(*gl30PPopAttrib)();
typedef void(*gl30PPushMatrix)();
typedef void(*gl30PPopMatrix)();
typedef void(*gl30PPushName)(GLuint);
typedef void(*gl30PPopName)();
typedef void(*gl30PRasterPos2d)(GLdouble, GLdouble);
typedef void(*gl30PRasterPos2f)(GLfloat, GLfloat);
typedef void(*gl30PRasterPos2i)(GLint, GLint);
typedef void(*gl30PRasterPos2s)(GLshort, GLshort);
typedef void(*gl30PRasterPos3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PRasterPos3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PRasterPos3i)(GLint, GLint, GLint);
typedef void(*gl30PRasterPos3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PRasterPos4i)(GLint, GLint, GLint, GLint);
typedef void(*gl30PRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PRasterPos2dv)(GLdouble*);
typedef void(*gl30PRasterPos2fv)(GLfloat*);
typedef void(*gl30PRasterPos2iv)(GLint*);
typedef void(*gl30PRasterPos2sv)(GLshort*);
typedef void(*gl30PRasterPos3dv)(GLdouble*);
typedef void(*gl30PRasterPos3fv)(GLfloat*);
typedef void(*gl30PRasterPos3iv)(GLint*);
typedef void(*gl30PRasterPos3sv)(GLshort*);
typedef void(*gl30PRasterPos4dv)(GLdouble*);
typedef void(*gl30PRasterPos4fv)(GLfloat*);
typedef void(*gl30PRasterPos4iv)(GLint*);
typedef void(*gl30PRasterPos4sv)(GLshort*);
typedef void(*gl30PReadBuffer)(GLenum);
typedef void(*gl30PReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PRecti)(GLint, GLint, GLint, GLint);
typedef void(*gl30PRects)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PRectdv)(GLdouble*, GLdouble*);
typedef void(*gl30PRectfv)(GLfloat*, GLfloat*);
typedef void(*gl30PRectiv)(GLint*, GLint*);
typedef void(*gl30PRectsv)(GLshort*, GLshort*);
typedef GLint(*gl30PRenderMode)(GLenum);
typedef void(*gl30PRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PScaled)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PScalef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PScissor)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl30PSelectBuffer)(GLsizei, GLuint*);
typedef void(*gl30PShadeModel)(GLenum);
typedef void(*gl30PStencilFunc)(GLenum, GLint, GLuint);
typedef void(*gl30PStencilMask)(GLuint);
typedef void(*gl30PStencilOp)(GLenum, GLenum, GLenum);
typedef void(*gl30PTexCoord1d)(GLdouble);
typedef void(*gl30PTexCoord1f)(GLfloat);
typedef void(*gl30PTexCoord1i)(GLint);
typedef void(*gl30PTexCoord1s)(GLshort);
typedef void(*gl30PTexCoord2d)(GLdouble, GLdouble);
typedef void(*gl30PTexCoord2f)(GLfloat, GLfloat);
typedef void(*gl30PTexCoord2i)(GLint, GLint);
typedef void(*gl30PTexCoord2s)(GLshort, GLshort);
typedef void(*gl30PTexCoord3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PTexCoord3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PTexCoord3i)(GLint, GLint, GLint);
typedef void(*gl30PTexCoord3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PTexCoord4i)(GLint, GLint, GLint, GLint);
typedef void(*gl30PTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PTexCoord1dv)(GLdouble*);
typedef void(*gl30PTexCoord1fv)(GLfloat*);
typedef void(*gl30PTexCoord1iv)(GLint*);
typedef void(*gl30PTexCoord1sv)(GLshort*);
typedef void(*gl30PTexCoord2dv)(GLdouble*);
typedef void(*gl30PTexCoord2fv)(GLfloat*);
typedef void(*gl30PTexCoord2iv)(GLint*);
typedef void(*gl30PTexCoord2sv)(GLshort*);
typedef void(*gl30PTexCoord3dv)(GLdouble*);
typedef void(*gl30PTexCoord3fv)(GLfloat*);
typedef void(*gl30PTexCoord3iv)(GLint*);
typedef void(*gl30PTexCoord3sv)(GLshort*);
typedef void(*gl30PTexCoord4dv)(GLdouble*);
typedef void(*gl30PTexCoord4fv)(GLfloat*);
typedef void(*gl30PTexCoord4iv)(GLint*);
typedef void(*gl30PTexCoord4sv)(GLshort*);
typedef void(*gl30PTexEnvf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PTexEnvi)(GLenum, GLenum, GLint);
typedef void(*gl30PTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl30PTexGend)(GLenum, GLenum, GLdouble);
typedef void(*gl30PTexGenf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PTexGeni)(GLenum, GLenum, GLint);
typedef void(*gl30PTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl30PTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl30PTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl30PTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl30PTexParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PTexParameteri)(GLenum, GLenum, GLint);
typedef void(*gl30PTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PTranslated)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PTranslatef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PVertex2s)(GLshort, GLshort);
typedef void(*gl30PVertex2i)(GLint, GLint);
typedef void(*gl30PVertex2f)(GLfloat, GLfloat);
typedef void(*gl30PVertex2d)(GLdouble, GLdouble);
typedef void(*gl30PVertex3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PVertex3i)(GLint, GLint, GLint);
typedef void(*gl30PVertex3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PVertex3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PVertex4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PVertex4i)(GLint, GLint, GLint, GLint);
typedef void(*gl30PVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PViewport)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl30PGetConvolutionParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetConvolutionParameteriv)(GLenum, GLenum, GLint*);
typedef GLboolean(*gl30PAreTexturesResident)(GLsizei, GLuint*, GLboolean*);
typedef void(*gl30PArrayElement)(GLint);
typedef void(*gl30PDrawArrays)(GLenum, GLint, GLsizei);
typedef void(*gl30PDrawElements)(GLenum, GLsizei, GLenum, GLvoid*);
typedef void(*gl30PGetPointerv)(GLenum, GLvoid*);
typedef void(*gl30PPolygonOffset)(GLfloat, GLfloat);
typedef void(*gl30PCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
typedef void(*gl30PCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
typedef void(*gl30PCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
typedef void(*gl30PCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl30PBindTexture)(GLenum, GLuint);
typedef void(*gl30PDeleteTextures)(GLsizei, GLuint*);
typedef void(*gl30PGenTextures)(GLsizei, GLuint*);
typedef GLboolean(*gl30PIsTexture)(GLuint);
typedef void(*gl30PColorPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PEnableClientState)(GLenum);
typedef void(*gl30PDisableClientState)(GLenum);
typedef void(*gl30PIndexub)(GLubyte);
typedef void(*gl30PIndexubv)(GLubyte*);
typedef void(*gl30PInterleavedArrays)(GLenum, GLsizei, GLvoid*);
typedef void(*gl30PNormalPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl30PPushClientAttrib)(GLbitfield);
typedef void(*gl30PPrioritizeTextures)(GLsizei, GLuint*, GLclampf*);
typedef void(*gl30PPopClientAttrib)();
typedef void(*gl30PTexCoordPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PVertexPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PConvolutionParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl30PConvolutionParameteri)(GLenum, GLenum, GLint);
typedef void(*gl30PCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl30PCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
typedef void(*gl30PCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl30PCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl30PGetColorTable)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl30PGetColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetConvolutionFilter)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl30PGetHistogram)(GLenum, GLboolean, GLenum, GLenum, GLvoid*);
typedef void(*gl30PGetHistogramParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl30PGetHistogramParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetSeparableFilter)(GLenum, GLenum, GLenum, GLvoid*, GLvoid*, GLvoid*);
typedef void(*gl30PHistogram)(GLenum, GLsizei, GLenum, GLboolean);
typedef void(*gl30PMinmax)(GLenum, GLenum, GLboolean);
typedef void(*gl30PMultiTexCoord1s)(GLenum, GLshort);
typedef void(*gl30PMultiTexCoord1i)(GLenum, GLint);
typedef void(*gl30PMultiTexCoord1f)(GLenum, GLfloat);
typedef void(*gl30PMultiTexCoord1d)(GLenum, GLdouble);
typedef void(*gl30PMultiTexCoord2s)(GLenum, GLshort, GLshort);
typedef void(*gl30PMultiTexCoord2i)(GLenum, GLint, GLint);
typedef void(*gl30PMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
typedef void(*gl30PMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
typedef void(*gl30PMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
typedef void(*gl30PMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
typedef void(*gl30PMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl30PMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PMultiTexCoord1sv)(GLenum, GLshort*);
typedef void(*gl30PMultiTexCoord1iv)(GLenum, GLint*);
typedef void(*gl30PMultiTexCoord1fv)(GLenum, GLfloat*);
typedef void(*gl30PMultiTexCoord1dv)(GLenum, GLdouble*);
typedef void(*gl30PMultiTexCoord2sv)(GLenum, GLshort*);
typedef void(*gl30PMultiTexCoord2iv)(GLenum, GLint*);
typedef void(*gl30PMultiTexCoord2fv)(GLenum, GLfloat*);
typedef void(*gl30PMultiTexCoord2dv)(GLenum, GLdouble*);
typedef void(*gl30PMultiTexCoord3sv)(GLenum, GLshort*);
typedef void(*gl30PMultiTexCoord3iv)(GLenum, GLint*);
typedef void(*gl30PMultiTexCoord3fv)(GLenum, GLfloat*);
typedef void(*gl30PMultiTexCoord3dv)(GLenum, GLdouble*);
typedef void(*gl30PMultiTexCoord4sv)(GLenum, GLshort*);
typedef void(*gl30PMultiTexCoord4iv)(GLenum, GLint*);
typedef void(*gl30PMultiTexCoord4fv)(GLenum, GLfloat*);
typedef void(*gl30PMultiTexCoord4dv)(GLenum, GLdouble*);
typedef void(*gl30PResetHistogram)(GLenum);
typedef void(*gl30PResetMinmax)(GLenum);
typedef void(*gl30PSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*, GLvoid*);
typedef void(*gl30PBlendColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl30PBlendEquation)(GLenum);
typedef void(*gl30PCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl30PDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, GLvoid*);
typedef void(*gl30PTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl30PTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl30PActiveTexture)(GLenum);
typedef void(*gl30PClientActiveTexture)(GLenum);
typedef void(*gl30PCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl30PCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl30PCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl30PCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PGetCompressedTexImage)(GLenum, GLint, GLvoid*);
typedef void(*gl30PLoadTransposeMatrixd)(GLdouble*);
typedef void(*gl30PLoadTransposeMatrixf)(GLdouble*);
typedef void(*gl30PMultTransposeMatrixd)(GLdouble*);
typedef void(*gl30PMultTransposeMatrixf)(GLfloat*);
typedef void(*gl30PSampleCoverage)(GLclampf, GLboolean);
typedef void(*gl30PBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
typedef void(*gl30PFogCoordPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl30PFogCoordd)(GLdouble);
typedef void(*gl30PFogCoordf)(GLfloat);
typedef void(*gl30PFogCoorddv)(GLdouble*);
typedef void(*gl30PFogCoordfv)(GLfloat*);
typedef void(*gl30PMultiDrawArrays)(GLenum, GLint*, GLsizei*, GLsizei);
typedef void(*gl30PMultiDrawElements)(GLenum, GLsizei*, GLenum, GLvoid*, GLsizei);
typedef void(*gl30PPointParameterf)(GLenum, GLfloat);
typedef void(*gl30PPointParameteri)(GLenum, GLint);
typedef void(*gl30PSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl30PSecondaryColor3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PSecondaryColor3i)(GLint, GLint, GLint);
typedef void(*gl30PSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
typedef void(*gl30PSecondaryColor3us)(GLushort, GLushort, GLushort);
typedef void(*gl30PSecondaryColor3ui)(GLuint, GLuint, GLuint);
typedef void(*gl30PSecondaryColor3bv)(GLbyte*);
typedef void(*gl30PSecondaryColor3sv)(GLshort*);
typedef void(*gl30PSecondaryColor3iv)(GLint*);
typedef void(*gl30PSecondaryColor3fv)(GLfloat*);
typedef void(*gl30PSecondaryColor3dv)(GLdouble*);
typedef void(*gl30PSecondaryColor3ubv)(GLubyte*);
typedef void(*gl30PSecondaryColor3usv)(GLushort*);
typedef void(*gl30PSecondaryColor3uiv)(GLuint*);
typedef void(*gl30PSecondaryColorPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl30PWindowPos2s)(GLshort, GLshort);
typedef void(*gl30PWindowPos2i)(GLint, GLint);
typedef void(*gl30PWindowPos2f)(GLfloat, GLfloat);
typedef void(*gl30PWindowPos2d)(GLdouble, GLdouble);
typedef void(*gl30PWindowPos3s)(GLshort, GLshort, GLshort);
typedef void(*gl30PWindowPos3i)(GLint, GLint, GLint);
typedef void(*gl30PWindowPos3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl30PWindowPos3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl30PWindowPos2sv)(GLshort*);
typedef void(*gl30PWindowPos2iv)(GLint*);
typedef void(*gl30PWindowPos2fv)(GLfloat*);
typedef void(*gl30PWindowPos2dv)(GLdouble*);
typedef void(*gl30PWindowPos3sv)(GLshort*);
typedef void(*gl30PWindowPos3iv)(GLint*);
typedef void(*gl30PWindowPos3fv)(GLfloat*);
typedef void(*gl30PWindowPos3dv)(GLdouble*);
typedef void(*gl30PBeginQuery)(GLenum, GLuint);
typedef void(*gl30PBindBuffer)(GLenum, GLuint);
typedef void(*gl30PBufferData)(GLenum, GLsizeiptr, GLvoid*, GLenum);
typedef void(*gl30PBufferSubData)(GLenum, GLenum, GLsizeiptr, GLvoid*);
typedef void(*gl30PDeleteBuffers)(GLsizei, GLuint*);
typedef void(*gl30PDeleteQueries)(GLsizei, GLuint*);
typedef void(*gl30PGenBuffers)(GLsizei, GLuint*);
typedef void(*gl30PGenQueries)(GLsizei, GLuint*);
typedef void(*gl30PGetBufferParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl30PGetBufferPointerv)(GLenum, GLenum, GLvoid*);
typedef void(*gl30PGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, GLvoid*);
typedef void(*gl30PGetQueryObjectiv)(GLuint, GLenum, GLint*);
typedef void(*gl30PGetQueryObjectuiv)(GLuint, GLenum, GLuint*);
typedef void(*gl30PGetQueryiv)(GLenum, GLenum, GLint*);
typedef GLboolean(*gl30PIsBuffer)(GLuint);
typedef GLboolean(*gl30PIsQuery)(GLuint);
typedef GLvoid*(*gl30PMapBuffer)(GLenum, GLenum);
typedef GLboolean(*gl30PUnmapBuffer)(GLenum);
typedef void(*gl30PAttachShader)(GLuint, GLuint);
typedef void(*gl30PBindAttribLocation)(GLuint, GLuint, GLchar*);
typedef void(*gl30PBlendEquationSeperate)(GLenum, GLenum);
typedef void(*gl30PCompileShader)(GLuint);
typedef GLuint(*gl30PCreateProgram)();
typedef GLuint(*gl30PCreateShader)(GLenum);
typedef void(*gl30PDeleteProgram)(GLuint);
typedef void(*gl30PDeleteShader)(GLuint);
typedef void(*gl30PDetachShader)(GLuint, GLuint);
typedef void(*gl30PEnableVertexAttribArray)(GLuint);
typedef void(*gl30PDisableVertexAttribArray)(GLuint);
typedef void(*gl30PDrawBuffers)(GLsizei, GLenum*);
typedef void(*gl30PGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
typedef void(*gl30PGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
typedef void(*gl30PGetAttachedShaders)(GLuint, GLsizei, GLsizei*, GLuint*);
typedef GLint(*gl30PGetAttribLocation)(GLuint, GLchar*);
typedef void(*gl30PGetProgramiv)(GLuint, GLenum, GLint*);
typedef void(*gl30PGetProgramInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl30PGetShaderiv)(GLuint, GLenum, GLint*);
typedef void(*gl30PGetShaderInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl30PGetShaderSource)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl30PGetUniformfv)(GLuint, GLint, GLfloat*);
typedef void(*gl30PGetUniformiv)(GLuint, GLint, GLint*);
typedef GLint(*gl30PGetUniformLocation)(GLuint, GLchar*);
typedef void(*gl30PGetVertexAttribdv)(GLuint, GLenum, GLdouble*);
typedef void(*gl30PGetVertexAttribfv)(GLuint, GLenum, GLfloat*);
typedef void(*gl30PGetVertexAttribiv)(GLuint, GLenum, GLint*);
typedef void(*gl30PGetVertexAttribPointerv)(GLuint, GLenum, GLvoid*);
typedef GLboolean(*gl30PIsProgram)(GLuint);
typedef GLboolean(*gl30PIsShader)(GLuint);
typedef void(*gl30PLinkProgram)(GLuint);
typedef void(*gl30PShaderSource)(GLuint, GLsizei, GLchar**, GLint*);
typedef void(*gl30PStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
typedef void(*gl30PStencilMaskSeparate)(GLenum, GLuint);
typedef void(*gl30PStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
typedef void(*gl30PUniform1f)(GLint, GLfloat);
typedef void(*gl30PUniform2f)(GLint, GLfloat, GLfloat);
typedef void(*gl30PUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PUniform1i)(GLint, GLint);
typedef void(*gl30PUniform2i)(GLint, GLint, GLint);
typedef void(*gl30PUniform3i)(GLint, GLint, GLint, GLint);
typedef void(*gl30PUniform4i)(GLint, GLint, GLint, GLint, GLint);
typedef void(*gl30PUniform1ui)(GLint, GLuint);
typedef void(*gl30PUniform2ui)(GLint, GLuint, GLuint);
typedef void(*gl30PUniform3ui)(GLint, GLuint, GLuint, GLuint);
typedef void(*gl30PUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
typedef void(*gl30PUniform1fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl30PUniform2fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl30PUniform3fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl30PUniform4fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl30PUniform1iv)(GLint, GLsizei, GLint*);
typedef void(*gl30PUniform2iv)(GLint, GLsizei, GLint*);
typedef void(*gl30PUniform3iv)(GLint, GLsizei, GLint*);
typedef void(*gl30PUniform4iv)(GLint, GLsizei, GLint*);
typedef void(*gl30PUniform1uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl30PUniform2uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl30PUniform3uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl30PUniform4uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl30PUseProgram)(GLuint);
typedef void(*gl30PValidateProgram)(GLuint);
typedef void(*gl30PVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLvoid*);
typedef void(*gl30PVertexAttrib1f)(GLuint, GLfloat);
typedef void(*gl30PVertexAttrib1s)(GLuint, GLshort);
typedef void(*gl30PVertexAttrib1d)(GLuint, GLdouble);
typedef void(*gl30PVertexAttrib2f)(GLuint, GLfloat, GLfloat);
typedef void(*gl30PVertexAttrib2s)(GLuint, GLshort, GLshort);
typedef void(*gl30PVertexAttrib2d)(GLuint, GLdouble, GLdouble);
typedef void(*gl30PVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
typedef void(*gl30PVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl30PVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
typedef void(*gl30PVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl30PVertexAttrib4Nuv)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
typedef void(*gl30PVertexAttrib1fv)(GLuint, GLfloat*);
typedef void(*gl30PVertexAttrib1sv)(GLuint, GLshort*);
typedef void(*gl30PVertexAttrib1dv)(GLuint, GLdouble*);
typedef void(*gl30PVertexAttrib2fv)(GLuint, GLfloat*);
typedef void(*gl30PVertexAttrib2sv)(GLuint, GLshort*);
typedef void(*gl30PVertexAttrib2dv)(GLuint, GLdouble*);
typedef void(*gl30PVertexAttrib3fv)(GLuint, GLfloat*);
typedef void(*gl30PVertexAttrib3sv)(GLuint, GLshort*);
typedef void(*gl30PVertexAttrib3dv)(GLuint, GLdouble*);
typedef void(*gl30PVertexAttrib4fv)(GLuint, GLfloat*);
typedef void(*gl30PVertexAttrib4sv)(GLuint, GLshort*);
typedef void(*gl30PVertexAttrib4dv)(GLuint, GLdouble*);
typedef void(*gl30PVertexAttrib4iv)(GLuint, GLint*);
typedef void(*gl30PVertexAttrib4bv)(GLuint, GLbyte*);
typedef void(*gl30PVertexAttrib4ubv)(GLuint, GLubyte*);
typedef void(*gl30PVertexAttrib4usv)(GLuint, GLushort*);
typedef void(*gl30PVertexAttrib4uiv)(GLuint, GLuint*);
typedef void(*gl30PVertexAttrib4Nbv)(GLuint, GLbyte*);
typedef void(*gl30PVertexAttrib4Nsv)(GLuint, GLshort*);
typedef void(*gl30PVertexAttrib4Niv)(GLuint, GLint*);
typedef void(*gl30PVertexAttrib4Nubv)(GLuint, GLubyte*);
typedef void(*gl30PVertexAttrib4Nusv)(GLuint, GLushort*);
typedef void(*gl30PVertexAttrib4Nuiv)(GLuint, GLuint*);
typedef void(*gl30PUniformMatrix2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix3fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl30PUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, GLfloat*);

typedef struct {
    gl30PAccum fnAccum;
    gl30PAlphaFunc fnAlphaFunc;
    gl30PBegin fnBegin;
    gl30PEnd fnEnd;
    gl30PBitmap fnBitmap;
    gl30PBlendFunc fnBlendFunc;
    gl30PCallList fnCallList;
    gl30PCallLists fnCallLists;
    gl30PClear fnClear;
    gl30PClearAccum fnClearAccum;
    gl30PClearColor fnClearColor;
    gl30PClearDepth fnClearDepth;
    gl30PClearIndex fnClearIndex;
    gl30PClearStencil fnClearStencil;
    gl30PClipPlane fnClipPlane;
    gl30PColor3b fnColor3b;
    gl30PColor3d fnColor3d;
    gl30PColor3f fnColor3f;
    gl30PColor3i fnColor3i;
    gl30PColor3s fnColor3s;
    gl30PColor3ub fnColor3ub;
    gl30PColor3ui fnColor3ui;
    gl30PColor3us fnColor3us;
    gl30PColor4b fnColor4b;
    gl30PColor4d fnColor4d;
    gl30PColor4f fnColor4f;
    gl30PColor4i fnColor4i;
    gl30PColor4s fnColor4s;
    gl30PColor4ub fnColor4ub;
    gl30PColor4ui fnColor4ui;
    gl30PColor4us fnColor4us;
    gl30PColor3bv fnColor3bv;
    gl30PColor3dv fnColor3dv;
    gl30PColor3fv fnColor3fv;
    gl30PColor3iv fnColor3iv;
    gl30PColor3sv fnColor3sv;
    gl30PColor3ubv fnColor3ubv;
    gl30PColor3uiv fnColor3uiv;
    gl30PColor3usv fnColor3usv;
    gl30PColor4bv fnColor4bv;
    gl30PColor4dv fnColor4dv;
    gl30PColor4fv fnColor4fv;
    gl30PColor4iv fnColor4iv;
    gl30PColor4sv fnColor4sv;
    gl30PColor4ubv fnColor4ubv;
    gl30PColor4uiv fnColor4uiv;
    gl30PColor4usv fnColor4usv;
    gl30PColorMask fnColorMask;
    gl30PColorMaterial fnColorMaterial;
    gl30PCopyPixels fnCopyPixels;
    gl30PCullFace fnCullFace;
    gl30PDeleteLists fnDeleteLists;
    gl30PDepthFunc fnDepthFunc;
    gl30PDepthMask fnDepthMask;
    gl30PDepthRange fnDepthRange;
    gl30PEnable fnEnable;
    gl30PDisable fnDisable;
    gl30PDrawBuffer fnDrawBuffer;
    gl30PDrawPixels fnDrawPixels;
    gl30PEdgeFlag fnEdgeFlag;
    gl30PEdgeFlagv fnEdgeFlagv;
    gl30PEdgeFlagPointer fnEdgeFlagPointer;
    gl30PEvalCoord1d fnEvalCoord1d;
    gl30PEvalCoord1f fnEvalCoord1f;
    gl30PEvalCoord2d fnEvalCoord2d;
    gl30PEvalCoord2f fnEvalCoord2f;
    gl30PEvalCoord1dv fnEvalCoord1dv;
    gl30PEvalCoord1fv fnEvalCoord1fv;
    gl30PEvalCoord2dv fnEvalCoord2dv;
    gl30PEvalCoord2fv fnEvalCoord2fv;
    gl30PEvalMesh1 fnEvalMesh1;
    gl30PEvalMesh2 fnEvalMesh2;
    gl30PEvalPoint1 fnEvalPoint1;
    gl30PEvalPoint2 fnEvalPoint2;
    gl30PFeedbackBuffer fnFeedbackBuffer;
    gl30PFinish fnFinish;
    gl30PFlush fnFlush;
    gl30PFogf fnFogf;
    gl30PFogi fnFogi;
    gl30PFogfv fnFogfv;
    gl30PFogiv fnFogiv;
    gl30PFrontFace fnFrontFace;
    gl30PFrustum fnFrustum;
    gl30PGenLists fnGenLists;
    gl30PGetBooleanv fnGetBooleanv;
    gl30PGetDoublev fnGetDoublev;
    gl30PGetFloatv fnGetFloatv;
    gl30PGetIntegerv fnGetIntegerv;
    gl30PGetClipPlane fnGetClipPlane;
    gl30PGetError fnGetError;
    gl30PGetLightfv fnGetLightfv;
    gl30PGetLightiv fnGetLightiv;
    gl30PGetMapdv fnGetMapdv;
    gl30PGetMapfv fnGetMapfv;
    gl30PGetMapiv fnGetMapiv;
    gl30PGetMaterialfv fnGetMaterialfv;
    gl30PGetMaterialiv fnGetMaterialiv;
    gl30PGetPixelMapfv fnGetPixelMapfv;
    gl30PGetPixelMapuiv fnGetPixelMapuiv;
    gl30PGetPixelMapusv fnGetPixelMapusv;
    gl30PGetPolygonStipple fnGetPolygonStipple;
    gl30PGetString fnGetString;
    gl30PGetTexEnvfv fnGetTexEnvfv;
    gl30PGetTexEnviv fnGetTexEnviv;
    gl30PGetTexGendv fnGetTexGendv;
    gl30PGetTexGenfv fnGetTexGenfv;
    gl30PGetTexGeniv fnGetTexGeniv;
    gl30PGetTexImage fnGetTexImage;
    gl30PGetTexLevelParameterfv fnGetTexLevelParameterfv;
    gl30PGetTexLevelParameteriv fnGetTexLevelParameteriv;
    gl30PGetTexParameterfv fnGetTexParameterfv;
    gl30PGetTexParameteriv fnGetTexParameteriv;
    gl30PHint fnHint;
    gl30PIndexd fnIndexd;
    gl30PIndexf fnIndexf;
    gl30PIndexi fnIndexi;
    gl30PIndexs fnIndexs;
    gl30PIndexdv fnIndexdv;
    gl30PIndexfv fnIndexfv;
    gl30PIndexiv fnIndexiv;
    gl30PIndexsv fnIndexsv;
    gl30PIndexMask fnIndexMask;
    gl30PIndexPointer fnIndexPointer;
    gl30PInitNames fnInitNames;
    gl30PIsEnabled fnIsEnabled;
    gl30PIsList fnIsList;
    gl30PLightf fnLightf;
    gl30PLighti fnLighti;
    gl30PLightfv fnLightfv;
    gl30PLightiv fnLightiv;
    gl30PLightModelf fnLightModelf;
    gl30PLightModeli fnLightModeli;
    gl30PLightModelfv fnLightModelfv;
    gl30PLightModeliv fnLightModeliv;
    gl30PLineStipple fnLineStipple;
    gl30PLineWidth fnLineWidth;
    gl30PListBase fnListBase;
    gl30PLoadIdentity fnLoadIdentity;
    gl30PLoadMatrixd fnLoadMatrixd;
    gl30PLoadMatrixf fnLoadMatrixf;
    gl30PLoadName fnLoadName;
    gl30PLogicOp fnLogicOp;
    gl30PMap1d fnMap1d;
    gl30PMap1f fnMap1f;
    gl30PMap2d fnMap2d;
    gl30PMap2f fnMap2f;
    gl30PMapGrid1d fnMapGrid1d;
    gl30PMapGrid1f fnMapGrid1f;
    gl30PMapGrid2d fnMapGrid2d;
    gl30PMapGrid2f fnMapGrid2f;
    gl30PMaterialf fnMaterialf;
    gl30PMateriali fnMateriali;
    gl30PMaterialfv fnMaterialfv;
    gl30PMaterialiv fnMaterialiv;
    gl30PMatrixMode fnMatrixMode;
    gl30PMultMatrixd fnMultMatrixd;
    gl30PMultMatrixf fnMultMatrixf;
    gl30PNewList fnNewList;
    gl30PEndList fnEndList;
    gl30PNormal3b fnNormal3b;
    gl30PNormal3d fnNormal3d;
    gl30PNormal3f fnNormal3f;
    gl30PNormal3i fnNormal3i;
    gl30PNormal3s fnNormal3s;
    gl30PNormal3bv fnNormal3bv;
    gl30PNormal3dv fnNormal3dv;
    gl30PNormal3fv fnNormal3fv;
    gl30PNormal3iv fnNormal3iv;
    gl30PNormal3sv fnNormal3sv;
    gl30POrtho fnOrtho;
    gl30PPassThrough fnPassThrough;
    gl30PPixelMapfv fnPixelMapfv;
    gl30PPixelMapuiv fnPixelMapuiv;
    gl30PPixelMapusv fnPixelMapusv;
    gl30PPixelStoref fnPixelStoref;
    gl30PPixelStorei fnPixelStorei;
    gl30PPixelTransferf fnPixelTransferf;
    gl30PPixelTransferi fnPixelTransferi;
    gl30PPixelZoom fnPixelZoom;
    gl30PPointSize fnPointSize;
    gl30PPolygonMode fnPolygonMode;
    gl30PPolygonStipple fnPolygonStipple;
    gl30PPushAttrib fnPushAttrib;
    gl30PPopAttrib fnPopAttrib;
    gl30PPushMatrix fnPushMatrix;
    gl30PPopMatrix fnPopMatrix;
    gl30PPushName fnPushName;
    gl30PPopName fnPopName;
    gl30PRasterPos2d fnRasterPos2d;
    gl30PRasterPos2f fnRasterPos2f;
    gl30PRasterPos2i fnRasterPos2i;
    gl30PRasterPos2s fnRasterPos2s;
    gl30PRasterPos3d fnRasterPos3d;
    gl30PRasterPos3f fnRasterPos3f;
    gl30PRasterPos3i fnRasterPos3i;
    gl30PRasterPos3s fnRasterPos3s;
    gl30PRasterPos4d fnRasterPos4d;
    gl30PRasterPos4f fnRasterPos4f;
    gl30PRasterPos4i fnRasterPos4i;
    gl30PRasterPos4s fnRasterPos4s;
    gl30PRasterPos2dv fnRasterPos2dv;
    gl30PRasterPos2fv fnRasterPos2fv;
    gl30PRasterPos2iv fnRasterPos2iv;
    gl30PRasterPos2sv fnRasterPos2sv;
    gl30PRasterPos3dv fnRasterPos3dv;
    gl30PRasterPos3fv fnRasterPos3fv;
    gl30PRasterPos3iv fnRasterPos3iv;
    gl30PRasterPos3sv fnRasterPos3sv;
    gl30PRasterPos4dv fnRasterPos4dv;
    gl30PRasterPos4fv fnRasterPos4fv;
    gl30PRasterPos4iv fnRasterPos4iv;
    gl30PRasterPos4sv fnRasterPos4sv;
    gl30PReadBuffer fnReadBuffer;
    gl30PReadPixels fnReadPixels;
    gl30PRectd fnRectd;
    gl30PRectf fnRectf;
    gl30PRecti fnRecti;
    gl30PRects fnRects;
    gl30PRectdv fnRectdv;
    gl30PRectfv fnRectfv;
    gl30PRectiv fnRectiv;
    gl30PRectsv fnRectsv;
    gl30PRenderMode fnRenderMode;
    gl30PRotated fnRotated;
    gl30PRotatef fnRotatef;
    gl30PScaled fnScaled;
    gl30PScalef fnScalef;
    gl30PScissor fnScissor;
    gl30PSelectBuffer fnSelectBuffer;
    gl30PShadeModel fnShadeModel;
    gl30PStencilFunc fnStencilFunc;
    gl30PStencilMask fnStencilMask;
    gl30PStencilOp fnStencilOp;
    gl30PTexCoord1d fnTexCoord1d;
    gl30PTexCoord1f fnTexCoord1f;
    gl30PTexCoord1i fnTexCoord1i;
    gl30PTexCoord1s fnTexCoord1s;
    gl30PTexCoord2d fnTexCoord2d;
    gl30PTexCoord2f fnTexCoord2f;
    gl30PTexCoord2i fnTexCoord2i;
    gl30PTexCoord2s fnTexCoord2s;
    gl30PTexCoord3d fnTexCoord3d;
    gl30PTexCoord3f fnTexCoord3f;
    gl30PTexCoord3i fnTexCoord3i;
    gl30PTexCoord3s fnTexCoord3s;
    gl30PTexCoord4d fnTexCoord4d;
    gl30PTexCoord4f fnTexCoord4f;
    gl30PTexCoord4i fnTexCoord4i;
    gl30PTexCoord4s fnTexCoord4s;
    gl30PTexCoord1dv fnTexCoord1dv;
    gl30PTexCoord1fv fnTexCoord1fv;
    gl30PTexCoord1iv fnTexCoord1iv;
    gl30PTexCoord1sv fnTexCoord1sv;
    gl30PTexCoord2dv fnTexCoord2dv;
    gl30PTexCoord2fv fnTexCoord2fv;
    gl30PTexCoord2iv fnTexCoord2iv;
    gl30PTexCoord2sv fnTexCoord2sv;
    gl30PTexCoord3dv fnTexCoord3dv;
    gl30PTexCoord3fv fnTexCoord3fv;
    gl30PTexCoord3iv fnTexCoord3iv;
    gl30PTexCoord3sv fnTexCoord3sv;
    gl30PTexCoord4dv fnTexCoord4dv;
    gl30PTexCoord4fv fnTexCoord4fv;
    gl30PTexCoord4iv fnTexCoord4iv;
    gl30PTexCoord4sv fnTexCoord4sv;
    gl30PTexEnvf fnTexEnvf;
    gl30PTexEnvi fnTexEnvi;
    gl30PTexEnvfv fnTexEnvfv;
    gl30PTexEnviv fnTexEnviv;
    gl30PTexGend fnTexGend;
    gl30PTexGenf fnTexGenf;
    gl30PTexGeni fnTexGeni;
    gl30PTexGendv fnTexGendv;
    gl30PTexGenfv fnTexGenfv;
    gl30PTexGeniv fnTexGeniv;
    gl30PTexImage1D fnTexImage1D;
    gl30PTexImage2D fnTexImage2D;
    gl30PTexParameterf fnTexParameterf;
    gl30PTexParameteri fnTexParameteri;
    gl30PTexParameterfv fnTexParameterfv;
    gl30PTexParameteriv fnTexParameteriv;
    gl30PTranslated fnTranslated;
    gl30PTranslatef fnTranslatef;
    gl30PVertex2s fnVertex2s;
    gl30PVertex2i fnVertex2i;
    gl30PVertex2f fnVertex2f;
    gl30PVertex2d fnVertex2d;
    gl30PVertex3s fnVertex3s;
    gl30PVertex3i fnVertex3i;
    gl30PVertex3f fnVertex3f;
    gl30PVertex3d fnVertex3d;
    gl30PVertex4s fnVertex4s;
    gl30PVertex4i fnVertex4i;
    gl30PVertex4f fnVertex4f;
    gl30PVertex4d fnVertex4d;
    gl30PViewport fnViewport;
    gl30PGetConvolutionParameterfv fnGetConvolutionParameterfv;
    gl30PGetConvolutionParameteriv fnGetConvolutionParameteriv;
    gl30PAreTexturesResident fnAreTexturesResident;
    gl30PArrayElement fnArrayElement;
    gl30PDrawArrays fnDrawArrays;
    gl30PDrawElements fnDrawElements;
    gl30PGetPointerv fnGetPointerv;
    gl30PPolygonOffset fnPolygonOffset;
    gl30PCopyTexImage1D fnCopyTexImage1D;
    gl30PCopyTexImage2D fnCopyTexImage2D;
    gl30PCopyTexSubImage1D fnCopyTexSubImage1D;
    gl30PCopyTexSubImage2D fnCopyTexSubImage2D;
    gl30PBindTexture fnBindTexture;
    gl30PDeleteTextures fnDeleteTextures;
    gl30PGenTextures fnGenTextures;
    gl30PIsTexture fnIsTexture;
    gl30PColorPointer fnColorPointer;
    gl30PEnableClientState fnEnableClientState;
    gl30PDisableClientState fnDisableClientState;
    gl30PIndexub fnIndexub;
    gl30PIndexubv fnIndexubv;
    gl30PInterleavedArrays fnInterleavedArrays;
    gl30PNormalPointer fnNormalPointer;
    gl30PPushClientAttrib fnPushClientAttrib;
    gl30PPrioritizeTextures fnPrioritizeTextures;
    gl30PPopClientAttrib fnPopClientAttrib;
    gl30PTexCoordPointer fnTexCoordPointer;
    gl30PTexSubImage1D fnTexSubImage1D;
    gl30PTexSubImage2D fnTexSubImage2D;
    gl30PVertexPointer fnVertexPointer;
    gl30PColorTable fnColorTable;
    gl30PColorTableParameterfv fnColorTableParameterfv;
    gl30PColorTableParameteriv fnColorTableParameteriv;
    gl30PColorSubTable fnColorSubTable;
    gl30PConvolutionFilter1D fnConvolutionFilter1D;
    gl30PConvolutionFilter2D fnConvolutionFilter2D;
    gl30PConvolutionParameterf fnConvolutionParameterf;
    gl30PConvolutionParameteri fnConvolutionParameteri;
    gl30PCopyColorTable fnCopyColorTable;
    gl30PCopyColorSubTable fnCopyColorSubTable;
    gl30PCopyConvolutionFilter1D fnCopyConvolutionFilter1D;
    gl30PCopyConvolutionFilter2D fnCopyConvolutionFilter2D;
    gl30PGetColorTable fnGetColorTable;
    gl30PGetColorTableParameterfv fnGetColorTableParameterfv;
    gl30PGetColorTableParameteriv fnGetColorTableParameteriv;
    gl30PGetConvolutionFilter fnGetConvolutionFilter;
    gl30PGetHistogram fnGetHistogram;
    gl30PGetHistogramParameterfv fnGetHistogramParameterfv;
    gl30PGetHistogramParameteriv fnGetHistogramParameteriv;
    gl30PGetSeparableFilter fnGetSeparableFilter;
    gl30PHistogram fnHistogram;
    gl30PMinmax fnMinmax;
    gl30PMultiTexCoord1s fnMultiTexCoord1s;
    gl30PMultiTexCoord1i fnMultiTexCoord1i;
    gl30PMultiTexCoord1f fnMultiTexCoord1f;
    gl30PMultiTexCoord1d fnMultiTexCoord1d;
    gl30PMultiTexCoord2s fnMultiTexCoord2s;
    gl30PMultiTexCoord2i fnMultiTexCoord2i;
    gl30PMultiTexCoord2f fnMultiTexCoord2f;
    gl30PMultiTexCoord2d fnMultiTexCoord2d;
    gl30PMultiTexCoord3s fnMultiTexCoord3s;
    gl30PMultiTexCoord3i fnMultiTexCoord3i;
    gl30PMultiTexCoord3f fnMultiTexCoord3f;
    gl30PMultiTexCoord3d fnMultiTexCoord3d;
    gl30PMultiTexCoord4s fnMultiTexCoord4s;
    gl30PMultiTexCoord4i fnMultiTexCoord4i;
    gl30PMultiTexCoord4f fnMultiTexCoord4f;
    gl30PMultiTexCoord4d fnMultiTexCoord4d;
    gl30PMultiTexCoord1sv fnMultiTexCoord1sv;
    gl30PMultiTexCoord1iv fnMultiTexCoord1iv;
    gl30PMultiTexCoord1fv fnMultiTexCoord1fv;
    gl30PMultiTexCoord1dv fnMultiTexCoord1dv;
    gl30PMultiTexCoord2sv fnMultiTexCoord2sv;
    gl30PMultiTexCoord2iv fnMultiTexCoord2iv;
    gl30PMultiTexCoord2fv fnMultiTexCoord2fv;
    gl30PMultiTexCoord2dv fnMultiTexCoord2dv;
    gl30PMultiTexCoord3sv fnMultiTexCoord3sv;
    gl30PMultiTexCoord3iv fnMultiTexCoord3iv;
    gl30PMultiTexCoord3fv fnMultiTexCoord3fv;
    gl30PMultiTexCoord3dv fnMultiTexCoord3dv;
    gl30PMultiTexCoord4sv fnMultiTexCoord4sv;
    gl30PMultiTexCoord4iv fnMultiTexCoord4iv;
    gl30PMultiTexCoord4fv fnMultiTexCoord4fv;
    gl30PMultiTexCoord4dv fnMultiTexCoord4dv;
    gl30PResetHistogram fnResetHistogram;
    gl30PResetMinmax fnResetMinmax;
    gl30PSeparableFilter2D fnSeparableFilter2D;
    gl30PBlendColor fnBlendColor;
    gl30PBlendEquation fnBlendEquation;
    gl30PCopyTexSubImage3D fnCopyTexSubImage3D;
    gl30PDrawRangeElements fnDrawRangeElements;
    gl30PTexImage3D fnTexImage3D;
    gl30PTexSubImage3D fnTexSubImage3D;
    gl30PActiveTexture fnActiveTexture;
    gl30PClientActiveTexture fnClientActiveTexture;
    gl30PCompressedTexImage1D fnCompressedTexImage1D;
    gl30PCompressedTexImage2D fnCompressedTexImage2D;
    gl30PCompressedTexImage3D fnCompressedTexImage3D;
    gl30PCompressedTexSubImage1D fnCompressedTexSubImage1D;
    gl30PCompressedTexSubImage2D fnCompressedTexSubImage2D;
    gl30PCompressedTexSubImage3D fnCompressedTexSubImage3D;
    gl30PGetCompressedTexImage fnGetCompressedTexImage;
    gl30PLoadTransposeMatrixd fnLoadTransposeMatrixd;
    gl30PLoadTransposeMatrixf fnLoadTransposeMatrixf;
    gl30PMultTransposeMatrixd fnMultTransposeMatrixd;
    gl30PMultTransposeMatrixf fnMultTransposeMatrixf;
    gl30PSampleCoverage fnSampleCoverage;
    gl30PBlendFuncSeparate fnBlendFuncSeparate;
    gl30PFogCoordPointer fnFogCoordPointer;
    gl30PFogCoordd fnFogCoordd;
    gl30PFogCoordf fnFogCoordf;
    gl30PFogCoorddv fnFogCoorddv;
    gl30PFogCoordfv fnFogCoordfv;
    gl30PMultiDrawArrays fnMultiDrawArrays;
    gl30PMultiDrawElements fnMultiDrawElements;
    gl30PPointParameterf fnPointParameterf;
    gl30PPointParameteri fnPointParameteri;
    gl30PSecondaryColor3b fnSecondaryColor3b;
    gl30PSecondaryColor3s fnSecondaryColor3s;
    gl30PSecondaryColor3i fnSecondaryColor3i;
    gl30PSecondaryColor3f fnSecondaryColor3f;
    gl30PSecondaryColor3d fnSecondaryColor3d;
    gl30PSecondaryColor3ub fnSecondaryColor3ub;
    gl30PSecondaryColor3us fnSecondaryColor3us;
    gl30PSecondaryColor3ui fnSecondaryColor3ui;
    gl30PSecondaryColor3bv fnSecondaryColor3bv;
    gl30PSecondaryColor3sv fnSecondaryColor3sv;
    gl30PSecondaryColor3iv fnSecondaryColor3iv;
    gl30PSecondaryColor3fv fnSecondaryColor3fv;
    gl30PSecondaryColor3dv fnSecondaryColor3dv;
    gl30PSecondaryColor3ubv fnSecondaryColor3ubv;
    gl30PSecondaryColor3usv fnSecondaryColor3usv;
    gl30PSecondaryColor3uiv fnSecondaryColor3uiv;
    gl30PSecondaryColorPointer fnSecondaryColorPointer;
    gl30PWindowPos2s fnWindowPos2s;
    gl30PWindowPos2i fnWindowPos2i;
    gl30PWindowPos2f fnWindowPos2f;
    gl30PWindowPos2d fnWindowPos2d;
    gl30PWindowPos3s fnWindowPos3s;
    gl30PWindowPos3i fnWindowPos3i;
    gl30PWindowPos3f fnWindowPos3f;
    gl30PWindowPos3d fnWindowPos3d;
    gl30PWindowPos2sv fnWindowPos2sv;
    gl30PWindowPos2iv fnWindowPos2iv;
    gl30PWindowPos2fv fnWindowPos2fv;
    gl30PWindowPos2dv fnWindowPos2dv;
    gl30PWindowPos3sv fnWindowPos3sv;
    gl30PWindowPos3iv fnWindowPos3iv;
    gl30PWindowPos3fv fnWindowPos3fv;
    gl30PWindowPos3dv fnWindowPos3dv;
    gl30PBeginQuery fnBeginQuery;
    gl30PBindBuffer fnBindBuffer;
    gl30PBufferData fnBufferData;
    gl30PBufferSubData fnBufferSubData;
    gl30PDeleteBuffers fnDeleteBuffers;
    gl30PDeleteQueries fnDeleteQueries;
    gl30PGenBuffers fnGenBuffers;
    gl30PGenQueries fnGenQueries;
    gl30PGetBufferParameteriv fnGetBufferParameteriv;
    gl30PGetBufferPointerv fnGetBufferPointerv;
    gl30PGetBufferSubData fnGetBufferSubData;
    gl30PGetQueryObjectiv fnGetQueryObjectiv;
    gl30PGetQueryObjectuiv fnGetQueryObjectuiv;
    gl30PGetQueryiv fnGetQueryiv;
    gl30PIsBuffer fnIsBuffer;
    gl30PIsQuery fnIsQuery;
    gl30PMapBuffer fnMapBuffer;
    gl30PUnmapBuffer fnUnmapBuffer;
    gl30PAttachShader fnAttachShader;
    gl30PBindAttribLocation fnBindAttribLocation;
    gl30PBlendEquationSeperate fnBlendEquationSeperate;
    gl30PCompileShader fnCompileShader;
    gl30PCreateProgram fnCreateProgram;
    gl30PCreateShader fnCreateShader;
    gl30PDeleteProgram fnDeleteProgram;
    gl30PDeleteShader fnDeleteShader;
    gl30PDetachShader fnDetachShader;
    gl30PEnableVertexAttribArray fnEnableVertexAttribArray;
    gl30PDisableVertexAttribArray fnDisableVertexAttribArray;
    gl30PDrawBuffers fnDrawBuffers;
    gl30PGetActiveAttrib fnGetActiveAttrib;
    gl30PGetActiveUniform fnGetActiveUniform;
    gl30PGetAttachedShaders fnGetAttachedShaders;
    gl30PGetAttribLocation fnGetAttribLocation;
    gl30PGetProgramiv fnGetProgramiv;
    gl30PGetProgramInfoLog fnGetProgramInfoLog;
    gl30PGetShaderiv fnGetShaderiv;
    gl30PGetShaderInfoLog fnGetShaderInfoLog;
    gl30PGetShaderSource fnGetShaderSource;
    gl30PGetUniformfv fnGetUniformfv;
    gl30PGetUniformiv fnGetUniformiv;
    gl30PGetUniformLocation fnGetUniformLocation;
    gl30PGetVertexAttribdv fnGetVertexAttribdv;
    gl30PGetVertexAttribfv fnGetVertexAttribfv;
    gl30PGetVertexAttribiv fnGetVertexAttribiv;
    gl30PGetVertexAttribPointerv fnGetVertexAttribPointerv;
    gl30PIsProgram fnIsProgram;
    gl30PIsShader fnIsShader;
    gl30PLinkProgram fnLinkProgram;
    gl30PShaderSource fnShaderSource;
    gl30PStencilFuncSeparate fnStencilFuncSeparate;
    gl30PStencilMaskSeparate fnStencilMaskSeparate;
    gl30PStencilOpSeparate fnStencilOpSeparate;
    gl30PUniform1f fnUniform1f;
    gl30PUniform2f fnUniform2f;
    gl30PUniform3f fnUniform3f;
    gl30PUniform4f fnUniform4f;
    gl30PUniform1i fnUniform1i;
    gl30PUniform2i fnUniform2i;
    gl30PUniform3i fnUniform3i;
    gl30PUniform4i fnUniform4i;
    gl30PUniform1ui fnUniform1ui;
    gl30PUniform2ui fnUniform2ui;
    gl30PUniform3ui fnUniform3ui;
    gl30PUniform4ui fnUniform4ui;
    gl30PUniform1fv fnUniform1fv;
    gl30PUniform2fv fnUniform2fv;
    gl30PUniform3fv fnUniform3fv;
    gl30PUniform4fv fnUniform4fv;
    gl30PUniform1iv fnUniform1iv;
    gl30PUniform2iv fnUniform2iv;
    gl30PUniform3iv fnUniform3iv;
    gl30PUniform4iv fnUniform4iv;
    gl30PUniform1uiv fnUniform1uiv;
    gl30PUniform2uiv fnUniform2uiv;
    gl30PUniform3uiv fnUniform3uiv;
    gl30PUniform4uiv fnUniform4uiv;
    gl30PUseProgram fnUseProgram;
    gl30PValidateProgram fnValidateProgram;
    gl30PVertexAttribPointer fnVertexAttribPointer;
    gl30PVertexAttrib1f fnVertexAttrib1f;
    gl30PVertexAttrib1s fnVertexAttrib1s;
    gl30PVertexAttrib1d fnVertexAttrib1d;
    gl30PVertexAttrib2f fnVertexAttrib2f;
    gl30PVertexAttrib2s fnVertexAttrib2s;
    gl30PVertexAttrib2d fnVertexAttrib2d;
    gl30PVertexAttrib3f fnVertexAttrib3f;
    gl30PVertexAttrib3s fnVertexAttrib3s;
    gl30PVertexAttrib3d fnVertexAttrib3d;
    gl30PVertexAttrib4f fnVertexAttrib4f;
    gl30PVertexAttrib4s fnVertexAttrib4s;
    gl30PVertexAttrib4d fnVertexAttrib4d;
    gl30PVertexAttrib4Nuv fnVertexAttrib4Nuv;
    gl30PVertexAttrib1fv fnVertexAttrib1fv;
    gl30PVertexAttrib1sv fnVertexAttrib1sv;
    gl30PVertexAttrib1dv fnVertexAttrib1dv;
    gl30PVertexAttrib2fv fnVertexAttrib2fv;
    gl30PVertexAttrib2sv fnVertexAttrib2sv;
    gl30PVertexAttrib2dv fnVertexAttrib2dv;
    gl30PVertexAttrib3fv fnVertexAttrib3fv;
    gl30PVertexAttrib3sv fnVertexAttrib3sv;
    gl30PVertexAttrib3dv fnVertexAttrib3dv;
    gl30PVertexAttrib4fv fnVertexAttrib4fv;
    gl30PVertexAttrib4sv fnVertexAttrib4sv;
    gl30PVertexAttrib4dv fnVertexAttrib4dv;
    gl30PVertexAttrib4iv fnVertexAttrib4iv;
    gl30PVertexAttrib4bv fnVertexAttrib4bv;
    gl30PVertexAttrib4ubv fnVertexAttrib4ubv;
    gl30PVertexAttrib4usv fnVertexAttrib4usv;
    gl30PVertexAttrib4uiv fnVertexAttrib4uiv;
    gl30PVertexAttrib4Nbv fnVertexAttrib4Nbv;
    gl30PVertexAttrib4Nsv fnVertexAttrib4Nsv;
    gl30PVertexAttrib4Niv fnVertexAttrib4Niv;
    gl30PVertexAttrib4Nubv fnVertexAttrib4Nubv;
    gl30PVertexAttrib4Nusv fnVertexAttrib4Nusv;
    gl30PVertexAttrib4Nuiv fnVertexAttrib4Nuiv;
    gl30PUniformMatrix2fv fnUniformMatrix2fv;
    gl30PUniformMatrix3fv fnUniformMatrix3fv;
    gl30PUniformMatrix4fv fnUniformMatrix4fv;
    gl30PUniformMatrix2x3fv fnUniformMatrix2x3fv;
    gl30PUniformMatrix3x2fv fnUniformMatrix3x2fv;
    gl30PUniformMatrix2x4fv fnUniformMatrix2x4fv;
    gl30PUniformMatrix4x2fv fnUniformMatrix4x2fv;
    gl30PUniformMatrix3x4fv fnUniformMatrix3x4fv;
    gl30PUniformMatrix4x3fv fnUniformMatrix4x3fv;
} gl30Context;

extern gl30Context* gl30NewContext();
void gl30Accum(gl30Context* glc, GLenum op, GLfloat value);
void gl30AlphaFunc(gl30Context* glc, GLenum func, GLclampf ref);
void gl30Begin(gl30Context* glc, GLenum mode);
void gl30End(gl30Context* glc);
void gl30Bitmap(gl30Context* glc, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
void gl30BlendFunc(gl30Context* glc, GLenum sfactor, GLenum dfactor);
void gl30CallList(gl30Context* glc, GLuint list);
void gl30CallLists(gl30Context* glc, GLsizei n, GLenum type, GLvoid* lists);
void gl30Clear(gl30Context* glc, GLbitfield mask);
void gl30ClearAccum(gl30Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl30ClearColor(gl30Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl30ClearDepth(gl30Context* glc, GLclampd depth);
void gl30ClearIndex(gl30Context* glc, GLfloat c);
void gl30ClearStencil(gl30Context* glc, GLint s);
void gl30ClipPlane(gl30Context* glc, GLenum plane, GLdouble* equation);
void gl30Color3b(gl30Context* glc, GLbyte red, GLbyte green, GLbyte blue);
void gl30Color3d(gl30Context* glc, GLdouble red, GLdouble green, GLdouble blue);
void gl30Color3f(gl30Context* glc, GLfloat red, GLfloat green, GLfloat blue);
void gl30Color3i(gl30Context* glc, GLint red, GLint green, GLint blue);
void gl30Color3s(gl30Context* glc, GLshort red, GLshort green, GLshort blue);
void gl30Color3ub(gl30Context* glc, GLubyte red, GLubyte green, GLubyte blue);
void gl30Color3ui(gl30Context* glc, GLuint red, GLuint green, GLuint blue);
void gl30Color3us(gl30Context* glc, GLushort red, GLushort green, GLushort blue);
void gl30Color4b(gl30Context* glc, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void gl30Color4d(gl30Context* glc, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void gl30Color4f(gl30Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl30Color4i(gl30Context* glc, GLint red, GLint green, GLint blue, GLint alpha);
void gl30Color4s(gl30Context* glc, GLshort red, GLshort green, GLshort blue, GLshort alpha);
void gl30Color4ub(gl30Context* glc, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void gl30Color4ui(gl30Context* glc, GLuint red, GLuint green, GLuint blue, GLuint alpha);
void gl30Color4us(gl30Context* glc, GLushort red, GLushort green, GLushort blue, GLushort alpha);
void gl30Color3bv(gl30Context* glc, GLbyte* v);
void gl30Color3dv(gl30Context* glc, GLdouble* v);
void gl30Color3fv(gl30Context* glc, GLfloat* v);
void gl30Color3iv(gl30Context* glc, GLint* v);
void gl30Color3sv(gl30Context* glc, GLshort* v);
void gl30Color3ubv(gl30Context* glc, GLubyte* v);
void gl30Color3uiv(gl30Context* glc, GLuint* v);
void gl30Color3usv(gl30Context* glc, GLushort* v);
void gl30Color4bv(gl30Context* glc, GLbyte* v);
void gl30Color4dv(gl30Context* glc, GLdouble* v);
void gl30Color4fv(gl30Context* glc, GLfloat* v);
void gl30Color4iv(gl30Context* glc, GLint* v);
void gl30Color4sv(gl30Context* glc, GLshort* v);
void gl30Color4ubv(gl30Context* glc, GLubyte* v);
void gl30Color4uiv(gl30Context* glc, GLuint* v);
void gl30Color4usv(gl30Context* glc, GLushort* v);
void gl30ColorMask(gl30Context* glc, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void gl30ColorMaterial(gl30Context* glc, GLenum face, GLenum mode);
void gl30CopyPixels(gl30Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void gl30CullFace(gl30Context* glc, GLenum mode);
void gl30DeleteLists(gl30Context* glc, GLuint list, GLsizei range);
void gl30DepthFunc(gl30Context* glc, GLenum func);
void gl30DepthMask(gl30Context* glc, GLboolean flag);
void gl30DepthRange(gl30Context* glc, GLclampd zNear, GLclampd zFar);
void gl30Enable(gl30Context* glc, GLenum cap);
void gl30Disable(gl30Context* glc, GLenum cap);
void gl30DrawBuffer(gl30Context* glc, GLenum mode);
void gl30DrawPixels(gl30Context* glc, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl30EdgeFlag(gl30Context* glc, GLboolean flag);
void gl30EdgeFlagv(gl30Context* glc, GLboolean* flag);
void gl30EdgeFlagPointer(gl30Context* glc, GLsizei stride, GLvoid* pointer);
void gl30EvalCoord1d(gl30Context* glc, GLdouble u);
void gl30EvalCoord1f(gl30Context* glc, GLfloat u);
void gl30EvalCoord2d(gl30Context* glc, GLdouble u, GLdouble v);
void gl30EvalCoord2f(gl30Context* glc, GLfloat u, GLfloat v);
void gl30EvalCoord1dv(gl30Context* glc, GLdouble* u);
void gl30EvalCoord1fv(gl30Context* glc, GLfloat* u);
void gl30EvalCoord2dv(gl30Context* glc, GLdouble* u);
void gl30EvalCoord2fv(gl30Context* glc, GLfloat* u);
void gl30EvalMesh1(gl30Context* glc, GLenum mode, GLint i1, GLint i2);
void gl30EvalMesh2(gl30Context* glc, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void gl30EvalPoint1(gl30Context* glc, GLint i);
void gl30EvalPoint2(gl30Context* glc, GLint i, GLint j);
void gl30FeedbackBuffer(gl30Context* glc, GLsizei size, GLenum type, GLfloat* buffer);
void gl30Finish(gl30Context* glc);
void gl30Flush(gl30Context* glc);
void gl30Fogf(gl30Context* glc, GLenum pname, GLfloat param);
void gl30Fogi(gl30Context* glc, GLenum pname, GLint param);
void gl30Fogfv(gl30Context* glc, GLenum pname, GLfloat* params);
void gl30Fogiv(gl30Context* glc, GLenum pname, GLint* params);
void gl30FrontFace(gl30Context* glc, GLenum mode);
void gl30Frustum(gl30Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLuint gl30GenLists(gl30Context* glc, GLsizei range);
void gl30GetBooleanv(gl30Context* glc, GLenum pname, GLboolean* params);
void gl30GetDoublev(gl30Context* glc, GLenum pname, GLdouble* params);
void gl30GetFloatv(gl30Context* glc, GLenum pname, GLfloat* params);
void gl30GetIntegerv(gl30Context* glc, GLenum pname, GLint* params);
void gl30GetClipPlane(gl30Context* glc, GLenum plane, GLdouble* equation);
GLenum gl30GetError(gl30Context* glc);
void gl30GetLightfv(gl30Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl30GetLightiv(gl30Context* glc, GLenum light, GLenum pname, GLint* params);
void gl30GetMapdv(gl30Context* glc, GLenum target, GLenum query, GLdouble* v);
void gl30GetMapfv(gl30Context* glc, GLenum target, GLenum query, GLfloat* v);
void gl30GetMapiv(gl30Context* glc, GLenum target, GLenum query, GLint* v);
void gl30GetMaterialfv(gl30Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl30GetMaterialiv(gl30Context* glc, GLenum face, GLenum pname, GLint* params);
void gl30GetPixelMapfv(gl30Context* glc, GLenum map, GLfloat* values);
void gl30GetPixelMapuiv(gl30Context* glc, GLenum map, GLuint* values);
void gl30GetPixelMapusv(gl30Context* glc, GLenum map, GLushort* values);
void gl30GetPolygonStipple(gl30Context* glc, GLubyte* pattern);
GLubyte* gl30GetString(gl30Context* glc, GLenum name);
void gl30GetTexEnvfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30GetTexEnviv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30GetTexGendv(gl30Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl30GetTexGenfv(gl30Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl30GetTexGeniv(gl30Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl30GetTexImage(gl30Context* glc, GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
void gl30GetTexLevelParameterfv(gl30Context* glc, GLenum target, GLint level, GLenum pname, GLfloat* params);
void gl30GetTexLevelParameteriv(gl30Context* glc, GLenum target, GLint level, GLenum pname, GLint* params);
void gl30GetTexParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30GetTexParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30Hint(gl30Context* glc, GLenum target, GLenum mode);
void gl30Indexd(gl30Context* glc, GLdouble c);
void gl30Indexf(gl30Context* glc, GLfloat c);
void gl30Indexi(gl30Context* glc, GLint c);
void gl30Indexs(gl30Context* glc, GLshort c);
void gl30Indexdv(gl30Context* glc, GLdouble* c);
void gl30Indexfv(gl30Context* glc, GLfloat* c);
void gl30Indexiv(gl30Context* glc, GLint* c);
void gl30Indexsv(gl30Context* glc, GLshort* c);
void gl30IndexMask(gl30Context* glc, GLuint mask);
void gl30IndexPointer(gl30Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30InitNames(gl30Context* glc);
void gl30IsEnabled(gl30Context* glc, GLenum cap);
GLboolean gl30IsList(gl30Context* glc, GLuint list);
void gl30Lightf(gl30Context* glc, GLenum light, GLenum pname, GLfloat param);
void gl30Lighti(gl30Context* glc, GLenum light, GLenum pname, GLint param);
void gl30Lightfv(gl30Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl30Lightiv(gl30Context* glc, GLenum light, GLenum pname, GLint* params);
void gl30LightModelf(gl30Context* glc, GLenum pname, GLfloat param);
void gl30LightModeli(gl30Context* glc, GLenum pname, GLint param);
void gl30LightModelfv(gl30Context* glc, GLenum pname, GLfloat* params);
void gl30LightModeliv(gl30Context* glc, GLenum pname, GLint* params);
void gl30LineStipple(gl30Context* glc, GLint factor, GLushort pattern);
void gl30LineWidth(gl30Context* glc, GLfloat width);
void gl30ListBase(gl30Context* glc, GLuint base);
void gl30LoadIdentity(gl30Context* glc);
void gl30LoadMatrixd(gl30Context* glc, GLdouble* m);
void gl30LoadMatrixf(gl30Context* glc, GLfloat* m);
void gl30LoadName(gl30Context* glc, GLuint name);
void gl30LogicOp(gl30Context* glc, GLenum opcode);
void gl30Map1d(gl30Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
void gl30Map1f(gl30Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
void gl30Map2d(gl30Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
void gl30Map2f(gl30Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
void gl30MapGrid1d(gl30Context* glc, GLint un, GLdouble u1, GLdouble u2);
void gl30MapGrid1f(gl30Context* glc, GLint un, GLfloat u1, GLfloat u2);
void gl30MapGrid2d(gl30Context* glc, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void gl30MapGrid2f(gl30Context* glc, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void gl30Materialf(gl30Context* glc, GLenum face, GLenum pname, GLfloat param);
void gl30Materiali(gl30Context* glc, GLenum face, GLenum pname, GLint param);
void gl30Materialfv(gl30Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl30Materialiv(gl30Context* glc, GLenum face, GLenum pname, GLint* params);
void gl30MatrixMode(gl30Context* glc, GLenum mode);
void gl30MultMatrixd(gl30Context* glc, GLdouble* m);
void gl30MultMatrixf(gl30Context* glc, GLfloat* m);
void gl30NewList(gl30Context* glc, GLuint list, GLenum mode);
void gl30EndList(gl30Context* glc);
void gl30Normal3b(gl30Context* glc, GLbyte nx, GLbyte ny, GLbyte nz);
void gl30Normal3d(gl30Context* glc, GLdouble nx, GLdouble ny, GLdouble nz);
void gl30Normal3f(gl30Context* glc, GLfloat nx, GLfloat ny, GLfloat nz);
void gl30Normal3i(gl30Context* glc, GLint nx, GLint ny, GLint nz);
void gl30Normal3s(gl30Context* glc, GLshort nx, GLshort ny, GLshort nz);
void gl30Normal3bv(gl30Context* glc, GLbyte* v);
void gl30Normal3dv(gl30Context* glc, GLdouble* v);
void gl30Normal3fv(gl30Context* glc, GLfloat* v);
void gl30Normal3iv(gl30Context* glc, GLint* v);
void gl30Normal3sv(gl30Context* glc, GLshort* v);
void gl30Ortho(gl30Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zfar);
void gl30PassThrough(gl30Context* glc, GLfloat token);
void gl30PixelMapfv(gl30Context* glc, GLenum map, GLsizei mapsize, GLfloat* values);
void gl30PixelMapuiv(gl30Context* glc, GLenum map, GLsizei mapsize, GLuint* values);
void gl30PixelMapusv(gl30Context* glc, GLenum map, GLsizei mapsize, GLushort* values);
void gl30PixelStoref(gl30Context* glc, GLenum pname, GLfloat param);
void gl30PixelStorei(gl30Context* glc, GLenum pname, GLint param);
void gl30PixelTransferf(gl30Context* glc, GLenum pname, GLfloat param);
void gl30PixelTransferi(gl30Context* glc, GLenum pname, GLint param);
void gl30PixelZoom(gl30Context* glc, GLfloat xfactor, GLfloat yfactor);
void gl30PointSize(gl30Context* glc, GLfloat size);
void gl30PolygonMode(gl30Context* glc, GLenum face, GLenum mode);
void gl30PolygonStipple(gl30Context* glc, GLubyte* mask);
void gl30PushAttrib(gl30Context* glc, GLbitfield mask);
void gl30PopAttrib(gl30Context* glc);
void gl30PushMatrix(gl30Context* glc);
void gl30PopMatrix(gl30Context* glc);
void gl30PushName(gl30Context* glc, GLuint name);
void gl30PopName(gl30Context* glc);
void gl30RasterPos2d(gl30Context* glc, GLdouble x, GLdouble y);
void gl30RasterPos2f(gl30Context* glc, GLfloat x, GLfloat y);
void gl30RasterPos2i(gl30Context* glc, GLint x, GLint y);
void gl30RasterPos2s(gl30Context* glc, GLshort x, GLshort y);
void gl30RasterPos3d(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl30RasterPos3f(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl30RasterPos3i(gl30Context* glc, GLint x, GLint y, GLint z);
void gl30RasterPos3s(gl30Context* glc, GLshort x, GLshort y, GLshort z);
void gl30RasterPos4d(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl30RasterPos4f(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl30RasterPos4i(gl30Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl30RasterPos4s(gl30Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl30RasterPos2dv(gl30Context* glc, GLdouble* v);
void gl30RasterPos2fv(gl30Context* glc, GLfloat* v);
void gl30RasterPos2iv(gl30Context* glc, GLint* v);
void gl30RasterPos2sv(gl30Context* glc, GLshort* v);
void gl30RasterPos3dv(gl30Context* glc, GLdouble* v);
void gl30RasterPos3fv(gl30Context* glc, GLfloat* v);
void gl30RasterPos3iv(gl30Context* glc, GLint* v);
void gl30RasterPos3sv(gl30Context* glc, GLshort* v);
void gl30RasterPos4dv(gl30Context* glc, GLdouble* v);
void gl30RasterPos4fv(gl30Context* glc, GLfloat* v);
void gl30RasterPos4iv(gl30Context* glc, GLint* v);
void gl30RasterPos4sv(gl30Context* glc, GLshort* v);
void gl30ReadBuffer(gl30Context* glc, GLenum mode);
void gl30ReadPixels(gl30Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl30Rectd(gl30Context* glc, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void gl30Rectf(gl30Context* glc, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void gl30Recti(gl30Context* glc, GLint x1, GLint y1, GLint x2, GLint y2);
void gl30Rects(gl30Context* glc, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void gl30Rectdv(gl30Context* glc, GLdouble* v1, GLdouble* v2);
void gl30Rectfv(gl30Context* glc, GLfloat* v1, GLfloat* v2);
void gl30Rectiv(gl30Context* glc, GLint* v1, GLint* v2);
void gl30Rectsv(gl30Context* glc, GLshort* v1, GLshort* v2);
GLint gl30RenderMode(gl30Context* glc, GLenum mode);
void gl30Rotated(gl30Context* glc, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void gl30Rotatef(gl30Context* glc, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void gl30Scaled(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl30Scalef(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl30Scissor(gl30Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl30SelectBuffer(gl30Context* glc, GLsizei size, GLuint* buffer);
void gl30ShadeModel(gl30Context* glc, GLenum mode);
void gl30StencilFunc(gl30Context* glc, GLenum func, GLint ref, GLuint mask);
void gl30StencilMask(gl30Context* glc, GLuint mask);
void gl30StencilOp(gl30Context* glc, GLenum fail, GLenum zfail, GLenum zpass);
void gl30TexCoord1d(gl30Context* glc, GLdouble s);
void gl30TexCoord1f(gl30Context* glc, GLfloat s);
void gl30TexCoord1i(gl30Context* glc, GLint s);
void gl30TexCoord1s(gl30Context* glc, GLshort s);
void gl30TexCoord2d(gl30Context* glc, GLdouble s, GLdouble t);
void gl30TexCoord2f(gl30Context* glc, GLfloat s, GLfloat t);
void gl30TexCoord2i(gl30Context* glc, GLint s, GLint t);
void gl30TexCoord2s(gl30Context* glc, GLshort s, GLshort t);
void gl30TexCoord3d(gl30Context* glc, GLdouble s, GLdouble t, GLdouble r);
void gl30TexCoord3f(gl30Context* glc, GLfloat s, GLfloat t, GLfloat r);
void gl30TexCoord3i(gl30Context* glc, GLint s, GLint t, GLint r);
void gl30TexCoord3s(gl30Context* glc, GLshort s, GLshort t, GLshort r);
void gl30TexCoord4d(gl30Context* glc, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl30TexCoord4f(gl30Context* glc, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl30TexCoord4i(gl30Context* glc, GLint s, GLint t, GLint r, GLint q);
void gl30TexCoord4s(gl30Context* glc, GLshort s, GLshort t, GLshort r, GLshort q);
void gl30TexCoord1dv(gl30Context* glc, GLdouble* v);
void gl30TexCoord1fv(gl30Context* glc, GLfloat* v);
void gl30TexCoord1iv(gl30Context* glc, GLint* v);
void gl30TexCoord1sv(gl30Context* glc, GLshort* v);
void gl30TexCoord2dv(gl30Context* glc, GLdouble* v);
void gl30TexCoord2fv(gl30Context* glc, GLfloat* v);
void gl30TexCoord2iv(gl30Context* glc, GLint* v);
void gl30TexCoord2sv(gl30Context* glc, GLshort* v);
void gl30TexCoord3dv(gl30Context* glc, GLdouble* v);
void gl30TexCoord3fv(gl30Context* glc, GLfloat* v);
void gl30TexCoord3iv(gl30Context* glc, GLint* v);
void gl30TexCoord3sv(gl30Context* glc, GLshort* v);
void gl30TexCoord4dv(gl30Context* glc, GLdouble* v);
void gl30TexCoord4fv(gl30Context* glc, GLfloat* v);
void gl30TexCoord4iv(gl30Context* glc, GLint* v);
void gl30TexCoord4sv(gl30Context* glc, GLshort* v);
void gl30TexEnvf(gl30Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl30TexEnvi(gl30Context* glc, GLenum target, GLenum pname, GLint param);
void gl30TexEnvfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30TexEnviv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30TexGend(gl30Context* glc, GLenum coord, GLenum pname, GLdouble param);
void gl30TexGenf(gl30Context* glc, GLenum coord, GLenum pname, GLfloat param);
void gl30TexGeni(gl30Context* glc, GLenum coord, GLenum pname, GLint param);
void gl30TexGendv(gl30Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl30TexGenfv(gl30Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl30TexGeniv(gl30Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl30TexImage1D(gl30Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl30TexImage2D(gl30Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl30TexParameterf(gl30Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl30TexParameteri(gl30Context* glc, GLenum target, GLenum pname, GLint param);
void gl30TexParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30TexParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30Translated(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl30Translatef(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl30Vertex2s(gl30Context* glc, GLshort x, GLshort y);
void gl30Vertex2i(gl30Context* glc, GLint x, GLint y);
void gl30Vertex2f(gl30Context* glc, GLfloat x, GLfloat y);
void gl30Vertex2d(gl30Context* glc, GLdouble x, GLdouble y);
void gl30Vertex3s(gl30Context* glc, GLshort x, GLshort y, GLshort z);
void gl30Vertex3i(gl30Context* glc, GLint x, GLint y, GLint z);
void gl30Vertex3f(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl30Vertex3d(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl30Vertex4s(gl30Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl30Vertex4i(gl30Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl30Vertex4f(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl30Vertex4d(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl30Viewport(gl30Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl30GetConvolutionParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30GetConvolutionParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
GLboolean gl30AreTexturesResident(gl30Context* glc, GLsizei n, GLuint* textures, GLboolean* residences);
void gl30ArrayElement(gl30Context* glc, GLint i);
void gl30DrawArrays(gl30Context* glc, GLenum mode, GLint first, GLsizei count);
void gl30DrawElements(gl30Context* glc, GLenum mode, GLsizei count, GLenum type, GLvoid* indices);
void gl30GetPointerv(gl30Context* glc, GLenum pname, GLvoid* params);
void gl30PolygonOffset(gl30Context* glc, GLfloat factor, GLfloat units);
void gl30CopyTexImage1D(gl30Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void gl30CopyTexImage2D(gl30Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void gl30CopyTexSubImage1D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void gl30CopyTexSubImage2D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl30BindTexture(gl30Context* glc, GLenum target, GLuint texture);
void gl30DeleteTextures(gl30Context* glc, GLsizei n, GLuint* textures);
void gl30GenTextures(gl30Context* glc, GLsizei n, GLuint* textures);
GLboolean gl30IsTexture(gl30Context* glc, GLuint texture);
void gl30ColorPointer(gl30Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30EnableClientState(gl30Context* glc, GLenum cap);
void gl30DisableClientState(gl30Context* glc, GLenum cap);
void gl30Indexub(gl30Context* glc, GLubyte c);
void gl30Indexubv(gl30Context* glc, GLubyte* c);
void gl30InterleavedArrays(gl30Context* glc, GLenum format, GLsizei stride, GLvoid* pointer);
void gl30NormalPointer(gl30Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30PushClientAttrib(gl30Context* glc, GLbitfield mask);
void gl30PrioritizeTextures(gl30Context* glc, GLsizei n, GLuint* textures, GLclampf* priorities);
void gl30PopClientAttrib(gl30Context* glc);
void gl30TexCoordPointer(gl30Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30TexSubImage1D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid* pixels);
void gl30TexSubImage2D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl30VertexPointer(gl30Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30ColorTable(gl30Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl30ColorTableParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30ColorTableParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30ColorSubTable(gl30Context* glc, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid* data);
void gl30ConvolutionFilter1D(gl30Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl30ConvolutionFilter2D(gl30Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl30ConvolutionParameterf(gl30Context* glc, GLenum target, GLenum pname, GLfloat params);
void gl30ConvolutionParameteri(gl30Context* glc, GLenum target, GLenum pname, GLint params);
void gl30CopyColorTable(gl30Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl30CopyColorSubTable(gl30Context* glc, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void gl30CopyConvolutionFilter1D(gl30Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl30CopyConvolutionFilter2D(gl30Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void gl30GetColorTable(gl30Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* table);
void gl30GetColorTableParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30GetColorTableParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30GetConvolutionFilter(gl30Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* image);
void gl30GetHistogram(gl30Context* glc, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
void gl30GetHistogramParameterfv(gl30Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl30GetHistogramParameteriv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
void gl30GetSeparableFilter(gl30Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span);
void gl30Histogram(gl30Context* glc, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void gl30Minmax(gl30Context* glc, GLenum target, GLenum internalformat, GLboolean sink);
void gl30MultiTexCoord1s(gl30Context* glc, GLenum target, GLshort s);
void gl30MultiTexCoord1i(gl30Context* glc, GLenum target, GLint s);
void gl30MultiTexCoord1f(gl30Context* glc, GLenum target, GLfloat s);
void gl30MultiTexCoord1d(gl30Context* glc, GLenum target, GLdouble s);
void gl30MultiTexCoord2s(gl30Context* glc, GLenum target, GLshort s, GLshort t);
void gl30MultiTexCoord2i(gl30Context* glc, GLenum target, GLint s, GLint t);
void gl30MultiTexCoord2f(gl30Context* glc, GLenum target, GLfloat s, GLfloat t);
void gl30MultiTexCoord2d(gl30Context* glc, GLenum target, GLdouble s, GLdouble t);
void gl30MultiTexCoord3s(gl30Context* glc, GLenum target, GLshort s, GLshort t, GLshort r);
void gl30MultiTexCoord3i(gl30Context* glc, GLenum target, GLint s, GLint t, GLint r);
void gl30MultiTexCoord3f(gl30Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r);
void gl30MultiTexCoord3d(gl30Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r);
void gl30MultiTexCoord4s(gl30Context* glc, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void gl30MultiTexCoord4i(gl30Context* glc, GLenum target, GLint s, GLint t, GLint r, GLint q);
void gl30MultiTexCoord4f(gl30Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl30MultiTexCoord4d(gl30Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl30MultiTexCoord1sv(gl30Context* glc, GLenum target, GLshort* v);
void gl30MultiTexCoord1iv(gl30Context* glc, GLenum target, GLint* v);
void gl30MultiTexCoord1fv(gl30Context* glc, GLenum target, GLfloat* v);
void gl30MultiTexCoord1dv(gl30Context* glc, GLenum target, GLdouble* v);
void gl30MultiTexCoord2sv(gl30Context* glc, GLenum target, GLshort* v);
void gl30MultiTexCoord2iv(gl30Context* glc, GLenum target, GLint* v);
void gl30MultiTexCoord2fv(gl30Context* glc, GLenum target, GLfloat* v);
void gl30MultiTexCoord2dv(gl30Context* glc, GLenum target, GLdouble* v);
void gl30MultiTexCoord3sv(gl30Context* glc, GLenum target, GLshort* v);
void gl30MultiTexCoord3iv(gl30Context* glc, GLenum target, GLint* v);
void gl30MultiTexCoord3fv(gl30Context* glc, GLenum target, GLfloat* v);
void gl30MultiTexCoord3dv(gl30Context* glc, GLenum target, GLdouble* v);
void gl30MultiTexCoord4sv(gl30Context* glc, GLenum target, GLshort* v);
void gl30MultiTexCoord4iv(gl30Context* glc, GLenum target, GLint* v);
void gl30MultiTexCoord4fv(gl30Context* glc, GLenum target, GLfloat* v);
void gl30MultiTexCoord4dv(gl30Context* glc, GLenum target, GLdouble* v);
void gl30ResetHistogram(gl30Context* glc, GLenum target);
void gl30ResetMinmax(gl30Context* glc, GLenum target);
void gl30SeparableFilter2D(gl30Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* row, GLvoid* column);
void gl30BlendColor(gl30Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl30BlendEquation(gl30Context* glc, GLenum mode);
void gl30CopyTexSubImage3D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl30DrawRangeElements(gl30Context* glc, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid* indices);
void gl30TexImage3D(gl30Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl30TexSubImage3D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* pixels);
void gl30ActiveTexture(gl30Context* glc, GLenum texture);
void gl30ClientActiveTexture(gl30Context* glc, GLenum texture);
void gl30CompressedTexImage1D(gl30Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid* data);
void gl30CompressedTexImage2D(gl30Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid* data);
void gl30CompressedTexImage3D(gl30Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid* data);
void gl30CompressedTexSubImage1D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid* data);
void gl30CompressedTexSubImage2D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid* data);
void gl30CompressedTexSubImage3D(gl30Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid* data);
void gl30GetCompressedTexImage(gl30Context* glc, GLenum target, GLint lod, GLvoid* img);
void gl30LoadTransposeMatrixd(gl30Context* glc, GLdouble* m);
void gl30LoadTransposeMatrixf(gl30Context* glc, GLdouble* m);
void gl30MultTransposeMatrixd(gl30Context* glc, GLdouble* m);
void gl30MultTransposeMatrixf(gl30Context* glc, GLfloat* m);
void gl30SampleCoverage(gl30Context* glc, GLclampf value, GLboolean invert);
void gl30BlendFuncSeparate(gl30Context* glc, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void gl30FogCoordPointer(gl30Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30FogCoordd(gl30Context* glc, GLdouble coord);
void gl30FogCoordf(gl30Context* glc, GLfloat coord);
void gl30FogCoorddv(gl30Context* glc, GLdouble* coord);
void gl30FogCoordfv(gl30Context* glc, GLfloat* coord);
void gl30MultiDrawArrays(gl30Context* glc, GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
void gl30MultiDrawElements(gl30Context* glc, GLenum mode, GLsizei* count, GLenum type, GLvoid* indices, GLsizei primcount);
void gl30PointParameterf(gl30Context* glc, GLenum pname, GLfloat param);
void gl30PointParameteri(gl30Context* glc, GLenum pname, GLint param);
void gl30SecondaryColor3b(gl30Context* glc, GLbyte red, GLbyte green, GLbyte blue);
void gl30SecondaryColor3s(gl30Context* glc, GLshort red, GLshort green, GLshort blue);
void gl30SecondaryColor3i(gl30Context* glc, GLint red, GLint green, GLint blue);
void gl30SecondaryColor3f(gl30Context* glc, GLfloat red, GLfloat green, GLfloat blue);
void gl30SecondaryColor3d(gl30Context* glc, GLdouble red, GLdouble green, GLdouble blue);
void gl30SecondaryColor3ub(gl30Context* glc, GLubyte red, GLubyte green, GLubyte blue);
void gl30SecondaryColor3us(gl30Context* glc, GLushort red, GLushort green, GLushort blue);
void gl30SecondaryColor3ui(gl30Context* glc, GLuint red, GLuint green, GLuint blue);
void gl30SecondaryColor3bv(gl30Context* glc, GLbyte* v);
void gl30SecondaryColor3sv(gl30Context* glc, GLshort* v);
void gl30SecondaryColor3iv(gl30Context* glc, GLint* v);
void gl30SecondaryColor3fv(gl30Context* glc, GLfloat* v);
void gl30SecondaryColor3dv(gl30Context* glc, GLdouble* v);
void gl30SecondaryColor3ubv(gl30Context* glc, GLubyte* v);
void gl30SecondaryColor3usv(gl30Context* glc, GLushort* v);
void gl30SecondaryColor3uiv(gl30Context* glc, GLuint* v);
void gl30SecondaryColorPointer(gl30Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl30WindowPos2s(gl30Context* glc, GLshort x, GLshort y);
void gl30WindowPos2i(gl30Context* glc, GLint x, GLint y);
void gl30WindowPos2f(gl30Context* glc, GLfloat x, GLfloat y);
void gl30WindowPos2d(gl30Context* glc, GLdouble x, GLdouble y);
void gl30WindowPos3s(gl30Context* glc, GLshort x, GLshort y, GLshort z);
void gl30WindowPos3i(gl30Context* glc, GLint x, GLint y, GLint z);
void gl30WindowPos3f(gl30Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl30WindowPos3d(gl30Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl30WindowPos2sv(gl30Context* glc, GLshort* v);
void gl30WindowPos2iv(gl30Context* glc, GLint* v);
void gl30WindowPos2fv(gl30Context* glc, GLfloat* v);
void gl30WindowPos2dv(gl30Context* glc, GLdouble* v);
void gl30WindowPos3sv(gl30Context* glc, GLshort* v);
void gl30WindowPos3iv(gl30Context* glc, GLint* v);
void gl30WindowPos3fv(gl30Context* glc, GLfloat* v);
void gl30WindowPos3dv(gl30Context* glc, GLdouble* v);
void gl30BeginQuery(gl30Context* glc, GLenum target, GLuint id);
void gl30BindBuffer(gl30Context* glc, GLenum target, GLuint buffer);
void gl30BufferData(gl30Context* glc, GLenum target, GLsizeiptr size, GLvoid* data, GLenum usage);
void gl30BufferSubData(gl30Context* glc, GLenum target, GLenum offset, GLsizeiptr size, GLvoid* data);
void gl30DeleteBuffers(gl30Context* glc, GLsizei n, GLuint* buffers);
void gl30DeleteQueries(gl30Context* glc, GLsizei n, GLuint* ids);
void gl30GenBuffers(gl30Context* glc, GLsizei n, GLuint* buffers);
void gl30GenQueries(gl30Context* glc, GLsizei n, GLuint* ids);
void gl30GetBufferParameteriv(gl30Context* glc, GLenum target, GLenum value, GLint* data);
void gl30GetBufferPointerv(gl30Context* glc, GLenum target, GLenum pname, GLvoid* params);
void gl30GetBufferSubData(gl30Context* glc, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
void gl30GetQueryObjectiv(gl30Context* glc, GLuint id, GLenum pname, GLint* params);
void gl30GetQueryObjectuiv(gl30Context* glc, GLuint id, GLenum pname, GLuint* params);
void gl30GetQueryiv(gl30Context* glc, GLenum target, GLenum pname, GLint* params);
GLboolean gl30IsBuffer(gl30Context* glc, GLuint buffer);
GLboolean gl30IsQuery(gl30Context* glc, GLuint id);
GLvoid* gl30MapBuffer(gl30Context* glc, GLenum target, GLenum access);
GLboolean gl30UnmapBuffer(gl30Context* glc, GLenum target);
void gl30AttachShader(gl30Context* glc, GLuint program, GLuint shader);
void gl30BindAttribLocation(gl30Context* glc, GLuint program, GLuint index, GLchar* name);
void gl30BlendEquationSeperate(gl30Context* glc, GLenum modeRGB, GLenum modeAlpha);
void gl30CompileShader(gl30Context* glc, GLuint shader);
GLuint gl30CreateProgram(gl30Context* glc);
GLuint gl30CreateShader(gl30Context* glc, GLenum shaderType);
void gl30DeleteProgram(gl30Context* glc, GLuint program);
void gl30DeleteShader(gl30Context* glc, GLuint shader);
void gl30DetachShader(gl30Context* glc, GLuint program, GLuint shader);
void gl30EnableVertexAttribArray(gl30Context* glc, GLuint index);
void gl30DisableVertexAttribArray(gl30Context* glc, GLuint index);
void gl30DrawBuffers(gl30Context* glc, GLsizei n, GLenum* bufs);
void gl30GetActiveAttrib(gl30Context* glc, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void gl30GetActiveUniform(gl30Context* glc, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void gl30GetAttachedShaders(gl30Context* glc, GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLint gl30GetAttribLocation(gl30Context* glc, GLuint program, GLchar* name);
void gl30GetProgramiv(gl30Context* glc, GLuint program, GLenum pname, GLint* params);
void gl30GetProgramInfoLog(gl30Context* glc, GLuint program, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
void gl30GetShaderiv(gl30Context* glc, GLuint program, GLenum pname, GLint* params);
void gl30GetShaderInfoLog(gl30Context* glc, GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
void gl30GetShaderSource(gl30Context* glc, GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
void gl30GetUniformfv(gl30Context* glc, GLuint program, GLint location, GLfloat* params);
void gl30GetUniformiv(gl30Context* glc, GLuint program, GLint location, GLint* params);
GLint gl30GetUniformLocation(gl30Context* glc, GLuint program, GLchar* name);
void gl30GetVertexAttribdv(gl30Context* glc, GLuint index, GLenum pname, GLdouble* params);
void gl30GetVertexAttribfv(gl30Context* glc, GLuint index, GLenum pname, GLfloat* params);
void gl30GetVertexAttribiv(gl30Context* glc, GLuint index, GLenum pname, GLint* params);
void gl30GetVertexAttribPointerv(gl30Context* glc, GLuint index, GLenum pname, GLvoid* pointer);
GLboolean gl30IsProgram(gl30Context* glc, GLuint program);
GLboolean gl30IsShader(gl30Context* glc, GLuint shader);
void gl30LinkProgram(gl30Context* glc, GLuint program);
void gl30ShaderSource(gl30Context* glc, GLuint shader, GLsizei count, GLchar** string, GLint* length);
void gl30StencilFuncSeparate(gl30Context* glc, GLenum face, GLenum func, GLint ref, GLuint mask);
void gl30StencilMaskSeparate(gl30Context* glc, GLenum face, GLuint mask);
void gl30StencilOpSeparate(gl30Context* glc, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void gl30Uniform1f(gl30Context* glc, GLint location, GLfloat v0);
void gl30Uniform2f(gl30Context* glc, GLint location, GLfloat v0, GLfloat v1);
void gl30Uniform3f(gl30Context* glc, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void gl30Uniform4f(gl30Context* glc, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void gl30Uniform1i(gl30Context* glc, GLint location, GLint v0);
void gl30Uniform2i(gl30Context* glc, GLint location, GLint v0, GLint v1);
void gl30Uniform3i(gl30Context* glc, GLint location, GLint v0, GLint v1, GLint v2);
void gl30Uniform4i(gl30Context* glc, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void gl30Uniform1ui(gl30Context* glc, GLint location, GLuint v0);
void gl30Uniform2ui(gl30Context* glc, GLint location, GLuint v0, GLuint v1);
void gl30Uniform3ui(gl30Context* glc, GLint location, GLuint v0, GLuint v1, GLuint v2);
void gl30Uniform4ui(gl30Context* glc, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void gl30Uniform1fv(gl30Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl30Uniform2fv(gl30Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl30Uniform3fv(gl30Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl30Uniform4fv(gl30Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl30Uniform1iv(gl30Context* glc, GLint location, GLsizei count, GLint* value);
void gl30Uniform2iv(gl30Context* glc, GLint location, GLsizei count, GLint* value);
void gl30Uniform3iv(gl30Context* glc, GLint location, GLsizei count, GLint* value);
void gl30Uniform4iv(gl30Context* glc, GLint location, GLsizei count, GLint* value);
void gl30Uniform1uiv(gl30Context* glc, GLint location, GLsizei count, GLuint* value);
void gl30Uniform2uiv(gl30Context* glc, GLint location, GLsizei count, GLuint* value);
void gl30Uniform3uiv(gl30Context* glc, GLint location, GLsizei count, GLuint* value);
void gl30Uniform4uiv(gl30Context* glc, GLint location, GLsizei count, GLuint* value);
void gl30UseProgram(gl30Context* glc, GLuint program);
void gl30ValidateProgram(gl30Context* glc, GLuint program);
void gl30VertexAttribPointer(gl30Context* glc, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer);
void gl30VertexAttrib1f(gl30Context* glc, GLuint index, GLfloat v0);
void gl30VertexAttrib1s(gl30Context* glc, GLuint index, GLshort v0);
void gl30VertexAttrib1d(gl30Context* glc, GLuint index, GLdouble v0);
void gl30VertexAttrib2f(gl30Context* glc, GLuint index, GLfloat v0, GLfloat v1);
void gl30VertexAttrib2s(gl30Context* glc, GLuint index, GLshort v0, GLshort v1);
void gl30VertexAttrib2d(gl30Context* glc, GLuint index, GLdouble v0, GLdouble v1);
void gl30VertexAttrib3f(gl30Context* glc, GLuint index, GLfloat v0, GLfloat v1, GLfloat v2);
void gl30VertexAttrib3s(gl30Context* glc, GLuint index, GLshort v0, GLshort v1, GLshort v2);
void gl30VertexAttrib3d(gl30Context* glc, GLuint index, GLdouble v0, GLdouble v1, GLdouble v2);
void gl30VertexAttrib4f(gl30Context* glc, GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void gl30VertexAttrib4s(gl30Context* glc, GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3);
void gl30VertexAttrib4d(gl30Context* glc, GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void gl30VertexAttrib4Nuv(gl30Context* glc, GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3);
void gl30VertexAttrib1fv(gl30Context* glc, GLuint index, GLfloat* v);
void gl30VertexAttrib1sv(gl30Context* glc, GLuint index, GLshort* v);
void gl30VertexAttrib1dv(gl30Context* glc, GLuint index, GLdouble* v);
void gl30VertexAttrib2fv(gl30Context* glc, GLuint index, GLfloat* v);
void gl30VertexAttrib2sv(gl30Context* glc, GLuint index, GLshort* v);
void gl30VertexAttrib2dv(gl30Context* glc, GLuint index, GLdouble* v);
void gl30VertexAttrib3fv(gl30Context* glc, GLuint index, GLfloat* v);
void gl30VertexAttrib3sv(gl30Context* glc, GLuint index, GLshort* v);
void gl30VertexAttrib3dv(gl30Context* glc, GLuint index, GLdouble* v);
void gl30VertexAttrib4fv(gl30Context* glc, GLuint index, GLfloat* v);
void gl30VertexAttrib4sv(gl30Context* glc, GLuint index, GLshort* v);
void gl30VertexAttrib4dv(gl30Context* glc, GLuint index, GLdouble* v);
void gl30VertexAttrib4iv(gl30Context* glc, GLuint index, GLint* v);
void gl30VertexAttrib4bv(gl30Context* glc, GLuint index, GLbyte* v);
void gl30VertexAttrib4ubv(gl30Context* glc, GLuint index, GLubyte* v);
void gl30VertexAttrib4usv(gl30Context* glc, GLuint index, GLushort* v);
void gl30VertexAttrib4uiv(gl30Context* glc, GLuint index, GLuint* v);
void gl30VertexAttrib4Nbv(gl30Context* glc, GLuint index, GLbyte* v);
void gl30VertexAttrib4Nsv(gl30Context* glc, GLuint index, GLshort* v);
void gl30VertexAttrib4Niv(gl30Context* glc, GLuint index, GLint* v);
void gl30VertexAttrib4Nubv(gl30Context* glc, GLuint index, GLubyte* v);
void gl30VertexAttrib4Nusv(gl30Context* glc, GLuint index, GLushort* v);
void gl30VertexAttrib4Nuiv(gl30Context* glc, GLuint index, GLuint* v);
void gl30UniformMatrix2fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix3fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix4fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix2x3fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix3x2fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix2x4fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix4x2fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix3x4fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl30UniformMatrix4x3fv(gl30Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
