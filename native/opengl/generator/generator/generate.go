// Copyright 2012 Lightpoke. All rights reserved.
// This source code is subject to the terms and
// conditions defined in the "License.txt" file.
//
// Code generated by this program is also under
// the above license.

// Package generator assists OpenGL wrapper creation.
package generator

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

const licenseHeader = `// Copyright 2012 Lightpoke. All rights reserved.
// This source code is subject to the terms and
// conditions defined in the "License.txt" file.
`

var specialProcedures = make(map[string]func(ctx, prefix string, p *Procedure) (name, args, body, returns string))

type Procedure struct {
	Constants map[string]string
	Name      string
	Returns   string
	Takes     []string
	Versions  []string
	Extension bool
	Reference string
}

func autoProcedure(ctx, prefix string, p *Procedure) (name, args, body, returns string) {
	glStripped := strings.TrimLeft(p.Name, "gl")

	name = glStripped

	argsBuf := new(bytes.Buffer)
	for i, arg := range p.Takes {
		if arg != "void" {
			split := strings.Split(arg, " ")

			if i != len(p.Takes)-1 {
				var futureSplit = strings.Split(p.Takes[i+1], " ")

				if split[0] == futureSplit[0] {
					fmt.Fprintf(argsBuf, "%s", cToGoName(split[1]))
				} else {
					fmt.Fprintf(argsBuf, "%s %s", cToGoName(split[1]), cToGoType(split[0]))
				}

				fmt.Fprintf(argsBuf, ", ")
			} else {
				fmt.Fprintf(argsBuf, "%s %s", cToGoName(split[1]), cToGoType(split[0]))
			}
		}
	}
	args = string(argsBuf.Bytes())

	if p.Returns != "void" {
		returns = cToGoType(p.Returns)
	}

	bodyBuf := new(bytes.Buffer)

	procArgNames := new(bytes.Buffer)
	fmt.Fprintf(procArgNames, "glc.context")

	for _, arg := range p.Takes {
		if arg != "void" {
			fmt.Fprintf(procArgNames, ", ")
			break
		}
	}

	for i, arg := range p.Takes {
		if arg != "void" {

			split := strings.Split(arg, " ")
			argType := split[0]
			argName := cToGoName(split[1])

			if strings.HasPrefix(cToGoType(argType), "*") {
				// Do unsafe conversion
				dereferences := len(argType)
				argType = strings.TrimRight(argType, "*")
				dereferences -= len(argType)

				fmt.Fprintf(procArgNames, "(")
				for i := 0; i < dereferences; i++ {
					fmt.Fprintf(procArgNames, "*")
				}
				fmt.Fprintf(procArgNames, "C.%s)(unsafe.Pointer(%s))", argType, argName)
			} else if argType == "GLvoid*" {
				fmt.Fprintf(procArgNames, "%s", argName)
			} else if argType == "GLboolean" {
				fmt.Fprintf(procArgNames, "boolToGL(%s)", argName)
			} else {
				fmt.Fprintf(procArgNames, "C.%s(%s)", argType, argName)
			}

			if i != len(p.Takes)-1 {
				fmt.Fprintf(procArgNames, ", ")
			}
		}
	}

	fmt.Fprintf(bodyBuf, "\t")

	var preConvert, postConvert string
	if p.Returns != "void" {
		preConvert, postConvert = cToGoConversion(p.Returns)
		fmt.Fprintf(bodyBuf, "return %s", preConvert)
	}

	fmt.Fprintf(bodyBuf, "C.%s%s(%s)", prefix, glStripped, procArgNames.Bytes())

	if p.Returns != "void" {
		fmt.Fprintf(bodyBuf, postConvert)
	}
	fmt.Fprintf(bodyBuf, "\n")

	body = string(bodyBuf.Bytes())
	return
}

func printSyntaxError(js string, err error) {
	syntax, ok := err.(*json.SyntaxError)
	if !ok {
		fmt.Println(err)
		return
	}

	start, end := strings.LastIndex(js[:syntax.Offset], "\n")+1, len(js)
	if idx := strings.Index(js[start:], "\n"); idx >= 0 {
		end = start + idx
	}

	line, pos := strings.Count(js[:start], "\n"), int(syntax.Offset)-start-1

	fmt.Printf("Error in line %d: %s \n", line, err)
	fmt.Printf("%s\n%s^", js[start:end], strings.Repeat(" ", pos))
}

func Generate(specFilePath, outputDir string) {
	var (
		file       *os.File
		err        error
		procedures []*Procedure
	)

	file, err = os.Open(specFilePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	data, err := ioutil.ReadAll(file)
	if err != nil {
		log.Fatal(err)
	}

	err = json.Unmarshal(data, &procedures)
	if err != nil {
		printSyntaxError(string(data), err)
		return
	}

	err = os.MkdirAll(outputDir, os.ModeDir)
	if err != nil {
		log.Fatal(err)
	}

	// Make list of all OpenGL versions determined from spec
	versions := make(map[string]bool)
	for _, p := range procedures {
		for _, v := range p.Versions {
			versions[v] = true
		}
	}

	for version, _ := range versions {
		var (
			versionProcs, possibleProcs []*Procedure
			constants                   map[string]string
		)

	ploop:
		for _, p := range procedures {
			if len(p.Constants) > 0 {
				constants = p.Constants
			}

			if len(p.Versions) == 0 {
				continue
			}

			// Any procedures marked as extensions we simply consider to be supported in any OpenGL
			// version and just trust that the user is smart enough to check weather it is valid
			// and supported.
			//
			// Here we find all procedures marked as extensions and add them as valid procedures.
			if p.Extension {
				possibleProcs = append(possibleProcs, p)
				continue ploop
			}

			// If the procedure's version string matches the version we are generating, then the
			// procedure is an required procedure for the version to be supported (i.e. the proc
			// must exist for the OpenGL version to be considered 'supported').
			for _, v := range p.Versions {
				if v == version {
					versionProcs = append(versionProcs, p)
					continue ploop
				}
			}

			// Now we can locate all procedures that are not removed yet, as those are still valid
			// (but not strictly required) for this OpenGL version we are generating.
			depreciationVersionStr := p.Versions[len(p.Versions)-1]
			if depreciationVersionStr == "1.2.1" {
				depreciationVersionStr = "1.21"
			}
			depreciationVersion, err := strconv.ParseFloat(depreciationVersionStr, 64)
			if err != nil {
				log.Printf("1. Invalid version string %q for procedure %q (Cannot parse string)\n", depreciationVersionStr, p.Name)
				continue ploop
			}

			versionStr := version
			if versionStr == "1.2.1" {
				versionStr = "1.21"
			}
			genVersion, err := strconv.ParseFloat(versionStr, 64)
			if err != nil {
				log.Printf("2. Invalid version string %q for procedure %q (Cannot parse string)\n", versionStr, p.Name)
				continue ploop
			}

			// genVersion = 1.0/2.1/3.0, depreciationVersion = 3.0
			//
			// AKA 'max' version which proc can be used is _AT_ 3.0.
			if genVersion <= depreciationVersion {
				possibleProcs = append(possibleProcs, p)
				continue ploop
			}
		}

		versionWithoutDots := strings.Replace(version, ".", "", -1)
		packageDir := filepath.Join(outputDir, version)

		err = os.MkdirAll(packageDir, os.ModeDir)
		if err != nil {
			log.Fatal(err)
		}

		prefix := "gl" + versionWithoutDots

		// Generate (.h) header
		generateHeader(packageDir, prefix, versionProcs, possibleProcs)

		// Generate (.c) source
		generateC(packageDir, prefix, version, versionWithoutDots, versionProcs, possibleProcs)

		// Generate (.go) source
		generateGo(packageDir, prefix, version, versionWithoutDots, versionProcs, possibleProcs, constants, false)

		// Generate (.go) traceback source
		generateGo(packageDir, prefix, version, versionWithoutDots, versionProcs, possibleProcs, constants, true)
	}
}
