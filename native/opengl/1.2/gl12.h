// Copyright 2012 Lightpoke. All rights reserved.
// This source code is subject to the terms and
// conditions defined in the "License.txt" file.

#include <stdbool.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdint.h>

typedef char GLchar;
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;

typedef void(*gl12PAccum)(GLenum, GLfloat);
typedef void(*gl12PAlphaFunc)(GLenum, GLclampf);
typedef void(*gl12PBegin)(GLenum);
typedef void(*gl12PEnd)();
typedef void(*gl12PBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, GLubyte*);
typedef void(*gl12PBlendFunc)(GLenum, GLenum);
typedef void(*gl12PCallList)(GLuint);
typedef void(*gl12PCallLists)(GLsizei, GLenum, GLvoid*);
typedef void(*gl12PClear)(GLbitfield);
typedef void(*gl12PClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PClearColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl12PClearDepth)(GLclampd);
typedef void(*gl12PClearIndex)(GLfloat);
typedef void(*gl12PClearStencil)(GLint);
typedef void(*gl12PClipPlane)(GLenum, GLdouble*);
typedef void(*gl12PColor3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl12PColor3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PColor3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PColor3i)(GLint, GLint, GLint);
typedef void(*gl12PColor3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PColor3ub)(GLubyte, GLubyte, GLubyte);
typedef void(*gl12PColor3ui)(GLuint, GLuint, GLuint);
typedef void(*gl12PColor3us)(GLushort, GLushort, GLushort);
typedef void(*gl12PColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
typedef void(*gl12PColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PColor4i)(GLint, GLint, GLint, GLint);
typedef void(*gl12PColor4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
typedef void(*gl12PColor4ui)(GLuint, GLuint, GLuint, GLuint);
typedef void(*gl12PColor4us)(GLushort, GLushort, GLushort, GLushort);
typedef void(*gl12PColor3bv)(GLbyte*);
typedef void(*gl12PColor3dv)(GLdouble*);
typedef void(*gl12PColor3fv)(GLfloat*);
typedef void(*gl12PColor3iv)(GLint*);
typedef void(*gl12PColor3sv)(GLshort*);
typedef void(*gl12PColor3ubv)(GLubyte*);
typedef void(*gl12PColor3uiv)(GLuint*);
typedef void(*gl12PColor3usv)(GLushort*);
typedef void(*gl12PColor4bv)(GLbyte*);
typedef void(*gl12PColor4dv)(GLdouble*);
typedef void(*gl12PColor4fv)(GLfloat*);
typedef void(*gl12PColor4iv)(GLint*);
typedef void(*gl12PColor4sv)(GLshort*);
typedef void(*gl12PColor4ubv)(GLubyte*);
typedef void(*gl12PColor4uiv)(GLuint*);
typedef void(*gl12PColor4usv)(GLushort*);
typedef void(*gl12PColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
typedef void(*gl12PColorMaterial)(GLenum, GLenum);
typedef void(*gl12PCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
typedef void(*gl12PCullFace)(GLenum);
typedef void(*gl12PDeleteLists)(GLuint, GLsizei);
typedef void(*gl12PDepthFunc)(GLenum);
typedef void(*gl12PDepthMask)(GLboolean);
typedef void(*gl12PDepthRange)(GLclampd, GLclampd);
typedef void(*gl12PEnable)(GLenum);
typedef void(*gl12PDisable)(GLenum);
typedef void(*gl12PDrawBuffer)(GLenum);
typedef void(*gl12PDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PEdgeFlag)(GLboolean);
typedef void(*gl12PEdgeFlagv)(GLboolean*);
typedef void(*gl12PEdgeFlagPointer)(GLsizei, GLvoid*);
typedef void(*gl12PEvalCoord1d)(GLdouble);
typedef void(*gl12PEvalCoord1f)(GLfloat);
typedef void(*gl12PEvalCoord2d)(GLdouble, GLdouble);
typedef void(*gl12PEvalCoord2f)(GLfloat, GLfloat);
typedef void(*gl12PEvalCoord1dv)(GLdouble*);
typedef void(*gl12PEvalCoord1fv)(GLfloat*);
typedef void(*gl12PEvalCoord2dv)(GLdouble*);
typedef void(*gl12PEvalCoord2fv)(GLfloat*);
typedef void(*gl12PEvalMesh1)(GLenum, GLint, GLint);
typedef void(*gl12PEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl12PEvalPoint1)(GLint);
typedef void(*gl12PEvalPoint2)(GLint, GLint);
typedef void(*gl12PFeedbackBuffer)(GLsizei, GLenum, GLfloat*);
typedef void(*gl12PFinish)();
typedef void(*gl12PFlush)();
typedef void(*gl12PFogf)(GLenum, GLfloat);
typedef void(*gl12PFogi)(GLenum, GLint);
typedef void(*gl12PFogfv)(GLenum, GLfloat*);
typedef void(*gl12PFogiv)(GLenum, GLint*);
typedef void(*gl12PFrontFace)(GLenum);
typedef void(*gl12PFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef GLuint(*gl12PGenLists)(GLsizei);
typedef void(*gl12PGetBooleanv)(GLenum, GLboolean*);
typedef void(*gl12PGetDoublev)(GLenum, GLdouble*);
typedef void(*gl12PGetFloatv)(GLenum, GLfloat*);
typedef void(*gl12PGetIntegerv)(GLenum, GLint*);
typedef void(*gl12PGetClipPlane)(GLenum, GLdouble*);
typedef GLenum(*gl12PGetError)();
typedef void(*gl12PGetLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetMapdv)(GLenum, GLenum, GLdouble*);
typedef void(*gl12PGetMapfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetMapiv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetPixelMapfv)(GLenum, GLfloat*);
typedef void(*gl12PGetPixelMapuiv)(GLenum, GLuint*);
typedef void(*gl12PGetPixelMapusv)(GLenum, GLushort*);
typedef void(*gl12PGetPolygonStipple)(GLubyte*);
typedef GLubyte*(*gl12PGetString)(GLenum);
typedef void(*gl12PGetTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl12PGetTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetTexImage)(GLenum, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl12PGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat*);
typedef void(*gl12PGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint*);
typedef void(*gl12PGetTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PHint)(GLenum, GLenum);
typedef void(*gl12PIndexd)(GLdouble);
typedef void(*gl12PIndexf)(GLfloat);
typedef void(*gl12PIndexi)(GLint);
typedef void(*gl12PIndexs)(GLshort);
typedef void(*gl12PIndexdv)(GLdouble*);
typedef void(*gl12PIndexfv)(GLfloat*);
typedef void(*gl12PIndexiv)(GLint*);
typedef void(*gl12PIndexsv)(GLshort*);
typedef void(*gl12PIndexMask)(GLuint);
typedef void(*gl12PIndexPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl12PInitNames)();
typedef void(*gl12PIsEnabled)(GLenum);
typedef GLboolean(*gl12PIsList)(GLuint);
typedef void(*gl12PLightf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PLighti)(GLenum, GLenum, GLint);
typedef void(*gl12PLightfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PLightiv)(GLenum, GLenum, GLint*);
typedef void(*gl12PLightModelf)(GLenum, GLfloat);
typedef void(*gl12PLightModeli)(GLenum, GLint);
typedef void(*gl12PLightModelfv)(GLenum, GLfloat*);
typedef void(*gl12PLightModeliv)(GLenum, GLint*);
typedef void(*gl12PLineStipple)(GLint, GLushort);
typedef void(*gl12PLineWidth)(GLfloat);
typedef void(*gl12PListBase)(GLuint);
typedef void(*gl12PLoadIdentity)();
typedef void(*gl12PLoadMatrixd)(GLdouble*);
typedef void(*gl12PLoadMatrixf)(GLfloat*);
typedef void(*gl12PLoadName)(GLuint);
typedef void(*gl12PLogicOp)(GLenum);
typedef void(*gl12PMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl12PMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl12PMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble*);
typedef void(*gl12PMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat*);
typedef void(*gl12PMapGrid1d)(GLint, GLdouble, GLdouble);
typedef void(*gl12PMapGrid1f)(GLint, GLfloat, GLfloat);
typedef void(*gl12PMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
typedef void(*gl12PMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
typedef void(*gl12PMaterialf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PMateriali)(GLenum, GLenum, GLint);
typedef void(*gl12PMaterialfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PMaterialiv)(GLenum, GLenum, GLint*);
typedef void(*gl12PMatrixMode)(GLenum);
typedef void(*gl12PMultMatrixd)(GLdouble*);
typedef void(*gl12PMultMatrixf)(GLfloat*);
typedef void(*gl12PNewList)(GLuint, GLenum);
typedef void(*gl12PEndList)();
typedef void(*gl12PNormal3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl12PNormal3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PNormal3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PNormal3i)(GLint, GLint, GLint);
typedef void(*gl12PNormal3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PNormal3bv)(GLbyte*);
typedef void(*gl12PNormal3dv)(GLdouble*);
typedef void(*gl12PNormal3fv)(GLfloat*);
typedef void(*gl12PNormal3iv)(GLint*);
typedef void(*gl12PNormal3sv)(GLshort*);
typedef void(*gl12POrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PPassThrough)(GLfloat);
typedef void(*gl12PPixelMapfv)(GLenum, GLsizei, GLfloat*);
typedef void(*gl12PPixelMapuiv)(GLenum, GLsizei, GLuint*);
typedef void(*gl12PPixelMapusv)(GLenum, GLsizei, GLushort*);
typedef void(*gl12PPixelStoref)(GLenum, GLfloat);
typedef void(*gl12PPixelStorei)(GLenum, GLint);
typedef void(*gl12PPixelTransferf)(GLenum, GLfloat);
typedef void(*gl12PPixelTransferi)(GLenum, GLint);
typedef void(*gl12PPixelZoom)(GLfloat, GLfloat);
typedef void(*gl12PPointSize)(GLfloat);
typedef void(*gl12PPolygonMode)(GLenum, GLenum);
typedef void(*gl12PPolygonStipple)(GLubyte*);
typedef void(*gl12PPushAttrib)(GLbitfield);
typedef void(*gl12PPopAttrib)();
typedef void(*gl12PPushMatrix)();
typedef void(*gl12PPopMatrix)();
typedef void(*gl12PPushName)(GLuint);
typedef void(*gl12PPopName)();
typedef void(*gl12PRasterPos2d)(GLdouble, GLdouble);
typedef void(*gl12PRasterPos2f)(GLfloat, GLfloat);
typedef void(*gl12PRasterPos2i)(GLint, GLint);
typedef void(*gl12PRasterPos2s)(GLshort, GLshort);
typedef void(*gl12PRasterPos3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PRasterPos3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PRasterPos3i)(GLint, GLint, GLint);
typedef void(*gl12PRasterPos3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PRasterPos4i)(GLint, GLint, GLint, GLint);
typedef void(*gl12PRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PRasterPos2dv)(GLdouble*);
typedef void(*gl12PRasterPos2fv)(GLfloat*);
typedef void(*gl12PRasterPos2iv)(GLint*);
typedef void(*gl12PRasterPos2sv)(GLshort*);
typedef void(*gl12PRasterPos3dv)(GLdouble*);
typedef void(*gl12PRasterPos3fv)(GLfloat*);
typedef void(*gl12PRasterPos3iv)(GLint*);
typedef void(*gl12PRasterPos3sv)(GLshort*);
typedef void(*gl12PRasterPos4dv)(GLdouble*);
typedef void(*gl12PRasterPos4fv)(GLfloat*);
typedef void(*gl12PRasterPos4iv)(GLint*);
typedef void(*gl12PRasterPos4sv)(GLshort*);
typedef void(*gl12PReadBuffer)(GLenum);
typedef void(*gl12PReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PRecti)(GLint, GLint, GLint, GLint);
typedef void(*gl12PRects)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PRectdv)(GLdouble*, GLdouble*);
typedef void(*gl12PRectfv)(GLfloat*, GLfloat*);
typedef void(*gl12PRectiv)(GLint*, GLint*);
typedef void(*gl12PRectsv)(GLshort*, GLshort*);
typedef GLint(*gl12PRenderMode)(GLenum);
typedef void(*gl12PRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PScaled)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PScalef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PScissor)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl12PSelectBuffer)(GLsizei, GLuint*);
typedef void(*gl12PShadeModel)(GLenum);
typedef void(*gl12PStencilFunc)(GLenum, GLint, GLuint);
typedef void(*gl12PStencilMask)(GLuint);
typedef void(*gl12PStencilOp)(GLenum, GLenum, GLenum);
typedef void(*gl12PTexCoord1d)(GLdouble);
typedef void(*gl12PTexCoord1f)(GLfloat);
typedef void(*gl12PTexCoord1i)(GLint);
typedef void(*gl12PTexCoord1s)(GLshort);
typedef void(*gl12PTexCoord2d)(GLdouble, GLdouble);
typedef void(*gl12PTexCoord2f)(GLfloat, GLfloat);
typedef void(*gl12PTexCoord2i)(GLint, GLint);
typedef void(*gl12PTexCoord2s)(GLshort, GLshort);
typedef void(*gl12PTexCoord3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PTexCoord3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PTexCoord3i)(GLint, GLint, GLint);
typedef void(*gl12PTexCoord3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PTexCoord4i)(GLint, GLint, GLint, GLint);
typedef void(*gl12PTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PTexCoord1dv)(GLdouble*);
typedef void(*gl12PTexCoord1fv)(GLfloat*);
typedef void(*gl12PTexCoord1iv)(GLint*);
typedef void(*gl12PTexCoord1sv)(GLshort*);
typedef void(*gl12PTexCoord2dv)(GLdouble*);
typedef void(*gl12PTexCoord2fv)(GLfloat*);
typedef void(*gl12PTexCoord2iv)(GLint*);
typedef void(*gl12PTexCoord2sv)(GLshort*);
typedef void(*gl12PTexCoord3dv)(GLdouble*);
typedef void(*gl12PTexCoord3fv)(GLfloat*);
typedef void(*gl12PTexCoord3iv)(GLint*);
typedef void(*gl12PTexCoord3sv)(GLshort*);
typedef void(*gl12PTexCoord4dv)(GLdouble*);
typedef void(*gl12PTexCoord4fv)(GLfloat*);
typedef void(*gl12PTexCoord4iv)(GLint*);
typedef void(*gl12PTexCoord4sv)(GLshort*);
typedef void(*gl12PTexEnvf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PTexEnvi)(GLenum, GLenum, GLint);
typedef void(*gl12PTexEnvfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PTexEnviv)(GLenum, GLenum, GLint*);
typedef void(*gl12PTexGend)(GLenum, GLenum, GLdouble);
typedef void(*gl12PTexGenf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PTexGeni)(GLenum, GLenum, GLint);
typedef void(*gl12PTexGendv)(GLenum, GLenum, GLdouble*);
typedef void(*gl12PTexGenfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PTexGeniv)(GLenum, GLenum, GLint*);
typedef void(*gl12PTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl12PTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl12PTexParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PTexParameteri)(GLenum, GLenum, GLint);
typedef void(*gl12PTexParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PTexParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PTranslated)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PTranslatef)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PVertex2s)(GLshort, GLshort);
typedef void(*gl12PVertex2i)(GLint, GLint);
typedef void(*gl12PVertex2f)(GLfloat, GLfloat);
typedef void(*gl12PVertex2d)(GLdouble, GLdouble);
typedef void(*gl12PVertex3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PVertex3i)(GLint, GLint, GLint);
typedef void(*gl12PVertex3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PVertex3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PVertex4s)(GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PVertex4i)(GLint, GLint, GLint, GLint);
typedef void(*gl12PVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PViewport)(GLint, GLint, GLsizei, GLsizei);
typedef void(*gl12PGetConvolutionParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetConvolutionParameteriv)(GLenum, GLenum, GLint*);
typedef GLboolean(*gl12PAreTexturesResident)(GLsizei, GLuint*, GLboolean*);
typedef void(*gl12PArrayElement)(GLint);
typedef void(*gl12PDrawArrays)(GLenum, GLint, GLsizei);
typedef void(*gl12PDrawElements)(GLenum, GLsizei, GLenum, GLvoid*);
typedef void(*gl12PGetPointerv)(GLenum, GLvoid*);
typedef void(*gl12PPolygonOffset)(GLfloat, GLfloat);
typedef void(*gl12PCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
typedef void(*gl12PCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
typedef void(*gl12PCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
typedef void(*gl12PCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl12PBindTexture)(GLenum, GLuint);
typedef void(*gl12PDeleteTextures)(GLsizei, GLuint*);
typedef void(*gl12PGenTextures)(GLsizei, GLuint*);
typedef GLboolean(*gl12PIsTexture)(GLuint);
typedef void(*gl12PColorPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PEnableClientState)(GLenum);
typedef void(*gl12PDisableClientState)(GLenum);
typedef void(*gl12PIndexub)(GLubyte);
typedef void(*gl12PIndexubv)(GLubyte*);
typedef void(*gl12PInterleavedArrays)(GLenum, GLsizei, GLvoid*);
typedef void(*gl12PNormalPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl12PPushClientAttrib)(GLbitfield);
typedef void(*gl12PPrioritizeTextures)(GLsizei, GLuint*, GLclampf*);
typedef void(*gl12PPopClientAttrib)();
typedef void(*gl12PTexCoordPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PVertexPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PConvolutionParameterf)(GLenum, GLenum, GLfloat);
typedef void(*gl12PConvolutionParameteri)(GLenum, GLenum, GLint);
typedef void(*gl12PCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl12PCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
typedef void(*gl12PCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
typedef void(*gl12PCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl12PGetColorTable)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl12PGetColorTableParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetColorTableParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetConvolutionFilter)(GLenum, GLenum, GLenum, GLvoid*);
typedef void(*gl12PGetHistogram)(GLenum, GLboolean, GLenum, GLenum, GLvoid*);
typedef void(*gl12PGetHistogramParameterfv)(GLenum, GLenum, GLfloat*);
typedef void(*gl12PGetHistogramParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetSeparableFilter)(GLenum, GLenum, GLenum, GLvoid*, GLvoid*, GLvoid*);
typedef void(*gl12PHistogram)(GLenum, GLsizei, GLenum, GLboolean);
typedef void(*gl12PMinmax)(GLenum, GLenum, GLboolean);
typedef void(*gl12PMultiTexCoord1s)(GLenum, GLshort);
typedef void(*gl12PMultiTexCoord1i)(GLenum, GLint);
typedef void(*gl12PMultiTexCoord1f)(GLenum, GLfloat);
typedef void(*gl12PMultiTexCoord1d)(GLenum, GLdouble);
typedef void(*gl12PMultiTexCoord2s)(GLenum, GLshort, GLshort);
typedef void(*gl12PMultiTexCoord2i)(GLenum, GLint, GLint);
typedef void(*gl12PMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
typedef void(*gl12PMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
typedef void(*gl12PMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
typedef void(*gl12PMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
typedef void(*gl12PMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
typedef void(*gl12PMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PMultiTexCoord1sv)(GLenum, GLshort*);
typedef void(*gl12PMultiTexCoord1iv)(GLenum, GLint*);
typedef void(*gl12PMultiTexCoord1fv)(GLenum, GLfloat*);
typedef void(*gl12PMultiTexCoord1dv)(GLenum, GLdouble*);
typedef void(*gl12PMultiTexCoord2sv)(GLenum, GLshort*);
typedef void(*gl12PMultiTexCoord2iv)(GLenum, GLint*);
typedef void(*gl12PMultiTexCoord2fv)(GLenum, GLfloat*);
typedef void(*gl12PMultiTexCoord2dv)(GLenum, GLdouble*);
typedef void(*gl12PMultiTexCoord3sv)(GLenum, GLshort*);
typedef void(*gl12PMultiTexCoord3iv)(GLenum, GLint*);
typedef void(*gl12PMultiTexCoord3fv)(GLenum, GLfloat*);
typedef void(*gl12PMultiTexCoord3dv)(GLenum, GLdouble*);
typedef void(*gl12PMultiTexCoord4sv)(GLenum, GLshort*);
typedef void(*gl12PMultiTexCoord4iv)(GLenum, GLint*);
typedef void(*gl12PMultiTexCoord4fv)(GLenum, GLfloat*);
typedef void(*gl12PMultiTexCoord4dv)(GLenum, GLdouble*);
typedef void(*gl12PResetHistogram)(GLenum);
typedef void(*gl12PResetMinmax)(GLenum);
typedef void(*gl12PSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid*, GLvoid*);
typedef void(*gl12PBlendColor)(GLclampf, GLclampf, GLclampf, GLclampf);
typedef void(*gl12PBlendEquation)(GLenum);
typedef void(*gl12PCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
typedef void(*gl12PDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, GLvoid*);
typedef void(*gl12PTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid*);
typedef void(*gl12PTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
typedef void(*gl12PActiveTexture)(GLenum);
typedef void(*gl12PClientActiveTexture)(GLenum);
typedef void(*gl12PCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl12PCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl12PCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, GLvoid*);
typedef void(*gl12PCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PGetCompressedTexImage)(GLenum, GLint, GLvoid*);
typedef void(*gl12PLoadTransposeMatrixd)(GLdouble*);
typedef void(*gl12PLoadTransposeMatrixf)(GLdouble*);
typedef void(*gl12PMultTransposeMatrixd)(GLdouble*);
typedef void(*gl12PMultTransposeMatrixf)(GLfloat*);
typedef void(*gl12PSampleCoverage)(GLclampf, GLboolean);
typedef void(*gl12PBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
typedef void(*gl12PFogCoordPointer)(GLenum, GLsizei, GLvoid*);
typedef void(*gl12PFogCoordd)(GLdouble);
typedef void(*gl12PFogCoordf)(GLfloat);
typedef void(*gl12PFogCoorddv)(GLdouble*);
typedef void(*gl12PFogCoordfv)(GLfloat*);
typedef void(*gl12PMultiDrawArrays)(GLenum, GLint*, GLsizei*, GLsizei);
typedef void(*gl12PMultiDrawElements)(GLenum, GLsizei*, GLenum, GLvoid*, GLsizei);
typedef void(*gl12PPointParameterf)(GLenum, GLfloat);
typedef void(*gl12PPointParameteri)(GLenum, GLint);
typedef void(*gl12PSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
typedef void(*gl12PSecondaryColor3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PSecondaryColor3i)(GLint, GLint, GLint);
typedef void(*gl12PSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
typedef void(*gl12PSecondaryColor3us)(GLushort, GLushort, GLushort);
typedef void(*gl12PSecondaryColor3ui)(GLuint, GLuint, GLuint);
typedef void(*gl12PSecondaryColor3bv)(GLbyte*);
typedef void(*gl12PSecondaryColor3sv)(GLshort*);
typedef void(*gl12PSecondaryColor3iv)(GLint*);
typedef void(*gl12PSecondaryColor3fv)(GLfloat*);
typedef void(*gl12PSecondaryColor3dv)(GLdouble*);
typedef void(*gl12PSecondaryColor3ubv)(GLubyte*);
typedef void(*gl12PSecondaryColor3usv)(GLushort*);
typedef void(*gl12PSecondaryColor3uiv)(GLuint*);
typedef void(*gl12PSecondaryColorPointer)(GLint, GLenum, GLsizei, GLvoid*);
typedef void(*gl12PWindowPos2s)(GLshort, GLshort);
typedef void(*gl12PWindowPos2i)(GLint, GLint);
typedef void(*gl12PWindowPos2f)(GLfloat, GLfloat);
typedef void(*gl12PWindowPos2d)(GLdouble, GLdouble);
typedef void(*gl12PWindowPos3s)(GLshort, GLshort, GLshort);
typedef void(*gl12PWindowPos3i)(GLint, GLint, GLint);
typedef void(*gl12PWindowPos3f)(GLfloat, GLfloat, GLfloat);
typedef void(*gl12PWindowPos3d)(GLdouble, GLdouble, GLdouble);
typedef void(*gl12PWindowPos2sv)(GLshort*);
typedef void(*gl12PWindowPos2iv)(GLint*);
typedef void(*gl12PWindowPos2fv)(GLfloat*);
typedef void(*gl12PWindowPos2dv)(GLdouble*);
typedef void(*gl12PWindowPos3sv)(GLshort*);
typedef void(*gl12PWindowPos3iv)(GLint*);
typedef void(*gl12PWindowPos3fv)(GLfloat*);
typedef void(*gl12PWindowPos3dv)(GLdouble*);
typedef void(*gl12PBeginQuery)(GLenum, GLuint);
typedef void(*gl12PBindBuffer)(GLenum, GLuint);
typedef void(*gl12PBufferData)(GLenum, GLsizeiptr, GLvoid*, GLenum);
typedef void(*gl12PBufferSubData)(GLenum, GLenum, GLsizeiptr, GLvoid*);
typedef void(*gl12PDeleteBuffers)(GLsizei, GLuint*);
typedef void(*gl12PDeleteQueries)(GLsizei, GLuint*);
typedef void(*gl12PGenBuffers)(GLsizei, GLuint*);
typedef void(*gl12PGenQueries)(GLsizei, GLuint*);
typedef void(*gl12PGetBufferParameteriv)(GLenum, GLenum, GLint*);
typedef void(*gl12PGetBufferPointerv)(GLenum, GLenum, GLvoid*);
typedef void(*gl12PGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, GLvoid*);
typedef void(*gl12PGetQueryObjectiv)(GLuint, GLenum, GLint*);
typedef void(*gl12PGetQueryObjectuiv)(GLuint, GLenum, GLuint*);
typedef void(*gl12PGetQueryiv)(GLenum, GLenum, GLint*);
typedef GLboolean(*gl12PIsBuffer)(GLuint);
typedef GLboolean(*gl12PIsQuery)(GLuint);
typedef GLvoid*(*gl12PMapBuffer)(GLenum, GLenum);
typedef GLboolean(*gl12PUnmapBuffer)(GLenum);
typedef void(*gl12PAttachShader)(GLuint, GLuint);
typedef void(*gl12PBindAttribLocation)(GLuint, GLuint, GLchar*);
typedef void(*gl12PBlendEquationSeperate)(GLenum, GLenum);
typedef void(*gl12PCompileShader)(GLuint);
typedef GLuint(*gl12PCreateProgram)();
typedef GLuint(*gl12PCreateShader)(GLenum);
typedef void(*gl12PDeleteProgram)(GLuint);
typedef void(*gl12PDeleteShader)(GLuint);
typedef void(*gl12PDetachShader)(GLuint, GLuint);
typedef void(*gl12PEnableVertexAttribArray)(GLuint);
typedef void(*gl12PDisableVertexAttribArray)(GLuint);
typedef void(*gl12PDrawBuffers)(GLsizei, GLenum*);
typedef void(*gl12PGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
typedef void(*gl12PGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
typedef void(*gl12PGetAttachedShaders)(GLuint, GLsizei, GLsizei*, GLuint*);
typedef GLint(*gl12PGetAttribLocation)(GLuint, GLchar*);
typedef void(*gl12PGetProgramiv)(GLuint, GLenum, GLint*);
typedef void(*gl12PGetProgramInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl12PGetShaderiv)(GLuint, GLenum, GLint*);
typedef void(*gl12PGetShaderInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl12PGetShaderSource)(GLuint, GLsizei, GLsizei*, GLchar*);
typedef void(*gl12PGetUniformfv)(GLuint, GLint, GLfloat*);
typedef void(*gl12PGetUniformiv)(GLuint, GLint, GLint*);
typedef GLint(*gl12PGetUniformLocation)(GLuint, GLchar*);
typedef void(*gl12PGetVertexAttribdv)(GLuint, GLenum, GLdouble*);
typedef void(*gl12PGetVertexAttribfv)(GLuint, GLenum, GLfloat*);
typedef void(*gl12PGetVertexAttribiv)(GLuint, GLenum, GLint*);
typedef void(*gl12PGetVertexAttribPointerv)(GLuint, GLenum, GLvoid*);
typedef GLboolean(*gl12PIsProgram)(GLuint);
typedef GLboolean(*gl12PIsShader)(GLuint);
typedef void(*gl12PLinkProgram)(GLuint);
typedef void(*gl12PShaderSource)(GLuint, GLsizei, GLchar**, GLint*);
typedef void(*gl12PStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
typedef void(*gl12PStencilMaskSeparate)(GLenum, GLuint);
typedef void(*gl12PStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
typedef void(*gl12PUniform1f)(GLint, GLfloat);
typedef void(*gl12PUniform2f)(GLint, GLfloat, GLfloat);
typedef void(*gl12PUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PUniform1i)(GLint, GLint);
typedef void(*gl12PUniform2i)(GLint, GLint, GLint);
typedef void(*gl12PUniform3i)(GLint, GLint, GLint, GLint);
typedef void(*gl12PUniform4i)(GLint, GLint, GLint, GLint, GLint);
typedef void(*gl12PUniform1ui)(GLint, GLuint);
typedef void(*gl12PUniform2ui)(GLint, GLuint, GLuint);
typedef void(*gl12PUniform3ui)(GLint, GLuint, GLuint, GLuint);
typedef void(*gl12PUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
typedef void(*gl12PUniform1fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl12PUniform2fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl12PUniform3fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl12PUniform4fv)(GLint, GLsizei, GLfloat*);
typedef void(*gl12PUniform1iv)(GLint, GLsizei, GLint*);
typedef void(*gl12PUniform2iv)(GLint, GLsizei, GLint*);
typedef void(*gl12PUniform3iv)(GLint, GLsizei, GLint*);
typedef void(*gl12PUniform4iv)(GLint, GLsizei, GLint*);
typedef void(*gl12PUniform1uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl12PUniform2uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl12PUniform3uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl12PUniform4uiv)(GLint, GLsizei, GLuint*);
typedef void(*gl12PUseProgram)(GLuint);
typedef void(*gl12PValidateProgram)(GLuint);
typedef void(*gl12PVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLvoid*);
typedef void(*gl12PVertexAttrib1f)(GLuint, GLfloat);
typedef void(*gl12PVertexAttrib1s)(GLuint, GLshort);
typedef void(*gl12PVertexAttrib1d)(GLuint, GLdouble);
typedef void(*gl12PVertexAttrib2f)(GLuint, GLfloat, GLfloat);
typedef void(*gl12PVertexAttrib2s)(GLuint, GLshort, GLshort);
typedef void(*gl12PVertexAttrib2d)(GLuint, GLdouble, GLdouble);
typedef void(*gl12PVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
typedef void(*gl12PVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
typedef void(*gl12PVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
typedef void(*gl12PVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
typedef void(*gl12PVertexAttrib4Nuv)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
typedef void(*gl12PVertexAttrib1fv)(GLuint, GLfloat*);
typedef void(*gl12PVertexAttrib1sv)(GLuint, GLshort*);
typedef void(*gl12PVertexAttrib1dv)(GLuint, GLdouble*);
typedef void(*gl12PVertexAttrib2fv)(GLuint, GLfloat*);
typedef void(*gl12PVertexAttrib2sv)(GLuint, GLshort*);
typedef void(*gl12PVertexAttrib2dv)(GLuint, GLdouble*);
typedef void(*gl12PVertexAttrib3fv)(GLuint, GLfloat*);
typedef void(*gl12PVertexAttrib3sv)(GLuint, GLshort*);
typedef void(*gl12PVertexAttrib3dv)(GLuint, GLdouble*);
typedef void(*gl12PVertexAttrib4fv)(GLuint, GLfloat*);
typedef void(*gl12PVertexAttrib4sv)(GLuint, GLshort*);
typedef void(*gl12PVertexAttrib4dv)(GLuint, GLdouble*);
typedef void(*gl12PVertexAttrib4iv)(GLuint, GLint*);
typedef void(*gl12PVertexAttrib4bv)(GLuint, GLbyte*);
typedef void(*gl12PVertexAttrib4ubv)(GLuint, GLubyte*);
typedef void(*gl12PVertexAttrib4usv)(GLuint, GLushort*);
typedef void(*gl12PVertexAttrib4uiv)(GLuint, GLuint*);
typedef void(*gl12PVertexAttrib4Nbv)(GLuint, GLbyte*);
typedef void(*gl12PVertexAttrib4Nsv)(GLuint, GLshort*);
typedef void(*gl12PVertexAttrib4Niv)(GLuint, GLint*);
typedef void(*gl12PVertexAttrib4Nubv)(GLuint, GLubyte*);
typedef void(*gl12PVertexAttrib4Nusv)(GLuint, GLushort*);
typedef void(*gl12PVertexAttrib4Nuiv)(GLuint, GLuint*);
typedef void(*gl12PUniformMatrix2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix3fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, GLfloat*);
typedef void(*gl12PUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, GLfloat*);

typedef struct {
    gl12PAccum fnAccum;
    gl12PAlphaFunc fnAlphaFunc;
    gl12PBegin fnBegin;
    gl12PEnd fnEnd;
    gl12PBitmap fnBitmap;
    gl12PBlendFunc fnBlendFunc;
    gl12PCallList fnCallList;
    gl12PCallLists fnCallLists;
    gl12PClear fnClear;
    gl12PClearAccum fnClearAccum;
    gl12PClearColor fnClearColor;
    gl12PClearDepth fnClearDepth;
    gl12PClearIndex fnClearIndex;
    gl12PClearStencil fnClearStencil;
    gl12PClipPlane fnClipPlane;
    gl12PColor3b fnColor3b;
    gl12PColor3d fnColor3d;
    gl12PColor3f fnColor3f;
    gl12PColor3i fnColor3i;
    gl12PColor3s fnColor3s;
    gl12PColor3ub fnColor3ub;
    gl12PColor3ui fnColor3ui;
    gl12PColor3us fnColor3us;
    gl12PColor4b fnColor4b;
    gl12PColor4d fnColor4d;
    gl12PColor4f fnColor4f;
    gl12PColor4i fnColor4i;
    gl12PColor4s fnColor4s;
    gl12PColor4ub fnColor4ub;
    gl12PColor4ui fnColor4ui;
    gl12PColor4us fnColor4us;
    gl12PColor3bv fnColor3bv;
    gl12PColor3dv fnColor3dv;
    gl12PColor3fv fnColor3fv;
    gl12PColor3iv fnColor3iv;
    gl12PColor3sv fnColor3sv;
    gl12PColor3ubv fnColor3ubv;
    gl12PColor3uiv fnColor3uiv;
    gl12PColor3usv fnColor3usv;
    gl12PColor4bv fnColor4bv;
    gl12PColor4dv fnColor4dv;
    gl12PColor4fv fnColor4fv;
    gl12PColor4iv fnColor4iv;
    gl12PColor4sv fnColor4sv;
    gl12PColor4ubv fnColor4ubv;
    gl12PColor4uiv fnColor4uiv;
    gl12PColor4usv fnColor4usv;
    gl12PColorMask fnColorMask;
    gl12PColorMaterial fnColorMaterial;
    gl12PCopyPixels fnCopyPixels;
    gl12PCullFace fnCullFace;
    gl12PDeleteLists fnDeleteLists;
    gl12PDepthFunc fnDepthFunc;
    gl12PDepthMask fnDepthMask;
    gl12PDepthRange fnDepthRange;
    gl12PEnable fnEnable;
    gl12PDisable fnDisable;
    gl12PDrawBuffer fnDrawBuffer;
    gl12PDrawPixels fnDrawPixels;
    gl12PEdgeFlag fnEdgeFlag;
    gl12PEdgeFlagv fnEdgeFlagv;
    gl12PEdgeFlagPointer fnEdgeFlagPointer;
    gl12PEvalCoord1d fnEvalCoord1d;
    gl12PEvalCoord1f fnEvalCoord1f;
    gl12PEvalCoord2d fnEvalCoord2d;
    gl12PEvalCoord2f fnEvalCoord2f;
    gl12PEvalCoord1dv fnEvalCoord1dv;
    gl12PEvalCoord1fv fnEvalCoord1fv;
    gl12PEvalCoord2dv fnEvalCoord2dv;
    gl12PEvalCoord2fv fnEvalCoord2fv;
    gl12PEvalMesh1 fnEvalMesh1;
    gl12PEvalMesh2 fnEvalMesh2;
    gl12PEvalPoint1 fnEvalPoint1;
    gl12PEvalPoint2 fnEvalPoint2;
    gl12PFeedbackBuffer fnFeedbackBuffer;
    gl12PFinish fnFinish;
    gl12PFlush fnFlush;
    gl12PFogf fnFogf;
    gl12PFogi fnFogi;
    gl12PFogfv fnFogfv;
    gl12PFogiv fnFogiv;
    gl12PFrontFace fnFrontFace;
    gl12PFrustum fnFrustum;
    gl12PGenLists fnGenLists;
    gl12PGetBooleanv fnGetBooleanv;
    gl12PGetDoublev fnGetDoublev;
    gl12PGetFloatv fnGetFloatv;
    gl12PGetIntegerv fnGetIntegerv;
    gl12PGetClipPlane fnGetClipPlane;
    gl12PGetError fnGetError;
    gl12PGetLightfv fnGetLightfv;
    gl12PGetLightiv fnGetLightiv;
    gl12PGetMapdv fnGetMapdv;
    gl12PGetMapfv fnGetMapfv;
    gl12PGetMapiv fnGetMapiv;
    gl12PGetMaterialfv fnGetMaterialfv;
    gl12PGetMaterialiv fnGetMaterialiv;
    gl12PGetPixelMapfv fnGetPixelMapfv;
    gl12PGetPixelMapuiv fnGetPixelMapuiv;
    gl12PGetPixelMapusv fnGetPixelMapusv;
    gl12PGetPolygonStipple fnGetPolygonStipple;
    gl12PGetString fnGetString;
    gl12PGetTexEnvfv fnGetTexEnvfv;
    gl12PGetTexEnviv fnGetTexEnviv;
    gl12PGetTexGendv fnGetTexGendv;
    gl12PGetTexGenfv fnGetTexGenfv;
    gl12PGetTexGeniv fnGetTexGeniv;
    gl12PGetTexImage fnGetTexImage;
    gl12PGetTexLevelParameterfv fnGetTexLevelParameterfv;
    gl12PGetTexLevelParameteriv fnGetTexLevelParameteriv;
    gl12PGetTexParameterfv fnGetTexParameterfv;
    gl12PGetTexParameteriv fnGetTexParameteriv;
    gl12PHint fnHint;
    gl12PIndexd fnIndexd;
    gl12PIndexf fnIndexf;
    gl12PIndexi fnIndexi;
    gl12PIndexs fnIndexs;
    gl12PIndexdv fnIndexdv;
    gl12PIndexfv fnIndexfv;
    gl12PIndexiv fnIndexiv;
    gl12PIndexsv fnIndexsv;
    gl12PIndexMask fnIndexMask;
    gl12PIndexPointer fnIndexPointer;
    gl12PInitNames fnInitNames;
    gl12PIsEnabled fnIsEnabled;
    gl12PIsList fnIsList;
    gl12PLightf fnLightf;
    gl12PLighti fnLighti;
    gl12PLightfv fnLightfv;
    gl12PLightiv fnLightiv;
    gl12PLightModelf fnLightModelf;
    gl12PLightModeli fnLightModeli;
    gl12PLightModelfv fnLightModelfv;
    gl12PLightModeliv fnLightModeliv;
    gl12PLineStipple fnLineStipple;
    gl12PLineWidth fnLineWidth;
    gl12PListBase fnListBase;
    gl12PLoadIdentity fnLoadIdentity;
    gl12PLoadMatrixd fnLoadMatrixd;
    gl12PLoadMatrixf fnLoadMatrixf;
    gl12PLoadName fnLoadName;
    gl12PLogicOp fnLogicOp;
    gl12PMap1d fnMap1d;
    gl12PMap1f fnMap1f;
    gl12PMap2d fnMap2d;
    gl12PMap2f fnMap2f;
    gl12PMapGrid1d fnMapGrid1d;
    gl12PMapGrid1f fnMapGrid1f;
    gl12PMapGrid2d fnMapGrid2d;
    gl12PMapGrid2f fnMapGrid2f;
    gl12PMaterialf fnMaterialf;
    gl12PMateriali fnMateriali;
    gl12PMaterialfv fnMaterialfv;
    gl12PMaterialiv fnMaterialiv;
    gl12PMatrixMode fnMatrixMode;
    gl12PMultMatrixd fnMultMatrixd;
    gl12PMultMatrixf fnMultMatrixf;
    gl12PNewList fnNewList;
    gl12PEndList fnEndList;
    gl12PNormal3b fnNormal3b;
    gl12PNormal3d fnNormal3d;
    gl12PNormal3f fnNormal3f;
    gl12PNormal3i fnNormal3i;
    gl12PNormal3s fnNormal3s;
    gl12PNormal3bv fnNormal3bv;
    gl12PNormal3dv fnNormal3dv;
    gl12PNormal3fv fnNormal3fv;
    gl12PNormal3iv fnNormal3iv;
    gl12PNormal3sv fnNormal3sv;
    gl12POrtho fnOrtho;
    gl12PPassThrough fnPassThrough;
    gl12PPixelMapfv fnPixelMapfv;
    gl12PPixelMapuiv fnPixelMapuiv;
    gl12PPixelMapusv fnPixelMapusv;
    gl12PPixelStoref fnPixelStoref;
    gl12PPixelStorei fnPixelStorei;
    gl12PPixelTransferf fnPixelTransferf;
    gl12PPixelTransferi fnPixelTransferi;
    gl12PPixelZoom fnPixelZoom;
    gl12PPointSize fnPointSize;
    gl12PPolygonMode fnPolygonMode;
    gl12PPolygonStipple fnPolygonStipple;
    gl12PPushAttrib fnPushAttrib;
    gl12PPopAttrib fnPopAttrib;
    gl12PPushMatrix fnPushMatrix;
    gl12PPopMatrix fnPopMatrix;
    gl12PPushName fnPushName;
    gl12PPopName fnPopName;
    gl12PRasterPos2d fnRasterPos2d;
    gl12PRasterPos2f fnRasterPos2f;
    gl12PRasterPos2i fnRasterPos2i;
    gl12PRasterPos2s fnRasterPos2s;
    gl12PRasterPos3d fnRasterPos3d;
    gl12PRasterPos3f fnRasterPos3f;
    gl12PRasterPos3i fnRasterPos3i;
    gl12PRasterPos3s fnRasterPos3s;
    gl12PRasterPos4d fnRasterPos4d;
    gl12PRasterPos4f fnRasterPos4f;
    gl12PRasterPos4i fnRasterPos4i;
    gl12PRasterPos4s fnRasterPos4s;
    gl12PRasterPos2dv fnRasterPos2dv;
    gl12PRasterPos2fv fnRasterPos2fv;
    gl12PRasterPos2iv fnRasterPos2iv;
    gl12PRasterPos2sv fnRasterPos2sv;
    gl12PRasterPos3dv fnRasterPos3dv;
    gl12PRasterPos3fv fnRasterPos3fv;
    gl12PRasterPos3iv fnRasterPos3iv;
    gl12PRasterPos3sv fnRasterPos3sv;
    gl12PRasterPos4dv fnRasterPos4dv;
    gl12PRasterPos4fv fnRasterPos4fv;
    gl12PRasterPos4iv fnRasterPos4iv;
    gl12PRasterPos4sv fnRasterPos4sv;
    gl12PReadBuffer fnReadBuffer;
    gl12PReadPixels fnReadPixels;
    gl12PRectd fnRectd;
    gl12PRectf fnRectf;
    gl12PRecti fnRecti;
    gl12PRects fnRects;
    gl12PRectdv fnRectdv;
    gl12PRectfv fnRectfv;
    gl12PRectiv fnRectiv;
    gl12PRectsv fnRectsv;
    gl12PRenderMode fnRenderMode;
    gl12PRotated fnRotated;
    gl12PRotatef fnRotatef;
    gl12PScaled fnScaled;
    gl12PScalef fnScalef;
    gl12PScissor fnScissor;
    gl12PSelectBuffer fnSelectBuffer;
    gl12PShadeModel fnShadeModel;
    gl12PStencilFunc fnStencilFunc;
    gl12PStencilMask fnStencilMask;
    gl12PStencilOp fnStencilOp;
    gl12PTexCoord1d fnTexCoord1d;
    gl12PTexCoord1f fnTexCoord1f;
    gl12PTexCoord1i fnTexCoord1i;
    gl12PTexCoord1s fnTexCoord1s;
    gl12PTexCoord2d fnTexCoord2d;
    gl12PTexCoord2f fnTexCoord2f;
    gl12PTexCoord2i fnTexCoord2i;
    gl12PTexCoord2s fnTexCoord2s;
    gl12PTexCoord3d fnTexCoord3d;
    gl12PTexCoord3f fnTexCoord3f;
    gl12PTexCoord3i fnTexCoord3i;
    gl12PTexCoord3s fnTexCoord3s;
    gl12PTexCoord4d fnTexCoord4d;
    gl12PTexCoord4f fnTexCoord4f;
    gl12PTexCoord4i fnTexCoord4i;
    gl12PTexCoord4s fnTexCoord4s;
    gl12PTexCoord1dv fnTexCoord1dv;
    gl12PTexCoord1fv fnTexCoord1fv;
    gl12PTexCoord1iv fnTexCoord1iv;
    gl12PTexCoord1sv fnTexCoord1sv;
    gl12PTexCoord2dv fnTexCoord2dv;
    gl12PTexCoord2fv fnTexCoord2fv;
    gl12PTexCoord2iv fnTexCoord2iv;
    gl12PTexCoord2sv fnTexCoord2sv;
    gl12PTexCoord3dv fnTexCoord3dv;
    gl12PTexCoord3fv fnTexCoord3fv;
    gl12PTexCoord3iv fnTexCoord3iv;
    gl12PTexCoord3sv fnTexCoord3sv;
    gl12PTexCoord4dv fnTexCoord4dv;
    gl12PTexCoord4fv fnTexCoord4fv;
    gl12PTexCoord4iv fnTexCoord4iv;
    gl12PTexCoord4sv fnTexCoord4sv;
    gl12PTexEnvf fnTexEnvf;
    gl12PTexEnvi fnTexEnvi;
    gl12PTexEnvfv fnTexEnvfv;
    gl12PTexEnviv fnTexEnviv;
    gl12PTexGend fnTexGend;
    gl12PTexGenf fnTexGenf;
    gl12PTexGeni fnTexGeni;
    gl12PTexGendv fnTexGendv;
    gl12PTexGenfv fnTexGenfv;
    gl12PTexGeniv fnTexGeniv;
    gl12PTexImage1D fnTexImage1D;
    gl12PTexImage2D fnTexImage2D;
    gl12PTexParameterf fnTexParameterf;
    gl12PTexParameteri fnTexParameteri;
    gl12PTexParameterfv fnTexParameterfv;
    gl12PTexParameteriv fnTexParameteriv;
    gl12PTranslated fnTranslated;
    gl12PTranslatef fnTranslatef;
    gl12PVertex2s fnVertex2s;
    gl12PVertex2i fnVertex2i;
    gl12PVertex2f fnVertex2f;
    gl12PVertex2d fnVertex2d;
    gl12PVertex3s fnVertex3s;
    gl12PVertex3i fnVertex3i;
    gl12PVertex3f fnVertex3f;
    gl12PVertex3d fnVertex3d;
    gl12PVertex4s fnVertex4s;
    gl12PVertex4i fnVertex4i;
    gl12PVertex4f fnVertex4f;
    gl12PVertex4d fnVertex4d;
    gl12PViewport fnViewport;
    gl12PGetConvolutionParameterfv fnGetConvolutionParameterfv;
    gl12PGetConvolutionParameteriv fnGetConvolutionParameteriv;
    gl12PAreTexturesResident fnAreTexturesResident;
    gl12PArrayElement fnArrayElement;
    gl12PDrawArrays fnDrawArrays;
    gl12PDrawElements fnDrawElements;
    gl12PGetPointerv fnGetPointerv;
    gl12PPolygonOffset fnPolygonOffset;
    gl12PCopyTexImage1D fnCopyTexImage1D;
    gl12PCopyTexImage2D fnCopyTexImage2D;
    gl12PCopyTexSubImage1D fnCopyTexSubImage1D;
    gl12PCopyTexSubImage2D fnCopyTexSubImage2D;
    gl12PBindTexture fnBindTexture;
    gl12PDeleteTextures fnDeleteTextures;
    gl12PGenTextures fnGenTextures;
    gl12PIsTexture fnIsTexture;
    gl12PColorPointer fnColorPointer;
    gl12PEnableClientState fnEnableClientState;
    gl12PDisableClientState fnDisableClientState;
    gl12PIndexub fnIndexub;
    gl12PIndexubv fnIndexubv;
    gl12PInterleavedArrays fnInterleavedArrays;
    gl12PNormalPointer fnNormalPointer;
    gl12PPushClientAttrib fnPushClientAttrib;
    gl12PPrioritizeTextures fnPrioritizeTextures;
    gl12PPopClientAttrib fnPopClientAttrib;
    gl12PTexCoordPointer fnTexCoordPointer;
    gl12PTexSubImage1D fnTexSubImage1D;
    gl12PTexSubImage2D fnTexSubImage2D;
    gl12PVertexPointer fnVertexPointer;
    gl12PColorTable fnColorTable;
    gl12PColorTableParameterfv fnColorTableParameterfv;
    gl12PColorTableParameteriv fnColorTableParameteriv;
    gl12PColorSubTable fnColorSubTable;
    gl12PConvolutionFilter1D fnConvolutionFilter1D;
    gl12PConvolutionFilter2D fnConvolutionFilter2D;
    gl12PConvolutionParameterf fnConvolutionParameterf;
    gl12PConvolutionParameteri fnConvolutionParameteri;
    gl12PCopyColorTable fnCopyColorTable;
    gl12PCopyColorSubTable fnCopyColorSubTable;
    gl12PCopyConvolutionFilter1D fnCopyConvolutionFilter1D;
    gl12PCopyConvolutionFilter2D fnCopyConvolutionFilter2D;
    gl12PGetColorTable fnGetColorTable;
    gl12PGetColorTableParameterfv fnGetColorTableParameterfv;
    gl12PGetColorTableParameteriv fnGetColorTableParameteriv;
    gl12PGetConvolutionFilter fnGetConvolutionFilter;
    gl12PGetHistogram fnGetHistogram;
    gl12PGetHistogramParameterfv fnGetHistogramParameterfv;
    gl12PGetHistogramParameteriv fnGetHistogramParameteriv;
    gl12PGetSeparableFilter fnGetSeparableFilter;
    gl12PHistogram fnHistogram;
    gl12PMinmax fnMinmax;
    gl12PMultiTexCoord1s fnMultiTexCoord1s;
    gl12PMultiTexCoord1i fnMultiTexCoord1i;
    gl12PMultiTexCoord1f fnMultiTexCoord1f;
    gl12PMultiTexCoord1d fnMultiTexCoord1d;
    gl12PMultiTexCoord2s fnMultiTexCoord2s;
    gl12PMultiTexCoord2i fnMultiTexCoord2i;
    gl12PMultiTexCoord2f fnMultiTexCoord2f;
    gl12PMultiTexCoord2d fnMultiTexCoord2d;
    gl12PMultiTexCoord3s fnMultiTexCoord3s;
    gl12PMultiTexCoord3i fnMultiTexCoord3i;
    gl12PMultiTexCoord3f fnMultiTexCoord3f;
    gl12PMultiTexCoord3d fnMultiTexCoord3d;
    gl12PMultiTexCoord4s fnMultiTexCoord4s;
    gl12PMultiTexCoord4i fnMultiTexCoord4i;
    gl12PMultiTexCoord4f fnMultiTexCoord4f;
    gl12PMultiTexCoord4d fnMultiTexCoord4d;
    gl12PMultiTexCoord1sv fnMultiTexCoord1sv;
    gl12PMultiTexCoord1iv fnMultiTexCoord1iv;
    gl12PMultiTexCoord1fv fnMultiTexCoord1fv;
    gl12PMultiTexCoord1dv fnMultiTexCoord1dv;
    gl12PMultiTexCoord2sv fnMultiTexCoord2sv;
    gl12PMultiTexCoord2iv fnMultiTexCoord2iv;
    gl12PMultiTexCoord2fv fnMultiTexCoord2fv;
    gl12PMultiTexCoord2dv fnMultiTexCoord2dv;
    gl12PMultiTexCoord3sv fnMultiTexCoord3sv;
    gl12PMultiTexCoord3iv fnMultiTexCoord3iv;
    gl12PMultiTexCoord3fv fnMultiTexCoord3fv;
    gl12PMultiTexCoord3dv fnMultiTexCoord3dv;
    gl12PMultiTexCoord4sv fnMultiTexCoord4sv;
    gl12PMultiTexCoord4iv fnMultiTexCoord4iv;
    gl12PMultiTexCoord4fv fnMultiTexCoord4fv;
    gl12PMultiTexCoord4dv fnMultiTexCoord4dv;
    gl12PResetHistogram fnResetHistogram;
    gl12PResetMinmax fnResetMinmax;
    gl12PSeparableFilter2D fnSeparableFilter2D;
    gl12PBlendColor fnBlendColor;
    gl12PBlendEquation fnBlendEquation;
    gl12PCopyTexSubImage3D fnCopyTexSubImage3D;
    gl12PDrawRangeElements fnDrawRangeElements;
    gl12PTexImage3D fnTexImage3D;
    gl12PTexSubImage3D fnTexSubImage3D;
    gl12PActiveTexture fnActiveTexture;
    gl12PClientActiveTexture fnClientActiveTexture;
    gl12PCompressedTexImage1D fnCompressedTexImage1D;
    gl12PCompressedTexImage2D fnCompressedTexImage2D;
    gl12PCompressedTexImage3D fnCompressedTexImage3D;
    gl12PCompressedTexSubImage1D fnCompressedTexSubImage1D;
    gl12PCompressedTexSubImage2D fnCompressedTexSubImage2D;
    gl12PCompressedTexSubImage3D fnCompressedTexSubImage3D;
    gl12PGetCompressedTexImage fnGetCompressedTexImage;
    gl12PLoadTransposeMatrixd fnLoadTransposeMatrixd;
    gl12PLoadTransposeMatrixf fnLoadTransposeMatrixf;
    gl12PMultTransposeMatrixd fnMultTransposeMatrixd;
    gl12PMultTransposeMatrixf fnMultTransposeMatrixf;
    gl12PSampleCoverage fnSampleCoverage;
    gl12PBlendFuncSeparate fnBlendFuncSeparate;
    gl12PFogCoordPointer fnFogCoordPointer;
    gl12PFogCoordd fnFogCoordd;
    gl12PFogCoordf fnFogCoordf;
    gl12PFogCoorddv fnFogCoorddv;
    gl12PFogCoordfv fnFogCoordfv;
    gl12PMultiDrawArrays fnMultiDrawArrays;
    gl12PMultiDrawElements fnMultiDrawElements;
    gl12PPointParameterf fnPointParameterf;
    gl12PPointParameteri fnPointParameteri;
    gl12PSecondaryColor3b fnSecondaryColor3b;
    gl12PSecondaryColor3s fnSecondaryColor3s;
    gl12PSecondaryColor3i fnSecondaryColor3i;
    gl12PSecondaryColor3f fnSecondaryColor3f;
    gl12PSecondaryColor3d fnSecondaryColor3d;
    gl12PSecondaryColor3ub fnSecondaryColor3ub;
    gl12PSecondaryColor3us fnSecondaryColor3us;
    gl12PSecondaryColor3ui fnSecondaryColor3ui;
    gl12PSecondaryColor3bv fnSecondaryColor3bv;
    gl12PSecondaryColor3sv fnSecondaryColor3sv;
    gl12PSecondaryColor3iv fnSecondaryColor3iv;
    gl12PSecondaryColor3fv fnSecondaryColor3fv;
    gl12PSecondaryColor3dv fnSecondaryColor3dv;
    gl12PSecondaryColor3ubv fnSecondaryColor3ubv;
    gl12PSecondaryColor3usv fnSecondaryColor3usv;
    gl12PSecondaryColor3uiv fnSecondaryColor3uiv;
    gl12PSecondaryColorPointer fnSecondaryColorPointer;
    gl12PWindowPos2s fnWindowPos2s;
    gl12PWindowPos2i fnWindowPos2i;
    gl12PWindowPos2f fnWindowPos2f;
    gl12PWindowPos2d fnWindowPos2d;
    gl12PWindowPos3s fnWindowPos3s;
    gl12PWindowPos3i fnWindowPos3i;
    gl12PWindowPos3f fnWindowPos3f;
    gl12PWindowPos3d fnWindowPos3d;
    gl12PWindowPos2sv fnWindowPos2sv;
    gl12PWindowPos2iv fnWindowPos2iv;
    gl12PWindowPos2fv fnWindowPos2fv;
    gl12PWindowPos2dv fnWindowPos2dv;
    gl12PWindowPos3sv fnWindowPos3sv;
    gl12PWindowPos3iv fnWindowPos3iv;
    gl12PWindowPos3fv fnWindowPos3fv;
    gl12PWindowPos3dv fnWindowPos3dv;
    gl12PBeginQuery fnBeginQuery;
    gl12PBindBuffer fnBindBuffer;
    gl12PBufferData fnBufferData;
    gl12PBufferSubData fnBufferSubData;
    gl12PDeleteBuffers fnDeleteBuffers;
    gl12PDeleteQueries fnDeleteQueries;
    gl12PGenBuffers fnGenBuffers;
    gl12PGenQueries fnGenQueries;
    gl12PGetBufferParameteriv fnGetBufferParameteriv;
    gl12PGetBufferPointerv fnGetBufferPointerv;
    gl12PGetBufferSubData fnGetBufferSubData;
    gl12PGetQueryObjectiv fnGetQueryObjectiv;
    gl12PGetQueryObjectuiv fnGetQueryObjectuiv;
    gl12PGetQueryiv fnGetQueryiv;
    gl12PIsBuffer fnIsBuffer;
    gl12PIsQuery fnIsQuery;
    gl12PMapBuffer fnMapBuffer;
    gl12PUnmapBuffer fnUnmapBuffer;
    gl12PAttachShader fnAttachShader;
    gl12PBindAttribLocation fnBindAttribLocation;
    gl12PBlendEquationSeperate fnBlendEquationSeperate;
    gl12PCompileShader fnCompileShader;
    gl12PCreateProgram fnCreateProgram;
    gl12PCreateShader fnCreateShader;
    gl12PDeleteProgram fnDeleteProgram;
    gl12PDeleteShader fnDeleteShader;
    gl12PDetachShader fnDetachShader;
    gl12PEnableVertexAttribArray fnEnableVertexAttribArray;
    gl12PDisableVertexAttribArray fnDisableVertexAttribArray;
    gl12PDrawBuffers fnDrawBuffers;
    gl12PGetActiveAttrib fnGetActiveAttrib;
    gl12PGetActiveUniform fnGetActiveUniform;
    gl12PGetAttachedShaders fnGetAttachedShaders;
    gl12PGetAttribLocation fnGetAttribLocation;
    gl12PGetProgramiv fnGetProgramiv;
    gl12PGetProgramInfoLog fnGetProgramInfoLog;
    gl12PGetShaderiv fnGetShaderiv;
    gl12PGetShaderInfoLog fnGetShaderInfoLog;
    gl12PGetShaderSource fnGetShaderSource;
    gl12PGetUniformfv fnGetUniformfv;
    gl12PGetUniformiv fnGetUniformiv;
    gl12PGetUniformLocation fnGetUniformLocation;
    gl12PGetVertexAttribdv fnGetVertexAttribdv;
    gl12PGetVertexAttribfv fnGetVertexAttribfv;
    gl12PGetVertexAttribiv fnGetVertexAttribiv;
    gl12PGetVertexAttribPointerv fnGetVertexAttribPointerv;
    gl12PIsProgram fnIsProgram;
    gl12PIsShader fnIsShader;
    gl12PLinkProgram fnLinkProgram;
    gl12PShaderSource fnShaderSource;
    gl12PStencilFuncSeparate fnStencilFuncSeparate;
    gl12PStencilMaskSeparate fnStencilMaskSeparate;
    gl12PStencilOpSeparate fnStencilOpSeparate;
    gl12PUniform1f fnUniform1f;
    gl12PUniform2f fnUniform2f;
    gl12PUniform3f fnUniform3f;
    gl12PUniform4f fnUniform4f;
    gl12PUniform1i fnUniform1i;
    gl12PUniform2i fnUniform2i;
    gl12PUniform3i fnUniform3i;
    gl12PUniform4i fnUniform4i;
    gl12PUniform1ui fnUniform1ui;
    gl12PUniform2ui fnUniform2ui;
    gl12PUniform3ui fnUniform3ui;
    gl12PUniform4ui fnUniform4ui;
    gl12PUniform1fv fnUniform1fv;
    gl12PUniform2fv fnUniform2fv;
    gl12PUniform3fv fnUniform3fv;
    gl12PUniform4fv fnUniform4fv;
    gl12PUniform1iv fnUniform1iv;
    gl12PUniform2iv fnUniform2iv;
    gl12PUniform3iv fnUniform3iv;
    gl12PUniform4iv fnUniform4iv;
    gl12PUniform1uiv fnUniform1uiv;
    gl12PUniform2uiv fnUniform2uiv;
    gl12PUniform3uiv fnUniform3uiv;
    gl12PUniform4uiv fnUniform4uiv;
    gl12PUseProgram fnUseProgram;
    gl12PValidateProgram fnValidateProgram;
    gl12PVertexAttribPointer fnVertexAttribPointer;
    gl12PVertexAttrib1f fnVertexAttrib1f;
    gl12PVertexAttrib1s fnVertexAttrib1s;
    gl12PVertexAttrib1d fnVertexAttrib1d;
    gl12PVertexAttrib2f fnVertexAttrib2f;
    gl12PVertexAttrib2s fnVertexAttrib2s;
    gl12PVertexAttrib2d fnVertexAttrib2d;
    gl12PVertexAttrib3f fnVertexAttrib3f;
    gl12PVertexAttrib3s fnVertexAttrib3s;
    gl12PVertexAttrib3d fnVertexAttrib3d;
    gl12PVertexAttrib4f fnVertexAttrib4f;
    gl12PVertexAttrib4s fnVertexAttrib4s;
    gl12PVertexAttrib4d fnVertexAttrib4d;
    gl12PVertexAttrib4Nuv fnVertexAttrib4Nuv;
    gl12PVertexAttrib1fv fnVertexAttrib1fv;
    gl12PVertexAttrib1sv fnVertexAttrib1sv;
    gl12PVertexAttrib1dv fnVertexAttrib1dv;
    gl12PVertexAttrib2fv fnVertexAttrib2fv;
    gl12PVertexAttrib2sv fnVertexAttrib2sv;
    gl12PVertexAttrib2dv fnVertexAttrib2dv;
    gl12PVertexAttrib3fv fnVertexAttrib3fv;
    gl12PVertexAttrib3sv fnVertexAttrib3sv;
    gl12PVertexAttrib3dv fnVertexAttrib3dv;
    gl12PVertexAttrib4fv fnVertexAttrib4fv;
    gl12PVertexAttrib4sv fnVertexAttrib4sv;
    gl12PVertexAttrib4dv fnVertexAttrib4dv;
    gl12PVertexAttrib4iv fnVertexAttrib4iv;
    gl12PVertexAttrib4bv fnVertexAttrib4bv;
    gl12PVertexAttrib4ubv fnVertexAttrib4ubv;
    gl12PVertexAttrib4usv fnVertexAttrib4usv;
    gl12PVertexAttrib4uiv fnVertexAttrib4uiv;
    gl12PVertexAttrib4Nbv fnVertexAttrib4Nbv;
    gl12PVertexAttrib4Nsv fnVertexAttrib4Nsv;
    gl12PVertexAttrib4Niv fnVertexAttrib4Niv;
    gl12PVertexAttrib4Nubv fnVertexAttrib4Nubv;
    gl12PVertexAttrib4Nusv fnVertexAttrib4Nusv;
    gl12PVertexAttrib4Nuiv fnVertexAttrib4Nuiv;
    gl12PUniformMatrix2fv fnUniformMatrix2fv;
    gl12PUniformMatrix3fv fnUniformMatrix3fv;
    gl12PUniformMatrix4fv fnUniformMatrix4fv;
    gl12PUniformMatrix2x3fv fnUniformMatrix2x3fv;
    gl12PUniformMatrix3x2fv fnUniformMatrix3x2fv;
    gl12PUniformMatrix2x4fv fnUniformMatrix2x4fv;
    gl12PUniformMatrix4x2fv fnUniformMatrix4x2fv;
    gl12PUniformMatrix3x4fv fnUniformMatrix3x4fv;
    gl12PUniformMatrix4x3fv fnUniformMatrix4x3fv;
} gl12Context;

extern gl12Context* gl12NewContext();
void gl12Accum(gl12Context* glc, GLenum op, GLfloat value);
void gl12AlphaFunc(gl12Context* glc, GLenum func, GLclampf ref);
void gl12Begin(gl12Context* glc, GLenum mode);
void gl12End(gl12Context* glc);
void gl12Bitmap(gl12Context* glc, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
void gl12BlendFunc(gl12Context* glc, GLenum sfactor, GLenum dfactor);
void gl12CallList(gl12Context* glc, GLuint list);
void gl12CallLists(gl12Context* glc, GLsizei n, GLenum type, GLvoid* lists);
void gl12Clear(gl12Context* glc, GLbitfield mask);
void gl12ClearAccum(gl12Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl12ClearColor(gl12Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl12ClearDepth(gl12Context* glc, GLclampd depth);
void gl12ClearIndex(gl12Context* glc, GLfloat c);
void gl12ClearStencil(gl12Context* glc, GLint s);
void gl12ClipPlane(gl12Context* glc, GLenum plane, GLdouble* equation);
void gl12Color3b(gl12Context* glc, GLbyte red, GLbyte green, GLbyte blue);
void gl12Color3d(gl12Context* glc, GLdouble red, GLdouble green, GLdouble blue);
void gl12Color3f(gl12Context* glc, GLfloat red, GLfloat green, GLfloat blue);
void gl12Color3i(gl12Context* glc, GLint red, GLint green, GLint blue);
void gl12Color3s(gl12Context* glc, GLshort red, GLshort green, GLshort blue);
void gl12Color3ub(gl12Context* glc, GLubyte red, GLubyte green, GLubyte blue);
void gl12Color3ui(gl12Context* glc, GLuint red, GLuint green, GLuint blue);
void gl12Color3us(gl12Context* glc, GLushort red, GLushort green, GLushort blue);
void gl12Color4b(gl12Context* glc, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void gl12Color4d(gl12Context* glc, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void gl12Color4f(gl12Context* glc, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl12Color4i(gl12Context* glc, GLint red, GLint green, GLint blue, GLint alpha);
void gl12Color4s(gl12Context* glc, GLshort red, GLshort green, GLshort blue, GLshort alpha);
void gl12Color4ub(gl12Context* glc, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void gl12Color4ui(gl12Context* glc, GLuint red, GLuint green, GLuint blue, GLuint alpha);
void gl12Color4us(gl12Context* glc, GLushort red, GLushort green, GLushort blue, GLushort alpha);
void gl12Color3bv(gl12Context* glc, GLbyte* v);
void gl12Color3dv(gl12Context* glc, GLdouble* v);
void gl12Color3fv(gl12Context* glc, GLfloat* v);
void gl12Color3iv(gl12Context* glc, GLint* v);
void gl12Color3sv(gl12Context* glc, GLshort* v);
void gl12Color3ubv(gl12Context* glc, GLubyte* v);
void gl12Color3uiv(gl12Context* glc, GLuint* v);
void gl12Color3usv(gl12Context* glc, GLushort* v);
void gl12Color4bv(gl12Context* glc, GLbyte* v);
void gl12Color4dv(gl12Context* glc, GLdouble* v);
void gl12Color4fv(gl12Context* glc, GLfloat* v);
void gl12Color4iv(gl12Context* glc, GLint* v);
void gl12Color4sv(gl12Context* glc, GLshort* v);
void gl12Color4ubv(gl12Context* glc, GLubyte* v);
void gl12Color4uiv(gl12Context* glc, GLuint* v);
void gl12Color4usv(gl12Context* glc, GLushort* v);
void gl12ColorMask(gl12Context* glc, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void gl12ColorMaterial(gl12Context* glc, GLenum face, GLenum mode);
void gl12CopyPixels(gl12Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void gl12CullFace(gl12Context* glc, GLenum mode);
void gl12DeleteLists(gl12Context* glc, GLuint list, GLsizei range);
void gl12DepthFunc(gl12Context* glc, GLenum func);
void gl12DepthMask(gl12Context* glc, GLboolean flag);
void gl12DepthRange(gl12Context* glc, GLclampd zNear, GLclampd zFar);
void gl12Enable(gl12Context* glc, GLenum cap);
void gl12Disable(gl12Context* glc, GLenum cap);
void gl12DrawBuffer(gl12Context* glc, GLenum mode);
void gl12DrawPixels(gl12Context* glc, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl12EdgeFlag(gl12Context* glc, GLboolean flag);
void gl12EdgeFlagv(gl12Context* glc, GLboolean* flag);
void gl12EdgeFlagPointer(gl12Context* glc, GLsizei stride, GLvoid* pointer);
void gl12EvalCoord1d(gl12Context* glc, GLdouble u);
void gl12EvalCoord1f(gl12Context* glc, GLfloat u);
void gl12EvalCoord2d(gl12Context* glc, GLdouble u, GLdouble v);
void gl12EvalCoord2f(gl12Context* glc, GLfloat u, GLfloat v);
void gl12EvalCoord1dv(gl12Context* glc, GLdouble* u);
void gl12EvalCoord1fv(gl12Context* glc, GLfloat* u);
void gl12EvalCoord2dv(gl12Context* glc, GLdouble* u);
void gl12EvalCoord2fv(gl12Context* glc, GLfloat* u);
void gl12EvalMesh1(gl12Context* glc, GLenum mode, GLint i1, GLint i2);
void gl12EvalMesh2(gl12Context* glc, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void gl12EvalPoint1(gl12Context* glc, GLint i);
void gl12EvalPoint2(gl12Context* glc, GLint i, GLint j);
void gl12FeedbackBuffer(gl12Context* glc, GLsizei size, GLenum type, GLfloat* buffer);
void gl12Finish(gl12Context* glc);
void gl12Flush(gl12Context* glc);
void gl12Fogf(gl12Context* glc, GLenum pname, GLfloat param);
void gl12Fogi(gl12Context* glc, GLenum pname, GLint param);
void gl12Fogfv(gl12Context* glc, GLenum pname, GLfloat* params);
void gl12Fogiv(gl12Context* glc, GLenum pname, GLint* params);
void gl12FrontFace(gl12Context* glc, GLenum mode);
void gl12Frustum(gl12Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLuint gl12GenLists(gl12Context* glc, GLsizei range);
void gl12GetBooleanv(gl12Context* glc, GLenum pname, GLboolean* params);
void gl12GetDoublev(gl12Context* glc, GLenum pname, GLdouble* params);
void gl12GetFloatv(gl12Context* glc, GLenum pname, GLfloat* params);
void gl12GetIntegerv(gl12Context* glc, GLenum pname, GLint* params);
void gl12GetClipPlane(gl12Context* glc, GLenum plane, GLdouble* equation);
GLenum gl12GetError(gl12Context* glc);
void gl12GetLightfv(gl12Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl12GetLightiv(gl12Context* glc, GLenum light, GLenum pname, GLint* params);
void gl12GetMapdv(gl12Context* glc, GLenum target, GLenum query, GLdouble* v);
void gl12GetMapfv(gl12Context* glc, GLenum target, GLenum query, GLfloat* v);
void gl12GetMapiv(gl12Context* glc, GLenum target, GLenum query, GLint* v);
void gl12GetMaterialfv(gl12Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl12GetMaterialiv(gl12Context* glc, GLenum face, GLenum pname, GLint* params);
void gl12GetPixelMapfv(gl12Context* glc, GLenum map, GLfloat* values);
void gl12GetPixelMapuiv(gl12Context* glc, GLenum map, GLuint* values);
void gl12GetPixelMapusv(gl12Context* glc, GLenum map, GLushort* values);
void gl12GetPolygonStipple(gl12Context* glc, GLubyte* pattern);
GLubyte* gl12GetString(gl12Context* glc, GLenum name);
void gl12GetTexEnvfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12GetTexEnviv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12GetTexGendv(gl12Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl12GetTexGenfv(gl12Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl12GetTexGeniv(gl12Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl12GetTexImage(gl12Context* glc, GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
void gl12GetTexLevelParameterfv(gl12Context* glc, GLenum target, GLint level, GLenum pname, GLfloat* params);
void gl12GetTexLevelParameteriv(gl12Context* glc, GLenum target, GLint level, GLenum pname, GLint* params);
void gl12GetTexParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12GetTexParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12Hint(gl12Context* glc, GLenum target, GLenum mode);
void gl12Indexd(gl12Context* glc, GLdouble c);
void gl12Indexf(gl12Context* glc, GLfloat c);
void gl12Indexi(gl12Context* glc, GLint c);
void gl12Indexs(gl12Context* glc, GLshort c);
void gl12Indexdv(gl12Context* glc, GLdouble* c);
void gl12Indexfv(gl12Context* glc, GLfloat* c);
void gl12Indexiv(gl12Context* glc, GLint* c);
void gl12Indexsv(gl12Context* glc, GLshort* c);
void gl12IndexMask(gl12Context* glc, GLuint mask);
void gl12IndexPointer(gl12Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12InitNames(gl12Context* glc);
void gl12IsEnabled(gl12Context* glc, GLenum cap);
GLboolean gl12IsList(gl12Context* glc, GLuint list);
void gl12Lightf(gl12Context* glc, GLenum light, GLenum pname, GLfloat param);
void gl12Lighti(gl12Context* glc, GLenum light, GLenum pname, GLint param);
void gl12Lightfv(gl12Context* glc, GLenum light, GLenum pname, GLfloat* params);
void gl12Lightiv(gl12Context* glc, GLenum light, GLenum pname, GLint* params);
void gl12LightModelf(gl12Context* glc, GLenum pname, GLfloat param);
void gl12LightModeli(gl12Context* glc, GLenum pname, GLint param);
void gl12LightModelfv(gl12Context* glc, GLenum pname, GLfloat* params);
void gl12LightModeliv(gl12Context* glc, GLenum pname, GLint* params);
void gl12LineStipple(gl12Context* glc, GLint factor, GLushort pattern);
void gl12LineWidth(gl12Context* glc, GLfloat width);
void gl12ListBase(gl12Context* glc, GLuint base);
void gl12LoadIdentity(gl12Context* glc);
void gl12LoadMatrixd(gl12Context* glc, GLdouble* m);
void gl12LoadMatrixf(gl12Context* glc, GLfloat* m);
void gl12LoadName(gl12Context* glc, GLuint name);
void gl12LogicOp(gl12Context* glc, GLenum opcode);
void gl12Map1d(gl12Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
void gl12Map1f(gl12Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
void gl12Map2d(gl12Context* glc, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
void gl12Map2f(gl12Context* glc, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
void gl12MapGrid1d(gl12Context* glc, GLint un, GLdouble u1, GLdouble u2);
void gl12MapGrid1f(gl12Context* glc, GLint un, GLfloat u1, GLfloat u2);
void gl12MapGrid2d(gl12Context* glc, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void gl12MapGrid2f(gl12Context* glc, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void gl12Materialf(gl12Context* glc, GLenum face, GLenum pname, GLfloat param);
void gl12Materiali(gl12Context* glc, GLenum face, GLenum pname, GLint param);
void gl12Materialfv(gl12Context* glc, GLenum face, GLenum pname, GLfloat* params);
void gl12Materialiv(gl12Context* glc, GLenum face, GLenum pname, GLint* params);
void gl12MatrixMode(gl12Context* glc, GLenum mode);
void gl12MultMatrixd(gl12Context* glc, GLdouble* m);
void gl12MultMatrixf(gl12Context* glc, GLfloat* m);
void gl12NewList(gl12Context* glc, GLuint list, GLenum mode);
void gl12EndList(gl12Context* glc);
void gl12Normal3b(gl12Context* glc, GLbyte nx, GLbyte ny, GLbyte nz);
void gl12Normal3d(gl12Context* glc, GLdouble nx, GLdouble ny, GLdouble nz);
void gl12Normal3f(gl12Context* glc, GLfloat nx, GLfloat ny, GLfloat nz);
void gl12Normal3i(gl12Context* glc, GLint nx, GLint ny, GLint nz);
void gl12Normal3s(gl12Context* glc, GLshort nx, GLshort ny, GLshort nz);
void gl12Normal3bv(gl12Context* glc, GLbyte* v);
void gl12Normal3dv(gl12Context* glc, GLdouble* v);
void gl12Normal3fv(gl12Context* glc, GLfloat* v);
void gl12Normal3iv(gl12Context* glc, GLint* v);
void gl12Normal3sv(gl12Context* glc, GLshort* v);
void gl12Ortho(gl12Context* glc, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zfar);
void gl12PassThrough(gl12Context* glc, GLfloat token);
void gl12PixelMapfv(gl12Context* glc, GLenum map, GLsizei mapsize, GLfloat* values);
void gl12PixelMapuiv(gl12Context* glc, GLenum map, GLsizei mapsize, GLuint* values);
void gl12PixelMapusv(gl12Context* glc, GLenum map, GLsizei mapsize, GLushort* values);
void gl12PixelStoref(gl12Context* glc, GLenum pname, GLfloat param);
void gl12PixelStorei(gl12Context* glc, GLenum pname, GLint param);
void gl12PixelTransferf(gl12Context* glc, GLenum pname, GLfloat param);
void gl12PixelTransferi(gl12Context* glc, GLenum pname, GLint param);
void gl12PixelZoom(gl12Context* glc, GLfloat xfactor, GLfloat yfactor);
void gl12PointSize(gl12Context* glc, GLfloat size);
void gl12PolygonMode(gl12Context* glc, GLenum face, GLenum mode);
void gl12PolygonStipple(gl12Context* glc, GLubyte* mask);
void gl12PushAttrib(gl12Context* glc, GLbitfield mask);
void gl12PopAttrib(gl12Context* glc);
void gl12PushMatrix(gl12Context* glc);
void gl12PopMatrix(gl12Context* glc);
void gl12PushName(gl12Context* glc, GLuint name);
void gl12PopName(gl12Context* glc);
void gl12RasterPos2d(gl12Context* glc, GLdouble x, GLdouble y);
void gl12RasterPos2f(gl12Context* glc, GLfloat x, GLfloat y);
void gl12RasterPos2i(gl12Context* glc, GLint x, GLint y);
void gl12RasterPos2s(gl12Context* glc, GLshort x, GLshort y);
void gl12RasterPos3d(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl12RasterPos3f(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl12RasterPos3i(gl12Context* glc, GLint x, GLint y, GLint z);
void gl12RasterPos3s(gl12Context* glc, GLshort x, GLshort y, GLshort z);
void gl12RasterPos4d(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl12RasterPos4f(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl12RasterPos4i(gl12Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl12RasterPos4s(gl12Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl12RasterPos2dv(gl12Context* glc, GLdouble* v);
void gl12RasterPos2fv(gl12Context* glc, GLfloat* v);
void gl12RasterPos2iv(gl12Context* glc, GLint* v);
void gl12RasterPos2sv(gl12Context* glc, GLshort* v);
void gl12RasterPos3dv(gl12Context* glc, GLdouble* v);
void gl12RasterPos3fv(gl12Context* glc, GLfloat* v);
void gl12RasterPos3iv(gl12Context* glc, GLint* v);
void gl12RasterPos3sv(gl12Context* glc, GLshort* v);
void gl12RasterPos4dv(gl12Context* glc, GLdouble* v);
void gl12RasterPos4fv(gl12Context* glc, GLfloat* v);
void gl12RasterPos4iv(gl12Context* glc, GLint* v);
void gl12RasterPos4sv(gl12Context* glc, GLshort* v);
void gl12ReadBuffer(gl12Context* glc, GLenum mode);
void gl12ReadPixels(gl12Context* glc, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl12Rectd(gl12Context* glc, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void gl12Rectf(gl12Context* glc, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void gl12Recti(gl12Context* glc, GLint x1, GLint y1, GLint x2, GLint y2);
void gl12Rects(gl12Context* glc, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void gl12Rectdv(gl12Context* glc, GLdouble* v1, GLdouble* v2);
void gl12Rectfv(gl12Context* glc, GLfloat* v1, GLfloat* v2);
void gl12Rectiv(gl12Context* glc, GLint* v1, GLint* v2);
void gl12Rectsv(gl12Context* glc, GLshort* v1, GLshort* v2);
GLint gl12RenderMode(gl12Context* glc, GLenum mode);
void gl12Rotated(gl12Context* glc, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void gl12Rotatef(gl12Context* glc, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void gl12Scaled(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl12Scalef(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl12Scissor(gl12Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl12SelectBuffer(gl12Context* glc, GLsizei size, GLuint* buffer);
void gl12ShadeModel(gl12Context* glc, GLenum mode);
void gl12StencilFunc(gl12Context* glc, GLenum func, GLint ref, GLuint mask);
void gl12StencilMask(gl12Context* glc, GLuint mask);
void gl12StencilOp(gl12Context* glc, GLenum fail, GLenum zfail, GLenum zpass);
void gl12TexCoord1d(gl12Context* glc, GLdouble s);
void gl12TexCoord1f(gl12Context* glc, GLfloat s);
void gl12TexCoord1i(gl12Context* glc, GLint s);
void gl12TexCoord1s(gl12Context* glc, GLshort s);
void gl12TexCoord2d(gl12Context* glc, GLdouble s, GLdouble t);
void gl12TexCoord2f(gl12Context* glc, GLfloat s, GLfloat t);
void gl12TexCoord2i(gl12Context* glc, GLint s, GLint t);
void gl12TexCoord2s(gl12Context* glc, GLshort s, GLshort t);
void gl12TexCoord3d(gl12Context* glc, GLdouble s, GLdouble t, GLdouble r);
void gl12TexCoord3f(gl12Context* glc, GLfloat s, GLfloat t, GLfloat r);
void gl12TexCoord3i(gl12Context* glc, GLint s, GLint t, GLint r);
void gl12TexCoord3s(gl12Context* glc, GLshort s, GLshort t, GLshort r);
void gl12TexCoord4d(gl12Context* glc, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl12TexCoord4f(gl12Context* glc, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl12TexCoord4i(gl12Context* glc, GLint s, GLint t, GLint r, GLint q);
void gl12TexCoord4s(gl12Context* glc, GLshort s, GLshort t, GLshort r, GLshort q);
void gl12TexCoord1dv(gl12Context* glc, GLdouble* v);
void gl12TexCoord1fv(gl12Context* glc, GLfloat* v);
void gl12TexCoord1iv(gl12Context* glc, GLint* v);
void gl12TexCoord1sv(gl12Context* glc, GLshort* v);
void gl12TexCoord2dv(gl12Context* glc, GLdouble* v);
void gl12TexCoord2fv(gl12Context* glc, GLfloat* v);
void gl12TexCoord2iv(gl12Context* glc, GLint* v);
void gl12TexCoord2sv(gl12Context* glc, GLshort* v);
void gl12TexCoord3dv(gl12Context* glc, GLdouble* v);
void gl12TexCoord3fv(gl12Context* glc, GLfloat* v);
void gl12TexCoord3iv(gl12Context* glc, GLint* v);
void gl12TexCoord3sv(gl12Context* glc, GLshort* v);
void gl12TexCoord4dv(gl12Context* glc, GLdouble* v);
void gl12TexCoord4fv(gl12Context* glc, GLfloat* v);
void gl12TexCoord4iv(gl12Context* glc, GLint* v);
void gl12TexCoord4sv(gl12Context* glc, GLshort* v);
void gl12TexEnvf(gl12Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl12TexEnvi(gl12Context* glc, GLenum target, GLenum pname, GLint param);
void gl12TexEnvfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12TexEnviv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12TexGend(gl12Context* glc, GLenum coord, GLenum pname, GLdouble param);
void gl12TexGenf(gl12Context* glc, GLenum coord, GLenum pname, GLfloat param);
void gl12TexGeni(gl12Context* glc, GLenum coord, GLenum pname, GLint param);
void gl12TexGendv(gl12Context* glc, GLenum coord, GLenum pname, GLdouble* params);
void gl12TexGenfv(gl12Context* glc, GLenum coord, GLenum pname, GLfloat* params);
void gl12TexGeniv(gl12Context* glc, GLenum coord, GLenum pname, GLint* params);
void gl12TexImage1D(gl12Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl12TexImage2D(gl12Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl12TexParameterf(gl12Context* glc, GLenum target, GLenum pname, GLfloat param);
void gl12TexParameteri(gl12Context* glc, GLenum target, GLenum pname, GLint param);
void gl12TexParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12TexParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12Translated(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl12Translatef(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl12Vertex2s(gl12Context* glc, GLshort x, GLshort y);
void gl12Vertex2i(gl12Context* glc, GLint x, GLint y);
void gl12Vertex2f(gl12Context* glc, GLfloat x, GLfloat y);
void gl12Vertex2d(gl12Context* glc, GLdouble x, GLdouble y);
void gl12Vertex3s(gl12Context* glc, GLshort x, GLshort y, GLshort z);
void gl12Vertex3i(gl12Context* glc, GLint x, GLint y, GLint z);
void gl12Vertex3f(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl12Vertex3d(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl12Vertex4s(gl12Context* glc, GLshort x, GLshort y, GLshort z, GLshort w);
void gl12Vertex4i(gl12Context* glc, GLint x, GLint y, GLint z, GLint w);
void gl12Vertex4f(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl12Vertex4d(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl12Viewport(gl12Context* glc, GLint x, GLint y, GLsizei width, GLsizei height);
void gl12GetConvolutionParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12GetConvolutionParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
GLboolean gl12AreTexturesResident(gl12Context* glc, GLsizei n, GLuint* textures, GLboolean* residences);
void gl12ArrayElement(gl12Context* glc, GLint i);
void gl12DrawArrays(gl12Context* glc, GLenum mode, GLint first, GLsizei count);
void gl12DrawElements(gl12Context* glc, GLenum mode, GLsizei count, GLenum type, GLvoid* indices);
void gl12GetPointerv(gl12Context* glc, GLenum pname, GLvoid* params);
void gl12PolygonOffset(gl12Context* glc, GLfloat factor, GLfloat units);
void gl12CopyTexImage1D(gl12Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void gl12CopyTexImage2D(gl12Context* glc, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void gl12CopyTexSubImage1D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void gl12CopyTexSubImage2D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl12BindTexture(gl12Context* glc, GLenum target, GLuint texture);
void gl12DeleteTextures(gl12Context* glc, GLsizei n, GLuint* textures);
void gl12GenTextures(gl12Context* glc, GLsizei n, GLuint* textures);
GLboolean gl12IsTexture(gl12Context* glc, GLuint texture);
void gl12ColorPointer(gl12Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12EnableClientState(gl12Context* glc, GLenum cap);
void gl12DisableClientState(gl12Context* glc, GLenum cap);
void gl12Indexub(gl12Context* glc, GLubyte c);
void gl12Indexubv(gl12Context* glc, GLubyte* c);
void gl12InterleavedArrays(gl12Context* glc, GLenum format, GLsizei stride, GLvoid* pointer);
void gl12NormalPointer(gl12Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12PushClientAttrib(gl12Context* glc, GLbitfield mask);
void gl12PrioritizeTextures(gl12Context* glc, GLsizei n, GLuint* textures, GLclampf* priorities);
void gl12PopClientAttrib(gl12Context* glc);
void gl12TexCoordPointer(gl12Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12TexSubImage1D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid* pixels);
void gl12TexSubImage2D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void gl12VertexPointer(gl12Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12ColorTable(gl12Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl12ColorTableParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12ColorTableParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12ColorSubTable(gl12Context* glc, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid* data);
void gl12ConvolutionFilter1D(gl12Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid* data);
void gl12ConvolutionFilter2D(gl12Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* data);
void gl12ConvolutionParameterf(gl12Context* glc, GLenum target, GLenum pname, GLfloat params);
void gl12ConvolutionParameteri(gl12Context* glc, GLenum target, GLenum pname, GLint params);
void gl12CopyColorTable(gl12Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl12CopyColorSubTable(gl12Context* glc, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void gl12CopyConvolutionFilter1D(gl12Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void gl12CopyConvolutionFilter2D(gl12Context* glc, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void gl12GetColorTable(gl12Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* table);
void gl12GetColorTableParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12GetColorTableParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12GetConvolutionFilter(gl12Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* image);
void gl12GetHistogram(gl12Context* glc, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
void gl12GetHistogramParameterfv(gl12Context* glc, GLenum target, GLenum pname, GLfloat* params);
void gl12GetHistogramParameteriv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
void gl12GetSeparableFilter(gl12Context* glc, GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span);
void gl12Histogram(gl12Context* glc, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void gl12Minmax(gl12Context* glc, GLenum target, GLenum internalformat, GLboolean sink);
void gl12MultiTexCoord1s(gl12Context* glc, GLenum target, GLshort s);
void gl12MultiTexCoord1i(gl12Context* glc, GLenum target, GLint s);
void gl12MultiTexCoord1f(gl12Context* glc, GLenum target, GLfloat s);
void gl12MultiTexCoord1d(gl12Context* glc, GLenum target, GLdouble s);
void gl12MultiTexCoord2s(gl12Context* glc, GLenum target, GLshort s, GLshort t);
void gl12MultiTexCoord2i(gl12Context* glc, GLenum target, GLint s, GLint t);
void gl12MultiTexCoord2f(gl12Context* glc, GLenum target, GLfloat s, GLfloat t);
void gl12MultiTexCoord2d(gl12Context* glc, GLenum target, GLdouble s, GLdouble t);
void gl12MultiTexCoord3s(gl12Context* glc, GLenum target, GLshort s, GLshort t, GLshort r);
void gl12MultiTexCoord3i(gl12Context* glc, GLenum target, GLint s, GLint t, GLint r);
void gl12MultiTexCoord3f(gl12Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r);
void gl12MultiTexCoord3d(gl12Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r);
void gl12MultiTexCoord4s(gl12Context* glc, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void gl12MultiTexCoord4i(gl12Context* glc, GLenum target, GLint s, GLint t, GLint r, GLint q);
void gl12MultiTexCoord4f(gl12Context* glc, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl12MultiTexCoord4d(gl12Context* glc, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl12MultiTexCoord1sv(gl12Context* glc, GLenum target, GLshort* v);
void gl12MultiTexCoord1iv(gl12Context* glc, GLenum target, GLint* v);
void gl12MultiTexCoord1fv(gl12Context* glc, GLenum target, GLfloat* v);
void gl12MultiTexCoord1dv(gl12Context* glc, GLenum target, GLdouble* v);
void gl12MultiTexCoord2sv(gl12Context* glc, GLenum target, GLshort* v);
void gl12MultiTexCoord2iv(gl12Context* glc, GLenum target, GLint* v);
void gl12MultiTexCoord2fv(gl12Context* glc, GLenum target, GLfloat* v);
void gl12MultiTexCoord2dv(gl12Context* glc, GLenum target, GLdouble* v);
void gl12MultiTexCoord3sv(gl12Context* glc, GLenum target, GLshort* v);
void gl12MultiTexCoord3iv(gl12Context* glc, GLenum target, GLint* v);
void gl12MultiTexCoord3fv(gl12Context* glc, GLenum target, GLfloat* v);
void gl12MultiTexCoord3dv(gl12Context* glc, GLenum target, GLdouble* v);
void gl12MultiTexCoord4sv(gl12Context* glc, GLenum target, GLshort* v);
void gl12MultiTexCoord4iv(gl12Context* glc, GLenum target, GLint* v);
void gl12MultiTexCoord4fv(gl12Context* glc, GLenum target, GLfloat* v);
void gl12MultiTexCoord4dv(gl12Context* glc, GLenum target, GLdouble* v);
void gl12ResetHistogram(gl12Context* glc, GLenum target);
void gl12ResetMinmax(gl12Context* glc, GLenum target);
void gl12SeparableFilter2D(gl12Context* glc, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* row, GLvoid* column);
void gl12BlendColor(gl12Context* glc, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void gl12BlendEquation(gl12Context* glc, GLenum mode);
void gl12CopyTexSubImage3D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl12DrawRangeElements(gl12Context* glc, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid* indices);
void gl12TexImage3D(gl12Context* glc, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid* pixels);
void gl12TexSubImage3D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* pixels);
void gl12ActiveTexture(gl12Context* glc, GLenum texture);
void gl12ClientActiveTexture(gl12Context* glc, GLenum texture);
void gl12CompressedTexImage1D(gl12Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid* data);
void gl12CompressedTexImage2D(gl12Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid* data);
void gl12CompressedTexImage3D(gl12Context* glc, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid* data);
void gl12CompressedTexSubImage1D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid* data);
void gl12CompressedTexSubImage2D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid* data);
void gl12CompressedTexSubImage3D(gl12Context* glc, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid* data);
void gl12GetCompressedTexImage(gl12Context* glc, GLenum target, GLint lod, GLvoid* img);
void gl12LoadTransposeMatrixd(gl12Context* glc, GLdouble* m);
void gl12LoadTransposeMatrixf(gl12Context* glc, GLdouble* m);
void gl12MultTransposeMatrixd(gl12Context* glc, GLdouble* m);
void gl12MultTransposeMatrixf(gl12Context* glc, GLfloat* m);
void gl12SampleCoverage(gl12Context* glc, GLclampf value, GLboolean invert);
void gl12BlendFuncSeparate(gl12Context* glc, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void gl12FogCoordPointer(gl12Context* glc, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12FogCoordd(gl12Context* glc, GLdouble coord);
void gl12FogCoordf(gl12Context* glc, GLfloat coord);
void gl12FogCoorddv(gl12Context* glc, GLdouble* coord);
void gl12FogCoordfv(gl12Context* glc, GLfloat* coord);
void gl12MultiDrawArrays(gl12Context* glc, GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
void gl12MultiDrawElements(gl12Context* glc, GLenum mode, GLsizei* count, GLenum type, GLvoid* indices, GLsizei primcount);
void gl12PointParameterf(gl12Context* glc, GLenum pname, GLfloat param);
void gl12PointParameteri(gl12Context* glc, GLenum pname, GLint param);
void gl12SecondaryColor3b(gl12Context* glc, GLbyte red, GLbyte green, GLbyte blue);
void gl12SecondaryColor3s(gl12Context* glc, GLshort red, GLshort green, GLshort blue);
void gl12SecondaryColor3i(gl12Context* glc, GLint red, GLint green, GLint blue);
void gl12SecondaryColor3f(gl12Context* glc, GLfloat red, GLfloat green, GLfloat blue);
void gl12SecondaryColor3d(gl12Context* glc, GLdouble red, GLdouble green, GLdouble blue);
void gl12SecondaryColor3ub(gl12Context* glc, GLubyte red, GLubyte green, GLubyte blue);
void gl12SecondaryColor3us(gl12Context* glc, GLushort red, GLushort green, GLushort blue);
void gl12SecondaryColor3ui(gl12Context* glc, GLuint red, GLuint green, GLuint blue);
void gl12SecondaryColor3bv(gl12Context* glc, GLbyte* v);
void gl12SecondaryColor3sv(gl12Context* glc, GLshort* v);
void gl12SecondaryColor3iv(gl12Context* glc, GLint* v);
void gl12SecondaryColor3fv(gl12Context* glc, GLfloat* v);
void gl12SecondaryColor3dv(gl12Context* glc, GLdouble* v);
void gl12SecondaryColor3ubv(gl12Context* glc, GLubyte* v);
void gl12SecondaryColor3usv(gl12Context* glc, GLushort* v);
void gl12SecondaryColor3uiv(gl12Context* glc, GLuint* v);
void gl12SecondaryColorPointer(gl12Context* glc, GLint size, GLenum type, GLsizei stride, GLvoid* pointer);
void gl12WindowPos2s(gl12Context* glc, GLshort x, GLshort y);
void gl12WindowPos2i(gl12Context* glc, GLint x, GLint y);
void gl12WindowPos2f(gl12Context* glc, GLfloat x, GLfloat y);
void gl12WindowPos2d(gl12Context* glc, GLdouble x, GLdouble y);
void gl12WindowPos3s(gl12Context* glc, GLshort x, GLshort y, GLshort z);
void gl12WindowPos3i(gl12Context* glc, GLint x, GLint y, GLint z);
void gl12WindowPos3f(gl12Context* glc, GLfloat x, GLfloat y, GLfloat z);
void gl12WindowPos3d(gl12Context* glc, GLdouble x, GLdouble y, GLdouble z);
void gl12WindowPos2sv(gl12Context* glc, GLshort* v);
void gl12WindowPos2iv(gl12Context* glc, GLint* v);
void gl12WindowPos2fv(gl12Context* glc, GLfloat* v);
void gl12WindowPos2dv(gl12Context* glc, GLdouble* v);
void gl12WindowPos3sv(gl12Context* glc, GLshort* v);
void gl12WindowPos3iv(gl12Context* glc, GLint* v);
void gl12WindowPos3fv(gl12Context* glc, GLfloat* v);
void gl12WindowPos3dv(gl12Context* glc, GLdouble* v);
void gl12BeginQuery(gl12Context* glc, GLenum target, GLuint id);
void gl12BindBuffer(gl12Context* glc, GLenum target, GLuint buffer);
void gl12BufferData(gl12Context* glc, GLenum target, GLsizeiptr size, GLvoid* data, GLenum usage);
void gl12BufferSubData(gl12Context* glc, GLenum target, GLenum offset, GLsizeiptr size, GLvoid* data);
void gl12DeleteBuffers(gl12Context* glc, GLsizei n, GLuint* buffers);
void gl12DeleteQueries(gl12Context* glc, GLsizei n, GLuint* ids);
void gl12GenBuffers(gl12Context* glc, GLsizei n, GLuint* buffers);
void gl12GenQueries(gl12Context* glc, GLsizei n, GLuint* ids);
void gl12GetBufferParameteriv(gl12Context* glc, GLenum target, GLenum value, GLint* data);
void gl12GetBufferPointerv(gl12Context* glc, GLenum target, GLenum pname, GLvoid* params);
void gl12GetBufferSubData(gl12Context* glc, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
void gl12GetQueryObjectiv(gl12Context* glc, GLuint id, GLenum pname, GLint* params);
void gl12GetQueryObjectuiv(gl12Context* glc, GLuint id, GLenum pname, GLuint* params);
void gl12GetQueryiv(gl12Context* glc, GLenum target, GLenum pname, GLint* params);
GLboolean gl12IsBuffer(gl12Context* glc, GLuint buffer);
GLboolean gl12IsQuery(gl12Context* glc, GLuint id);
GLvoid* gl12MapBuffer(gl12Context* glc, GLenum target, GLenum access);
GLboolean gl12UnmapBuffer(gl12Context* glc, GLenum target);
void gl12AttachShader(gl12Context* glc, GLuint program, GLuint shader);
void gl12BindAttribLocation(gl12Context* glc, GLuint program, GLuint index, GLchar* name);
void gl12BlendEquationSeperate(gl12Context* glc, GLenum modeRGB, GLenum modeAlpha);
void gl12CompileShader(gl12Context* glc, GLuint shader);
GLuint gl12CreateProgram(gl12Context* glc);
GLuint gl12CreateShader(gl12Context* glc, GLenum shaderType);
void gl12DeleteProgram(gl12Context* glc, GLuint program);
void gl12DeleteShader(gl12Context* glc, GLuint shader);
void gl12DetachShader(gl12Context* glc, GLuint program, GLuint shader);
void gl12EnableVertexAttribArray(gl12Context* glc, GLuint index);
void gl12DisableVertexAttribArray(gl12Context* glc, GLuint index);
void gl12DrawBuffers(gl12Context* glc, GLsizei n, GLenum* bufs);
void gl12GetActiveAttrib(gl12Context* glc, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void gl12GetActiveUniform(gl12Context* glc, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void gl12GetAttachedShaders(gl12Context* glc, GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLint gl12GetAttribLocation(gl12Context* glc, GLuint program, GLchar* name);
void gl12GetProgramiv(gl12Context* glc, GLuint program, GLenum pname, GLint* params);
void gl12GetProgramInfoLog(gl12Context* glc, GLuint program, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
void gl12GetShaderiv(gl12Context* glc, GLuint program, GLenum pname, GLint* params);
void gl12GetShaderInfoLog(gl12Context* glc, GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
void gl12GetShaderSource(gl12Context* glc, GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
void gl12GetUniformfv(gl12Context* glc, GLuint program, GLint location, GLfloat* params);
void gl12GetUniformiv(gl12Context* glc, GLuint program, GLint location, GLint* params);
GLint gl12GetUniformLocation(gl12Context* glc, GLuint program, GLchar* name);
void gl12GetVertexAttribdv(gl12Context* glc, GLuint index, GLenum pname, GLdouble* params);
void gl12GetVertexAttribfv(gl12Context* glc, GLuint index, GLenum pname, GLfloat* params);
void gl12GetVertexAttribiv(gl12Context* glc, GLuint index, GLenum pname, GLint* params);
void gl12GetVertexAttribPointerv(gl12Context* glc, GLuint index, GLenum pname, GLvoid* pointer);
GLboolean gl12IsProgram(gl12Context* glc, GLuint program);
GLboolean gl12IsShader(gl12Context* glc, GLuint shader);
void gl12LinkProgram(gl12Context* glc, GLuint program);
void gl12ShaderSource(gl12Context* glc, GLuint shader, GLsizei count, GLchar** string, GLint* length);
void gl12StencilFuncSeparate(gl12Context* glc, GLenum face, GLenum func, GLint ref, GLuint mask);
void gl12StencilMaskSeparate(gl12Context* glc, GLenum face, GLuint mask);
void gl12StencilOpSeparate(gl12Context* glc, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void gl12Uniform1f(gl12Context* glc, GLint location, GLfloat v0);
void gl12Uniform2f(gl12Context* glc, GLint location, GLfloat v0, GLfloat v1);
void gl12Uniform3f(gl12Context* glc, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void gl12Uniform4f(gl12Context* glc, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void gl12Uniform1i(gl12Context* glc, GLint location, GLint v0);
void gl12Uniform2i(gl12Context* glc, GLint location, GLint v0, GLint v1);
void gl12Uniform3i(gl12Context* glc, GLint location, GLint v0, GLint v1, GLint v2);
void gl12Uniform4i(gl12Context* glc, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void gl12Uniform1ui(gl12Context* glc, GLint location, GLuint v0);
void gl12Uniform2ui(gl12Context* glc, GLint location, GLuint v0, GLuint v1);
void gl12Uniform3ui(gl12Context* glc, GLint location, GLuint v0, GLuint v1, GLuint v2);
void gl12Uniform4ui(gl12Context* glc, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void gl12Uniform1fv(gl12Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl12Uniform2fv(gl12Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl12Uniform3fv(gl12Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl12Uniform4fv(gl12Context* glc, GLint location, GLsizei count, GLfloat* value);
void gl12Uniform1iv(gl12Context* glc, GLint location, GLsizei count, GLint* value);
void gl12Uniform2iv(gl12Context* glc, GLint location, GLsizei count, GLint* value);
void gl12Uniform3iv(gl12Context* glc, GLint location, GLsizei count, GLint* value);
void gl12Uniform4iv(gl12Context* glc, GLint location, GLsizei count, GLint* value);
void gl12Uniform1uiv(gl12Context* glc, GLint location, GLsizei count, GLuint* value);
void gl12Uniform2uiv(gl12Context* glc, GLint location, GLsizei count, GLuint* value);
void gl12Uniform3uiv(gl12Context* glc, GLint location, GLsizei count, GLuint* value);
void gl12Uniform4uiv(gl12Context* glc, GLint location, GLsizei count, GLuint* value);
void gl12UseProgram(gl12Context* glc, GLuint program);
void gl12ValidateProgram(gl12Context* glc, GLuint program);
void gl12VertexAttribPointer(gl12Context* glc, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer);
void gl12VertexAttrib1f(gl12Context* glc, GLuint index, GLfloat v0);
void gl12VertexAttrib1s(gl12Context* glc, GLuint index, GLshort v0);
void gl12VertexAttrib1d(gl12Context* glc, GLuint index, GLdouble v0);
void gl12VertexAttrib2f(gl12Context* glc, GLuint index, GLfloat v0, GLfloat v1);
void gl12VertexAttrib2s(gl12Context* glc, GLuint index, GLshort v0, GLshort v1);
void gl12VertexAttrib2d(gl12Context* glc, GLuint index, GLdouble v0, GLdouble v1);
void gl12VertexAttrib3f(gl12Context* glc, GLuint index, GLfloat v0, GLfloat v1, GLfloat v2);
void gl12VertexAttrib3s(gl12Context* glc, GLuint index, GLshort v0, GLshort v1, GLshort v2);
void gl12VertexAttrib3d(gl12Context* glc, GLuint index, GLdouble v0, GLdouble v1, GLdouble v2);
void gl12VertexAttrib4f(gl12Context* glc, GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void gl12VertexAttrib4s(gl12Context* glc, GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3);
void gl12VertexAttrib4d(gl12Context* glc, GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void gl12VertexAttrib4Nuv(gl12Context* glc, GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3);
void gl12VertexAttrib1fv(gl12Context* glc, GLuint index, GLfloat* v);
void gl12VertexAttrib1sv(gl12Context* glc, GLuint index, GLshort* v);
void gl12VertexAttrib1dv(gl12Context* glc, GLuint index, GLdouble* v);
void gl12VertexAttrib2fv(gl12Context* glc, GLuint index, GLfloat* v);
void gl12VertexAttrib2sv(gl12Context* glc, GLuint index, GLshort* v);
void gl12VertexAttrib2dv(gl12Context* glc, GLuint index, GLdouble* v);
void gl12VertexAttrib3fv(gl12Context* glc, GLuint index, GLfloat* v);
void gl12VertexAttrib3sv(gl12Context* glc, GLuint index, GLshort* v);
void gl12VertexAttrib3dv(gl12Context* glc, GLuint index, GLdouble* v);
void gl12VertexAttrib4fv(gl12Context* glc, GLuint index, GLfloat* v);
void gl12VertexAttrib4sv(gl12Context* glc, GLuint index, GLshort* v);
void gl12VertexAttrib4dv(gl12Context* glc, GLuint index, GLdouble* v);
void gl12VertexAttrib4iv(gl12Context* glc, GLuint index, GLint* v);
void gl12VertexAttrib4bv(gl12Context* glc, GLuint index, GLbyte* v);
void gl12VertexAttrib4ubv(gl12Context* glc, GLuint index, GLubyte* v);
void gl12VertexAttrib4usv(gl12Context* glc, GLuint index, GLushort* v);
void gl12VertexAttrib4uiv(gl12Context* glc, GLuint index, GLuint* v);
void gl12VertexAttrib4Nbv(gl12Context* glc, GLuint index, GLbyte* v);
void gl12VertexAttrib4Nsv(gl12Context* glc, GLuint index, GLshort* v);
void gl12VertexAttrib4Niv(gl12Context* glc, GLuint index, GLint* v);
void gl12VertexAttrib4Nubv(gl12Context* glc, GLuint index, GLubyte* v);
void gl12VertexAttrib4Nusv(gl12Context* glc, GLuint index, GLushort* v);
void gl12VertexAttrib4Nuiv(gl12Context* glc, GLuint index, GLuint* v);
void gl12UniformMatrix2fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix3fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix4fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix2x3fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix3x2fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix2x4fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix4x2fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix3x4fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
void gl12UniformMatrix4x3fv(gl12Context* glc, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
